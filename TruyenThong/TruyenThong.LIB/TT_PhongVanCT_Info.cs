//  This file was generated by CSLA Object Generator - CslaGenFork v4.3.0
//
// Filename:    TT_PhongVanCT_Info
// ObjectType:  TT_PhongVanCT_Info
// CSLAType:    EditableChild

using System;
using System.Data;
using System.Data.SqlClient;
using Csla;
using Csla.Data;
using NETLINK.LIB;
 
namespace TruyenThong.LIB
{

    /// <summary>
    /// TT_PhongVanCT_Info (editable child object).<br/>
    /// This is a generated base class of <see cref="TT_PhongVanCT_Info"/> business object.
    /// </summary>
    /// <remarks>
    /// This class is an item of <see cref="TT_PhongVanCT_Coll"/> collection.
    /// </remarks>
    [Serializable]
    public partial class TT_PhongVanCT_Info : BusinessBase<TT_PhongVanCT_Info>
    {

        #region Static Fields

        private static Int64 _lastID;

        #endregion

        #region Business Properties

        /// <summary>
        /// Maintains metadata about <see cref="IDCT"/> property.
        /// </summary>
        public static readonly PropertyInfo<Int64> IDCTProperty = RegisterProperty<Int64>(p => p.IDCT, "IDCT");
        /// <summary>
        /// Gets the IDCT.
        /// </summary>
        /// <value>The IDCT.</value>
        public Int64 IDCT
        {
            get { return GetProperty(IDCTProperty); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="HoVaTen"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> HoVaTenProperty = RegisterProperty<string>(p => p.HoVaTen, "Ho Va Ten");
        /// <summary>
        /// Gets or sets the Ho Va Ten.
        /// </summary>
        /// <value>The Ho Va Ten.</value>
        public string HoVaTen
        {
            get { return GetProperty(HoVaTenProperty); }
            set { SetProperty(HoVaTenProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="IDChucVu"/> property.
        /// </summary>
        public static readonly PropertyInfo<int> IDChucVuProperty = RegisterProperty<int>(p => p.IDChucVu, "IDChuc Vu");
        /// <summary>
        /// Gets or sets the IDChuc Vu.
        /// </summary>
        /// <value>The IDChuc Vu.</value>
        public int IDChucVu
        {
            get { return GetProperty(IDChucVuProperty); }
            set { SetProperty(IDChucVuProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="PhongVienOrCanBo"/> property.
        /// </summary>
        public static readonly PropertyInfo<bool?> PhongVienOrCanBoProperty = RegisterProperty<bool?>(p => p.PhongVienOrCanBo, "Phong Vien Or Can Bo");
        /// <summary>
        /// Gets or sets the Phong Vien Or Can Bo.
        /// </summary>
        /// <value><c>true</c> if Phong Vien Or Can Bo; <c>false</c> if not Phong Vien Or Can Bo; otherwise, <c>null</c>.</value>
        public bool? PhongVienOrCanBo
        {
            get { return GetProperty(PhongVienOrCanBoProperty); }
            set { SetProperty(PhongVienOrCanBoProperty, value); }
        }

        #endregion

        #region Factory Methods

        /// <summary>
        /// Factory method. Creates a new <see cref="TT_PhongVanCT_Info"/> object.
        /// </summary>
        /// <returns>A reference to the created <see cref="TT_PhongVanCT_Info"/> object.</returns>
        internal static TT_PhongVanCT_Info NewTT_PhongVanCT_Info()
        {
            return DataPortal.CreateChild<TT_PhongVanCT_Info>();
        }

        /// <summary>
        /// Factory method. Asynchronously creates a new <see cref="TT_PhongVanCT_Info"/> object.
        /// </summary>
        /// <param name="callback">The completion callback method.</param>
        internal static void NewTT_PhongVanCT_Info(EventHandler<DataPortalResult<TT_PhongVanCT_Info>> callback)
        {
            DataPortal.BeginCreate<TT_PhongVanCT_Info>(callback);
        }

        /// <summary>
        /// Factory method. Loads a <see cref="TT_PhongVanCT_Info"/> object from the given SafeDataReader.
        /// </summary>
        /// <param name="dr">The SafeDataReader to use.</param>
        /// <returns>A reference to the fetched <see cref="TT_PhongVanCT_Info"/> object.</returns>
        internal static TT_PhongVanCT_Info GetTT_PhongVanCT_Info(SafeDataReader dr)
        {
            TT_PhongVanCT_Info obj = new TT_PhongVanCT_Info();
            // show the framework that this is a child object
            obj.MarkAsChild();
            obj.Fetch(dr);
            obj.MarkOld();
            // check all object rules and property rules
            obj.BusinessRules.CheckRules();
            return obj;
        }

        #endregion

        #region Constructor

        /// <summary>
        /// Initializes a new instance of the <see cref="TT_PhongVanCT_Info"/> class.
        /// </summary>
        /// <remarks> Do not use to create a Csla object. Use factory methods instead.</remarks>
        public TT_PhongVanCT_Info()
        {
            // Prevent direct creation

            // show the framework that this is a child object
            MarkAsChild();
        }

        #endregion

        #region Data Access

        /// <summary>
        /// Loads default values for the <see cref="TT_PhongVanCT_Info"/> object properties.
        /// </summary>
        [Csla.RunLocal]
        protected override void Child_Create()
        {
            LoadProperty(IDCTProperty, System.Threading.Interlocked.Decrement(ref _lastID));
            LoadProperty(HoVaTenProperty, null);
            var args = new DataPortalHookArgs();
            OnCreate(args);
            base.Child_Create();
        }

        /// <summary>
        /// Loads a <see cref="TT_PhongVanCT_Info"/> object from the given SafeDataReader.
        /// </summary>
        /// <param name="dr">The SafeDataReader to use.</param>
        private void Fetch(SafeDataReader dr)
        {
            // Value properties
            LoadProperty(IDCTProperty, dr.GetInt64("IDCT"));
            LoadProperty(HoVaTenProperty, dr.GetString("HoVaTen"));
            LoadProperty(IDChucVuProperty, dr.GetInt32("IDChucVu"));
            LoadProperty(PhongVienOrCanBoProperty, dr.GetBoolean("PhongVienOrCanBo"));            
            var args = new DataPortalHookArgs(dr);
            OnFetchRead(args);
        }

        /// <summary>
        /// Inserts a new <see cref="TT_PhongVanCT_Info"/> object in the database.
        /// </summary>
        /// <param name="parent">The parent object.</param>
        private void Child_Insert(TT_PhongVan parent)
        {
            using (var ctx = TransactionManager<SqlConnection, SqlTransaction>.GetManager("Connection"))
            {
                using (var cmd = new SqlCommand("dbo.TT_PhongVanCT_Info_Add", ctx.Connection))
                {
                    cmd.Transaction = ctx.Transaction;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@ID", parent.ID).DbType = DbType.Int64;
                    cmd.Parameters.AddWithValue("@IDCT", ReadProperty(IDCTProperty)).Direction = ParameterDirection.Output;
                    cmd.Parameters.AddWithValue("@HoVaTen", ReadProperty(HoVaTenProperty) == null ? (object)DBNull.Value : ReadProperty(HoVaTenProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@IDChucVu", ReadProperty(IDChucVuProperty)).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@PhongVienOrCanBo", ReadProperty(PhongVienOrCanBoProperty) == null ? (object)DBNull.Value : ReadProperty(PhongVienOrCanBoProperty).Value).DbType = DbType.Boolean;
                    var args = new DataPortalHookArgs(cmd);
                    OnInsertPre(args);
                    cmd.ExecuteNonQuery();
                    OnInsertPost(args);
                    LoadProperty(IDCTProperty, (long) cmd.Parameters["@IDCT"].Value);
                }
            }
        }

        /// <summary>
        /// Updates in the database all changes made to the <see cref="TT_PhongVanCT_Info"/> object.
        /// </summary>
        private void Child_Update()
        {
            if (!IsDirty)
                return;

            using (var ctx = TransactionManager<SqlConnection, SqlTransaction>.GetManager("Connection"))
            {
                using (var cmd = new SqlCommand("dbo.TT_PhongVanCT_Info_Upd", ctx.Connection))
                {
                    cmd.Transaction = ctx.Transaction;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@IDCT", ReadProperty(IDCTProperty)).DbType = DbType.Int64;
                    cmd.Parameters.AddWithValue("@HoVaTen", ReadProperty(HoVaTenProperty) == null ? (object)DBNull.Value : ReadProperty(HoVaTenProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@IDChucVu", ReadProperty(IDChucVuProperty)).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@PhongVienOrCanBo", ReadProperty(PhongVienOrCanBoProperty) == null ? (object)DBNull.Value : ReadProperty(PhongVienOrCanBoProperty).Value).DbType = DbType.Boolean;
                    var args = new DataPortalHookArgs(cmd);
                    OnUpdatePre(args);
                    cmd.ExecuteNonQuery();
                    OnUpdatePost(args);
                }
            }
        }

        /// <summary>
        /// Self deletes the <see cref="TT_PhongVanCT_Info"/> object from database.
        /// </summary>
        private void Child_DeleteSelf()
        {
            using (var ctx = TransactionManager<SqlConnection, SqlTransaction>.GetManager("Connection"))
            {
                using (var cmd = new SqlCommand("dbo.TT_PhongVanCT_Info_Delete", ctx.Connection))
                {
                    cmd.Transaction = ctx.Transaction;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@IDCT", ReadProperty(IDCTProperty)).DbType = DbType.Int64;
                    var args = new DataPortalHookArgs(cmd);
                    OnDeletePre(args);
                    cmd.ExecuteNonQuery();
                    OnDeletePost(args);
                }
            }
        }

        #endregion

        #region Pseudo Events

        /// <summary>
        /// Occurs after setting all defaults for object creation.
        /// </summary>
        partial void OnCreate(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Delete, after setting query parameters and before the delete operation.
        /// </summary>
        partial void OnDeletePre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Delete, after the delete operation, before Commit().
        /// </summary>
        partial void OnDeletePost(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after setting query parameters and before the fetch operation.
        /// </summary>
        partial void OnFetchPre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after the fetch operation (object or collection is fully loaded and set up).
        /// </summary>
        partial void OnFetchPost(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after the low level fetch operation, before the data reader is destroyed.
        /// </summary>
        partial void OnFetchRead(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after setting query parameters and before the update operation.
        /// </summary>
        partial void OnUpdatePre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Insert, after the update operation, before setting back row identifiers (RowVersion) and Commit().
        /// </summary>
        partial void OnUpdatePost(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Insert, after setting query parameters and before the insert operation.
        /// </summary>
        partial void OnInsertPre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Insert, after the insert operation, before setting back row identifiers (ID and RowVersion) and Commit().
        /// </summary>
        partial void OnInsertPost(DataPortalHookArgs args);

        #endregion

    }
}
