//  This file was generated by CSLA Object Generator - CslaGenFork v4.3.0
//
// Filename:    ADM_AdminTracker
// ObjectType:  ADM_AdminTracker
// CSLAType:    EditableRoot

using System;
using System.Data;
using System.Data.SqlClient;
using Csla;
using Csla.Data;


namespace NETLINK.LIB
{

    /// <summary>
    /// ADM_AdminTracker (editable root object).<br/>
    /// This is a generated base class of <see cref="ADM_AdminTracker"/> business object.
    /// </summary>
    [Serializable]
    public partial class ADM_AdminTracker : BusinessBase<ADM_AdminTracker>
    {

        #region Static Fields

        private static Int64 _lastID;

        #endregion

        #region Business Properties

        /// <summary>
        /// Maintains metadata about <see cref="idUser"/> property.
        /// </summary>
        public static readonly PropertyInfo<Int64?> IdUserProperty = RegisterProperty<Int64?>(p => p.IdUser, "id User");
        /// <summary>
        /// Gets or sets the id User.
        /// </summary>
        /// <value>The id User.</value>
        public Int64? IdUser
        {
            get { return GetProperty(IdUserProperty); }
            set { SetProperty(IdUserProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="JobType"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> JobTypeProperty = RegisterProperty<string>(p => p.JobType, "Job Type");
        /// <summary>
        /// Gets or sets the Job Type.
        /// </summary>
        /// <value>The Job Type.</value>
        public string JobType
        {
            get { return GetProperty(JobTypeProperty); }
            set { SetProperty(JobTypeProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="Date"/> property.
        /// </summary>
        public static readonly PropertyInfo<DateTime> DateProperty = RegisterProperty<DateTime>(p => p.Date, "Date");
        /// <summary>
        /// Gets or sets the Date.
        /// </summary>
        /// <value>The Date.</value>
        public DateTime Date
        {
            get { return GetProperty(DateProperty); }
            set { SetProperty(DateProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="NoiDung"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> NoiDungProperty = RegisterProperty<string>(p => p.NoiDung, "Noi Dung");
        /// <summary>
        /// Gets or sets the Noi Dung.
        /// </summary>
        /// <value>The Noi Dung.</value>
        public string NoiDung
        {
            get { return GetProperty(NoiDungProperty); }
            set { SetProperty(NoiDungProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="GhiChu"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> GhiChuProperty = RegisterProperty<string>(p => p.GhiChu, "Ghi Chu");
        /// <summary>
        /// Gets or sets the Ghi Chu.
        /// </summary>
        /// <value>The Ghi Chu.</value>
        public string GhiChu
        {
            get { return GetProperty(GhiChuProperty); }
            set { SetProperty(GhiChuProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="ID"/> property.
        /// </summary>
        public static readonly PropertyInfo<Int64> IDProperty = RegisterProperty<Int64>(p => p.ID, "ID");
        /// <summary>
        /// Gets the ID.
        /// </summary>
        /// <value>The ID.</value>
        public Int64 ID
        {
            get { return GetProperty(IDProperty); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="FullName"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> FullNameProperty = RegisterProperty<string>(p => p.FullName, "Full Name");
        /// <summary>
        /// Gets or sets the Full Name.
        /// </summary>
        /// <value>The Full Name.</value>
        public string FullName
        {
            get { return GetProperty(FullNameProperty); }
            set { SetProperty(FullNameProperty, value); }
        }

        #endregion

        #region Factory Methods

        /// <summary>
        /// Factory method. Creates a new <see cref="ADM_AdminTracker"/> object.
        /// </summary>
        /// <returns>A reference to the created <see cref="ADM_AdminTracker"/> object.</returns>
        public static ADM_AdminTracker NewADM_AdminTracker()
        {
            return DataPortal.Create<ADM_AdminTracker>();
        }

        /// <summary>
        /// Factory method. Loads a <see cref="ADM_AdminTracker"/> object, based on given parameters.
        /// </summary>
        /// <param name="id">The ID parameter of the ADM_AdminTracker to fetch.</param>
        /// <returns>A reference to the fetched <see cref="ADM_AdminTracker"/> object.</returns>
        public static ADM_AdminTracker GetADM_AdminTracker(Int64 id)
        {
            return DataPortal.Fetch<ADM_AdminTracker>(id);
        }

        /// <summary>
        /// Factory method. Deletes a <see cref="ADM_AdminTracker"/> object, based on given parameters.
        /// </summary>
        /// <param name="id">The ID of the ADM_AdminTracker to delete.</param>
        public static void DeleteADM_AdminTracker(Int64 id)
        {
            DataPortal.Delete<ADM_AdminTracker>(id);
        }

        /// <summary>
        /// Factory method. Asynchronously creates a new <see cref="ADM_AdminTracker"/> object.
        /// </summary>
        /// <param name="callback">The completion callback method.</param>
        public static void NewADM_AdminTracker(EventHandler<DataPortalResult<ADM_AdminTracker>> callback)
        {
            DataPortal.BeginCreate<ADM_AdminTracker>(callback);
        }

        /// <summary>
        /// Factory method. Asynchronously loads a <see cref="ADM_AdminTracker"/> object, based on given parameters.
        /// </summary>
        /// <param name="id">The ID parameter of the ADM_AdminTracker to fetch.</param>
        /// <param name="callback">The completion callback method.</param>
        public static void GetADM_AdminTracker(Int64 id, EventHandler<DataPortalResult<ADM_AdminTracker>> callback)
        {
            DataPortal.BeginFetch<ADM_AdminTracker>(id, callback);
        }

        /// <summary>
        /// Factory method. Asynchronously deletes a <see cref="ADM_AdminTracker"/> object, based on given parameters.
        /// </summary>
        /// <param name="id">The ID of the ADM_AdminTracker to delete.</param>
        /// <param name="callback">The completion callback method.</param>
        public static void DeleteADM_AdminTracker(Int64 id, EventHandler<DataPortalResult<ADM_AdminTracker>> callback)
        {
            DataPortal.BeginDelete<ADM_AdminTracker>(id, callback);
        }

        #endregion

        #region Constructor

        /// <summary>
        /// Initializes a new instance of the <see cref="ADM_AdminTracker"/> class.
        /// </summary>
        /// <remarks> Do not use to create a Csla object. Use factory methods instead.</remarks>
        private ADM_AdminTracker()
        {
            // Prevent direct creation
        }

        #endregion

        #region Data Access

        /// <summary>
        /// Loads default values for the <see cref="ADM_AdminTracker"/> object properties.
        /// </summary>
        [Csla.RunLocal]
        protected override void DataPortal_Create()
        {
            LoadProperty(JobTypeProperty, null);
            LoadProperty(DateProperty, null);
            LoadProperty(NoiDungProperty, null);
            LoadProperty(GhiChuProperty, null);
            LoadProperty(IDProperty, System.Threading.Interlocked.Decrement(ref _lastID));
            LoadProperty(FullNameProperty, null);
            var args = new DataPortalHookArgs();
            OnCreate(args);
            base.DataPortal_Create();
        }

        /// <summary>
        /// Loads a <see cref="ADM_AdminTracker"/> object from the database, based on given criteria.
        /// </summary>
        /// <param name="id">The ID.</param>
        protected void DataPortal_Fetch(Int64 id)
        {
            using (var ctx = ConnectionManager<SqlConnection>.GetManager("Connection"))
            {
                using (var cmd = new SqlCommand("dbo.ADM_AdminTracker_get", ctx.Connection))
                {
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@ID", id).DbType = DbType.Int64;
                    var args = new DataPortalHookArgs(cmd, id);
                    OnFetchPre(args);
                    Fetch(cmd);
                    OnFetchPost(args);
                }
            }
            // check all object rules and property rules
            BusinessRules.CheckRules();
        }

        private void Fetch(SqlCommand cmd)
        {
            using (var dr = new SafeDataReader(cmd.ExecuteReader()))
            {
                if (dr.Read())
                {
                    Fetch(dr);
                }
            }
        }

        /// <summary>
        /// Loads a <see cref="ADM_AdminTracker"/> object from the given SafeDataReader.
        /// </summary>
        /// <param name="dr">The SafeDataReader to use.</param>
        private void Fetch(SafeDataReader dr)
        {
            // Value properties
            LoadProperty(IdUserProperty, dr.GetInt64("IdUser"));
            LoadProperty(JobTypeProperty, dr.GetString("JobType"));
            LoadProperty(DateProperty, dr.GetDateTime("Date"));
            LoadProperty(NoiDungProperty, dr.GetString("NoiDung"));
            LoadProperty(GhiChuProperty, dr.GetString("GhiChu"));
            LoadProperty(IDProperty, dr.GetInt64("ID"));
            LoadProperty(FullNameProperty, dr.GetString("FullName"));
            var args = new DataPortalHookArgs(dr);
            OnFetchRead(args);
        }

        /// <summary>
        /// Inserts a new <see cref="ADM_AdminTracker"/> object in the database.
        /// </summary>
        protected override void DataPortal_Insert()
        {
            using (var ctx = TransactionManager<SqlConnection, SqlTransaction>.GetManager("Connection"))
            {
                using (var cmd = new SqlCommand("dbo.ADM_AdminTracker_add", ctx.Connection))
                {
                    cmd.Transaction = ctx.Transaction;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@idUser", ReadProperty(IdUserProperty) == null ? (object)DBNull.Value : ReadProperty(IdUserProperty).Value).DbType = DbType.Int64;
                    cmd.Parameters.AddWithValue("@JobType", ReadProperty(JobTypeProperty) == null ? (object)DBNull.Value : ReadProperty(JobTypeProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@Date", ReadProperty(DateProperty)).DbType = DbType.DateTime;
                    cmd.Parameters.AddWithValue("@NoiDung", ReadProperty(NoiDungProperty) == null ? (object)DBNull.Value : ReadProperty(NoiDungProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@GhiChu", ReadProperty(GhiChuProperty) == null ? (object)DBNull.Value : ReadProperty(GhiChuProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@ID", ReadProperty(IDProperty)).Direction = ParameterDirection.Output;
                    cmd.Parameters.AddWithValue("@FullName", ReadProperty(FullNameProperty) == null ? (object)DBNull.Value : ReadProperty(FullNameProperty)).DbType = DbType.String;
                    var args = new DataPortalHookArgs(cmd);
                    OnInsertPre(args);
                    cmd.ExecuteNonQuery();
                    OnInsertPost(args);
                    LoadProperty(IDProperty, (long) cmd.Parameters["@ID"].Value);
                }
                ctx.Commit();
            }
        }

        /// <summary>
        /// Updates in the database all changes made to the <see cref="ADM_AdminTracker"/> object.
        /// </summary>
        protected override void DataPortal_Update()
        {
            using (var ctx = TransactionManager<SqlConnection, SqlTransaction>.GetManager("Connection"))
            {
                using (var cmd = new SqlCommand("dbo.ADM_AdminTracker_update", ctx.Connection))
                {
                    cmd.Transaction = ctx.Transaction;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@idUser", ReadProperty(IdUserProperty) == null ? (object)DBNull.Value : ReadProperty(IdUserProperty).Value).DbType = DbType.Int64;
                    cmd.Parameters.AddWithValue("@JobType", ReadProperty(JobTypeProperty) == null ? (object)DBNull.Value : ReadProperty(JobTypeProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@Date", ReadProperty(DateProperty)).DbType = DbType.DateTime;
                    cmd.Parameters.AddWithValue("@NoiDung", ReadProperty(NoiDungProperty) == null ? (object)DBNull.Value : ReadProperty(NoiDungProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@GhiChu", ReadProperty(GhiChuProperty) == null ? (object)DBNull.Value : ReadProperty(GhiChuProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@ID", ReadProperty(IDProperty)).DbType = DbType.Int64;
                    cmd.Parameters.AddWithValue("@FullName", ReadProperty(FullNameProperty) == null ? (object)DBNull.Value : ReadProperty(FullNameProperty)).DbType = DbType.String;
                    var args = new DataPortalHookArgs(cmd);
                    OnUpdatePre(args);
                    cmd.ExecuteNonQuery();
                    OnUpdatePost(args);
                }
                ctx.Commit();
            }
        }

        /// <summary>
        /// Self deletes the <see cref="ADM_AdminTracker"/> object.
        /// </summary>
        protected override void DataPortal_DeleteSelf()
        {
            DataPortal_Delete(ID);
        }

        /// <summary>
        /// Deletes the <see cref="ADM_AdminTracker"/> object from database.
        /// </summary>
        /// <param name="id">The delete criteria.</param>
        protected void DataPortal_Delete(Int64 id)
        {
            using (var ctx = TransactionManager<SqlConnection, SqlTransaction>.GetManager("Connection"))
            {
                using (var cmd = new SqlCommand("dbo.ADM_AdminTracker_delete", ctx.Connection))
                {
                    cmd.Transaction = ctx.Transaction;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@ID", id).DbType = DbType.Int64;
                    var args = new DataPortalHookArgs(cmd, id);
                    OnDeletePre(args);
                    cmd.ExecuteNonQuery();
                    OnDeletePost(args);
                }
                ctx.Commit();
            }
        }

        #endregion

        #region Pseudo Events

        /// <summary>
        /// Occurs after setting all defaults for object creation.
        /// </summary>
        partial void OnCreate(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Delete, after setting query parameters and before the delete operation.
        /// </summary>
        partial void OnDeletePre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Delete, after the delete operation, before Commit().
        /// </summary>
        partial void OnDeletePost(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after setting query parameters and before the fetch operation.
        /// </summary>
        partial void OnFetchPre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after the fetch operation (object or collection is fully loaded and set up).
        /// </summary>
        partial void OnFetchPost(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after the low level fetch operation, before the data reader is destroyed.
        /// </summary>
        partial void OnFetchRead(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after setting query parameters and before the update operation.
        /// </summary>
        partial void OnUpdatePre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Insert, after the update operation, before setting back row identifiers (RowVersion) and Commit().
        /// </summary>
        partial void OnUpdatePost(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Insert, after setting query parameters and before the insert operation.
        /// </summary>
        partial void OnInsertPre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Insert, after the insert operation, before setting back row identifiers (ID and RowVersion) and Commit().
        /// </summary>
        partial void OnInsertPost(DataPortalHookArgs args);

        #endregion

    }
}
