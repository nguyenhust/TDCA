//  This file was generated by CSLA Object Generator - CslaGenFork v4.3.0
//
// Filename:    LOP_HOC_CTIET
// ObjectType:  LOP_HOC_CTIET
// CSLAType:    EditableRoot

using System;
using System.Data;
using System.Data.SqlClient;
using Csla;
using Csla.Data;
using NETLINK.LIB;

namespace oldSoft
{

    /// <summary>
    /// LOP_HOC_CTIET (editable root object).<br/>
    /// This is a generated base class of <see cref="LOP_HOC_CTIET"/> business object.
    /// </summary>
    [Serializable]
    public partial class LOP_HOC_CTIET : BusinessBase<LOP_HOC_CTIET>
    {

        #region Business Properties

        /// <summary>
        /// Maintains metadata about <see cref="LOP_HOC_CTIET_ID"/> property.
        /// </summary>
        public static readonly PropertyInfo<int> LOP_HOC_CTIET_IDProperty = RegisterProperty<int>(p => p.LOP_HOC_CTIET_ID, "LOP HOC CTIET ID");
        /// <summary>
        /// CDT.LOP_HOC_CTIET.LOP_HOC_CTIET_ID
        /// </summary>
        /// <value>The LOP HOC CTIET ID.</value>
        public int LOP_HOC_CTIET_ID
        {
            get { return GetProperty(LOP_HOC_CTIET_IDProperty); }
            set { SetProperty(LOP_HOC_CTIET_IDProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="LOP_HOC_ID"/> property.
        /// </summary>
        public static readonly PropertyInfo<int> LOP_HOC_IDProperty = RegisterProperty<int>(p => p.LOP_HOC_ID, "LOP HOC ID");
        /// <summary>
        /// CDT.LOP_HOC_CTIET.LOP_HOC_ID
        /// </summary>
        /// <value>The LOP HOC ID.</value>
        public int LOP_HOC_ID
        {
            get { return GetProperty(LOP_HOC_IDProperty); }
            set { SetProperty(LOP_HOC_IDProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="NAM"/> property.
        /// </summary>
        public static readonly PropertyInfo<Object> NAMProperty = RegisterProperty<Object>(p => p.NAM, "NAM");
        /// <summary>
        /// CDT.LOP_HOC_CTIET.NAM
        /// </summary>
        /// <value>The NAM.</value>
        public Object NAM
        {
            get { return GetProperty(NAMProperty); }
            set { SetProperty(NAMProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="MA_LOP"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> MA_LOPProperty = RegisterProperty<string>(p => p.MA_LOP, "MA LOP", null);
        /// <summary>
        /// CDT.LOP_HOC_CTIET.MA_LOP
        /// </summary>
        /// <value>The MA LOP.</value>
        public string MA_LOP
        {
            get { return GetProperty(MA_LOPProperty); }
            set { SetProperty(MA_LOPProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="BP_TGIA_ID"/> property.
        /// </summary>
        public static readonly PropertyInfo<int?> BP_TGIA_IDProperty = RegisterProperty<int?>(p => p.BP_TGIA_ID, "BP TGIA ID", null);
        /// <summary>
        /// CDT.LOP_HOC_CTIET.BP_TGIA_ID
        /// </summary>
        /// <value>The BP TGIA ID.</value>
        public int? BP_TGIA_ID
        {
            get { return GetProperty(BP_TGIA_IDProperty); }
            set { SetProperty(BP_TGIA_IDProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="CQ_TGIA_ID"/> property.
        /// </summary>
        public static readonly PropertyInfo<int?> CQ_TGIA_IDProperty = RegisterProperty<int?>(p => p.CQ_TGIA_ID, "CQ TGIA ID", null);
        /// <summary>
        /// CDT.LOP_HOC_CTIET.CQ_TGIA_ID
        /// </summary>
        /// <value>The CQ TGIA ID.</value>
        public int? CQ_TGIA_ID
        {
            get { return GetProperty(CQ_TGIA_IDProperty); }
            set { SetProperty(CQ_TGIA_IDProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="TU_NGAY"/> property.
        /// </summary>
        public static readonly PropertyInfo<Object> TU_NGAYProperty = RegisterProperty<Object>(p => p.TU_NGAY, "TU NGAY");
        /// <summary>
        /// CDT.LOP_HOC_CTIET.TU_NGAY
        /// </summary>
        /// <value>The TU NGAY.</value>
        public Object TU_NGAY
        {
            get { return GetProperty(TU_NGAYProperty); }
            set { SetProperty(TU_NGAYProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="DEN_NGAY"/> property.
        /// </summary>
        public static readonly PropertyInfo<Object> DEN_NGAYProperty = RegisterProperty<Object>(p => p.DEN_NGAY, "DEN NGAY");
        /// <summary>
        /// CDT.LOP_HOC_CTIET.DEN_NGAY
        /// </summary>
        /// <value>The DEN NGAY.</value>
        public Object DEN_NGAY
        {
            get { return GetProperty(DEN_NGAYProperty); }
            set { SetProperty(DEN_NGAYProperty, value); }
        }

        #endregion

        #region Factory Methods

        #endregion

        #region Constructor

        /// <summary>
        /// Initializes a new instance of the <see cref="LOP_HOC_CTIET"/> class.
        /// </summary>
        /// <remarks> Do not use to create a Csla object. Use factory methods instead.</remarks>
        private LOP_HOC_CTIET()
        {
            // Prevent direct creation
        }

        #endregion

        #region Data Access

        /// <summary>
        /// Loads a <see cref="LOP_HOC_CTIET"/> object from the given SafeDataReader.
        /// </summary>
        /// <param name="dr">The SafeDataReader to use.</param>
        private void Fetch(SafeDataReader dr)
        {
            // Value properties
            //LoadProperty(LOP_HOC_CTIET_IDProperty, data.LOP_HOC_CTIET_ID);
            //LoadProperty(LOP_HOC_IDProperty, data.LOP_HOC_ID);
            //LoadProperty(NAMProperty, data.NAM);
            //LoadProperty(MA_LOPProperty, data.MA_LOP);
            //LoadProperty(BP_TGIA_IDProperty, data.BP_TGIA_ID);
            //LoadProperty(CQ_TGIA_IDProperty, data.CQ_TGIA_ID);
            //LoadProperty(TU_NGAYProperty, data.TU_NGAY);
            //LoadProperty(DEN_NGAYProperty, data.DEN_NGAY);
            var args = new DataPortalHookArgs(dr);
            OnFetchRead(args);
        }

        /// <summary>
        /// Inserts a new <see cref="LOP_HOC_CTIET"/> object in the database.
        /// </summary>
        protected override void DataPortal_Insert()
        {
            using (var ctx = TransactionManager<SqlConnection, SqlTransaction>.GetManager("Connection2"))
            {
                using (var cmd = new SqlCommand("dbo.LOP_HOC_CTIET_add", ctx.Connection))
                {
                    cmd.Transaction = ctx.Transaction;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@LOP_HOC_CTIET_ID", ReadProperty(LOP_HOC_CTIET_IDProperty)).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@LOP_HOC_ID", ReadProperty(LOP_HOC_IDProperty)).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@NAM", ReadProperty(NAMProperty)).DbType = DbType.Binary;
                    cmd.Parameters.AddWithValue("@MA_LOP", ReadProperty(MA_LOPProperty) == null ? (object)DBNull.Value : ReadProperty(MA_LOPProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@BP_TGIA_ID", ReadProperty(BP_TGIA_IDProperty) == null ? (object)DBNull.Value : ReadProperty(BP_TGIA_IDProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@CQ_TGIA_ID", ReadProperty(CQ_TGIA_IDProperty) == null ? (object)DBNull.Value : ReadProperty(CQ_TGIA_IDProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@TU_NGAY", ReadProperty(TU_NGAYProperty)).DbType = DbType.Binary;
                    cmd.Parameters.AddWithValue("@DEN_NGAY", ReadProperty(DEN_NGAYProperty)).DbType = DbType.Binary;
                    var args = new DataPortalHookArgs(cmd);
                    OnInsertPre(args);
                    cmd.ExecuteNonQuery();
                    OnInsertPost(args);
                }
                ctx.Commit();
            }
        }

        /// <summary>
        /// Updates in the database all changes made to the <see cref="LOP_HOC_CTIET"/> object.
        /// </summary>
        protected override void DataPortal_Update()
        {
            using (var ctx = TransactionManager<SqlConnection, SqlTransaction>.GetManager("Connection2"))
            {
                using (var cmd = new SqlCommand("dbo.LOP_HOC_CTIET_update", ctx.Connection))
                {
                    cmd.Transaction = ctx.Transaction;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@LOP_HOC_CTIET_ID", ReadProperty(LOP_HOC_CTIET_IDProperty)).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@LOP_HOC_ID", ReadProperty(LOP_HOC_IDProperty)).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@NAM", ReadProperty(NAMProperty)).DbType = DbType.Binary;
                    cmd.Parameters.AddWithValue("@MA_LOP", ReadProperty(MA_LOPProperty) == null ? (object)DBNull.Value : ReadProperty(MA_LOPProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@BP_TGIA_ID", ReadProperty(BP_TGIA_IDProperty) == null ? (object)DBNull.Value : ReadProperty(BP_TGIA_IDProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@CQ_TGIA_ID", ReadProperty(CQ_TGIA_IDProperty) == null ? (object)DBNull.Value : ReadProperty(CQ_TGIA_IDProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@TU_NGAY", ReadProperty(TU_NGAYProperty)).DbType = DbType.Binary;
                    cmd.Parameters.AddWithValue("@DEN_NGAY", ReadProperty(DEN_NGAYProperty)).DbType = DbType.Binary;
                    var args = new DataPortalHookArgs(cmd);
                    OnUpdatePre(args);
                    cmd.ExecuteNonQuery();
                    OnUpdatePost(args);
                }
                ctx.Commit();
            }
        }

        #endregion

        #region Pseudo Events

        /// <summary>
        /// Occurs in DataPortal_Delete, after setting query parameters and before the delete operation.
        /// </summary>
        partial void OnDeletePre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Delete, after the delete operation, before Commit().
        /// </summary>
        partial void OnDeletePost(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after the low level fetch operation, before the data reader is destroyed.
        /// </summary>
        partial void OnFetchRead(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after setting query parameters and before the update operation.
        /// </summary>
        partial void OnUpdatePre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Insert, after the update operation, before setting back row identifiers (RowVersion) and Commit().
        /// </summary>
        partial void OnUpdatePost(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Insert, after setting query parameters and before the insert operation.
        /// </summary>
        partial void OnInsertPre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Insert, after the insert operation, before setting back row identifiers (ID and RowVersion) and Commit().
        /// </summary>
        partial void OnInsertPost(DataPortalHookArgs args);

        #endregion

    }
}
