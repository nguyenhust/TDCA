//  This file was generated by CSLA Object Generator - CslaGenFork v4.3.0
//
// Filename:    DIC_BenhVien
// ObjectType:  DIC_BenhVien
// CSLAType:    EditableRoot

using System;
using System.Data;
using System.Data.SqlClient;
using Csla;
using Csla.Data;
using NETLINK.LIB;

namespace DanhMuc.LIB
{

    /// <summary>
    /// DIC_BenhVien (editable root object).<br/>
    /// This is a generated base class of <see cref="DIC_BenhVien"/> business object.
    /// </summary>
    [Serializable]
    public partial class DIC_BenhVien : BusinessBase<DIC_BenhVien>
    {

        #region Static Fields

        private static Int64 _lastID;

        #endregion

        #region Business Properties

        /// <summary>
        /// Maintains metadata about <see cref="ID"/> property.
        /// </summary>
        public static readonly PropertyInfo<Int64> IDProperty = RegisterProperty<Int64>(p => p.ID, "ID");
        /// <summary>
        /// Gets the ID.
        /// </summary>
        /// <value>The ID.</value>
        public Int64 ID
        {
            get { return GetProperty(IDProperty); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="Ten"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> TenProperty = RegisterProperty<string>(p => p.Ten, "Ten");
        /// <summary>
        /// Gets or sets the Ten.
        /// </summary>
        /// <value>The Ten.</value>
        public string Ten
        {
            get { return GetProperty(TenProperty); }
            set { SetProperty(TenProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="IDTinh"/> property.
        /// </summary>
        public static readonly PropertyInfo<Int64?> IDTinhProperty = RegisterProperty<Int64?>(p => p.IDTinh, "IDTinh");
        /// <summary>
        /// Gets or sets the IDTinh.
        /// </summary>
        /// <value>The IDTinh.</value>
        public Int64? IDTinh
        {
            get { return GetProperty(IDTinhProperty); }
            set { SetProperty(IDTinhProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="KhoangCach"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> KhoangCachProperty = RegisterProperty<string>(p => p.KhoangCach, "Khoang Cach");
        /// <summary>
        /// Gets or sets the Khoang Cach.
        /// </summary>
        /// <value>The Khoang Cach.</value>
        public string KhoangCach
        {
            get { return GetProperty(KhoangCachProperty); }
            set { SetProperty(KhoangCachProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="Email"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> EmailProperty = RegisterProperty<string>(p => p.Email, "Email");
        /// <summary>
        /// Gets or sets the Email.
        /// </summary>
        /// <value>The Email.</value>
        public string Email
        {
            get { return GetProperty(EmailProperty); }
            set { SetProperty(EmailProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="Fax"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> FaxProperty = RegisterProperty<string>(p => p.Fax, "Fax");
        /// <summary>
        /// Gets or sets the Fax.
        /// </summary>
        /// <value>The Fax.</value>
        public string Fax
        {
            get { return GetProperty(FaxProperty); }
            set { SetProperty(FaxProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="IDLoai"/> property.
        /// </summary>
        public static readonly PropertyInfo<int?> IDLoaiProperty = RegisterProperty<int?>(p => p.IDLoai, "IDLoai");
        /// <summary>
        /// Gets or sets the IDLoai.
        /// </summary>
        /// <value>The IDLoai.</value>
        public int? IDLoai
        {
            get { return GetProperty(IDLoaiProperty); }
            set { SetProperty(IDLoaiProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="GiuongTK"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> GiuongTKProperty = RegisterProperty<string>(p => p.GiuongTK, "Giuong TK");
        /// <summary>
        /// Gets or sets the Giuong TK.
        /// </summary>
        /// <value>The Giuong TK.</value>
        public string GiuongTK
        {
            get { return GetProperty(GiuongTKProperty); }
            set { SetProperty(GiuongTKProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="GiuongKH"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> GiuongKHProperty = RegisterProperty<string>(p => p.GiuongKH, "Giuong KH");
        /// <summary>
        /// Gets or sets the Giuong KH.
        /// </summary>
        /// <value>The Giuong KH.</value>
        public string GiuongKH
        {
            get { return GetProperty(GiuongKHProperty); }
            set { SetProperty(GiuongKHProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="KhoaLS"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> KhoaLSProperty = RegisterProperty<string>(p => p.KhoaLS, "Khoa LS");
        /// <summary>
        /// Gets or sets the Khoa LS.
        /// </summary>
        /// <value>The Khoa LS.</value>
        public string KhoaLS
        {
            get { return GetProperty(KhoaLSProperty); }
            set { SetProperty(KhoaLSProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="KhoaCLS"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> KhoaCLSProperty = RegisterProperty<string>(p => p.KhoaCLS, "Khoa CLS");
        /// <summary>
        /// Gets or sets the Khoa CLS.
        /// </summary>
        /// <value>The Khoa CLS.</value>
        public string KhoaCLS
        {
            get { return GetProperty(KhoaCLSProperty); }
            set { SetProperty(KhoaCLSProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="Phong"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> PhongProperty = RegisterProperty<string>(p => p.Phong, "Phong");
        /// <summary>
        /// Gets or sets the Phong.
        /// </summary>
        /// <value>The Phong.</value>
        public string Phong
        {
            get { return GetProperty(PhongProperty); }
            set { SetProperty(PhongProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="GhiChu"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> GhiChuProperty = RegisterProperty<string>(p => p.GhiChu, "Ghi Chu");
        /// <summary>
        /// Gets or sets the Ghi Chu.
        /// </summary>
        /// <value>The Ghi Chu.</value>
        public string GhiChu
        {
            get { return GetProperty(GhiChuProperty); }
            set { SetProperty(GhiChuProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="SuDung"/> property.
        /// </summary>
        public static readonly PropertyInfo<bool?> SuDungProperty = RegisterProperty<bool?>(p => p.SuDung, "Su Dung");
        /// <summary>
        /// Gets or sets the Su Dung.
        /// </summary>
        /// <value><c>true</c> if Su Dung; <c>false</c> if not Su Dung; otherwise, <c>null</c>.</value>
        public bool? SuDung
        {
            get { return GetProperty(SuDungProperty); }
            set { SetProperty(SuDungProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="DienThoai"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> DienThoaiProperty = RegisterProperty<string>(p => p.DienThoai, "Dien Thoai");
        /// <summary>
        /// Gets or sets the Dien Thoai.
        /// </summary>
        /// <value>The Dien Thoai.</value>
        public string DienThoai
        {
            get { return GetProperty(DienThoaiProperty); }
            set { SetProperty(DienThoaiProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="DiaChi"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> DiaChiProperty = RegisterProperty<string>(p => p.DiaChi, "Dia Chi");
        /// <summary>
        /// Gets or sets the Dia Chi.
        /// </summary>
        /// <value>The Dia Chi.</value>
        public string DiaChi
        {
            get { return GetProperty(DiaChiProperty); }
            set { SetProperty(DiaChiProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="LastEdited_User"/> property.
        /// </summary>
        public static readonly PropertyInfo<Int64?> LastEdited_UserProperty = RegisterProperty<Int64?>(p => p.LastEdited_User, "Last Edited User");
        /// <summary>
        /// Gets or sets the Last Edited User.
        /// </summary>
        /// <value>The Last Edited User.</value>
        public Int64? LastEdited_User
        {
            get { return GetProperty(LastEdited_UserProperty); }
            set { SetProperty(LastEdited_UserProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="LastEdited_Date"/> property.
        /// </summary>
        public static readonly PropertyInfo<SmartDate> LastEdited_DateProperty = RegisterProperty<SmartDate>(p => p.LastEdited_Date, "Last Edited Date");
        /// <summary>
        /// Gets or sets the Last Edited Date.
        /// </summary>
        /// <value>The Last Edited Date.</value>
        public SmartDate LastEdited_Date
        {
            get { return GetProperty(LastEdited_DateProperty); }
            set { SetProperty(LastEdited_DateProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="Hang"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> HangProperty = RegisterProperty<string>(p => p.Hang, "Hang");
        /// <summary>
        /// Gets or sets the Hang.
        /// </summary>
        /// <value>The Hang.</value>
        public string Hang
        {
            get { return GetProperty(HangProperty); }
            set { SetProperty(HangProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="GDTen"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> GDTenProperty = RegisterProperty<string>(p => p.GDTen, "GDTen");
        /// <summary>
        /// Gets or sets the GDTen.
        /// </summary>
        /// <value>The GDTen.</value>
        public string GDTen
        {
            get { return GetProperty(GDTenProperty); }
            set { SetProperty(GDTenProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="GDDT"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> GDDTProperty = RegisterProperty<string>(p => p.GDDT, "GDDT");
        /// <summary>
        /// Gets or sets the GDDT.
        /// </summary>
        /// <value>The GDDT.</value>
        public string GDDT
        {
            get { return GetProperty(GDDTProperty); }
            set { SetProperty(GDDTProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="GDEmail"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> GDEmailProperty = RegisterProperty<string>(p => p.GDEmail, "GDEmail");
        /// <summary>
        /// Gets or sets the GDEmail.
        /// </summary>
        /// <value>The GDEmail.</value>
        public string GDEmail
        {
            get { return GetProperty(GDEmailProperty); }
            set { SetProperty(GDEmailProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="PGD1Ten"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> PGD1TenProperty = RegisterProperty<string>(p => p.PGD1Ten, "PGD1 Ten");
        /// <summary>
        /// Gets or sets the PGD1 Ten.
        /// </summary>
        /// <value>The PGD1 Ten.</value>
        public string PGD1Ten
        {
            get { return GetProperty(PGD1TenProperty); }
            set { SetProperty(PGD1TenProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="PGD1DT"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> PGD1DTProperty = RegisterProperty<string>(p => p.PGD1DT, "PGD1 DT");
        /// <summary>
        /// Gets or sets the PGD1 DT.
        /// </summary>
        /// <value>The PGD1 DT.</value>
        public string PGD1DT
        {
            get { return GetProperty(PGD1DTProperty); }
            set { SetProperty(PGD1DTProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="PGD1Email"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> PGD1EmailProperty = RegisterProperty<string>(p => p.PGD1Email, "PGD1 Email");
        /// <summary>
        /// Gets or sets the PGD1 Email.
        /// </summary>
        /// <value>The PGD1 Email.</value>
        public string PGD1Email
        {
            get { return GetProperty(PGD1EmailProperty); }
            set { SetProperty(PGD1EmailProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="PGD2Ten"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> PGD2TenProperty = RegisterProperty<string>(p => p.PGD2Ten, "PGD2 Ten");
        /// <summary>
        /// Gets or sets the PGD2 Ten.
        /// </summary>
        /// <value>The PGD2 Ten.</value>
        public string PGD2Ten
        {
            get { return GetProperty(PGD2TenProperty); }
            set { SetProperty(PGD2TenProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="PGD2DT"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> PGD2DTProperty = RegisterProperty<string>(p => p.PGD2DT, "PGD2 DT");
        /// <summary>
        /// Gets or sets the PGD2 DT.
        /// </summary>
        /// <value>The PGD2 DT.</value>
        public string PGD2DT
        {
            get { return GetProperty(PGD2DTProperty); }
            set { SetProperty(PGD2DTProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="PGD2Email"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> PGD2EmailProperty = RegisterProperty<string>(p => p.PGD2Email, "PGD2 Email");
        /// <summary>
        /// Gets or sets the PGD2 Email.
        /// </summary>
        /// <value>The PGD2 Email.</value>
        public string PGD2Email
        {
            get { return GetProperty(PGD2EmailProperty); }
            set { SetProperty(PGD2EmailProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="TPKHTHTen"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> TPKHTHTenProperty = RegisterProperty<string>(p => p.TPKHTHTen, "TPKHTHTen");
        /// <summary>
        /// Gets or sets the TPKHTHTen.
        /// </summary>
        /// <value>The TPKHTHTen.</value>
        public string TPKHTHTen
        {
            get { return GetProperty(TPKHTHTenProperty); }
            set { SetProperty(TPKHTHTenProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="TPKHTHEmail"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> TPKHTHEmailProperty = RegisterProperty<string>(p => p.TPKHTHEmail, "TPKHTHEmail");
        /// <summary>
        /// Gets or sets the TPKHTHEmail.
        /// </summary>
        /// <value>The TPKHTHEmail.</value>
        public string TPKHTHEmail
        {
            get { return GetProperty(TPKHTHEmailProperty); }
            set { SetProperty(TPKHTHEmailProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="TPKHTHDT"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> TPKHTHDTProperty = RegisterProperty<string>(p => p.TPKHTHDT, "TPKHTHDT");
        /// <summary>
        /// Gets or sets the TPKHTHDT.
        /// </summary>
        /// <value>The TPKHTHDT.</value>
        public string TPKHTHDT
        {
            get { return GetProperty(TPKHTHDTProperty); }
            set { SetProperty(TPKHTHDTProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="PPKH1Ten"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> PPKH1TenProperty = RegisterProperty<string>(p => p.PPKH1Ten, "PPKH1 Ten");
        /// <summary>
        /// Gets or sets the PPKH1 Ten.
        /// </summary>
        /// <value>The PPKH1 Ten.</value>
        public string PPKH1Ten
        {
            get { return GetProperty(PPKH1TenProperty); }
            set { SetProperty(PPKH1TenProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="PPKH1Email"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> PPKH1EmailProperty = RegisterProperty<string>(p => p.PPKH1Email, "PPKH1 Email");
        /// <summary>
        /// Gets or sets the PPKH1 Email.
        /// </summary>
        /// <value>The PPKH1 Email.</value>
        public string PPKH1Email
        {
            get { return GetProperty(PPKH1EmailProperty); }
            set { SetProperty(PPKH1EmailProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="PPKH1DT"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> PPKH1DTProperty = RegisterProperty<string>(p => p.PPKH1DT, "PPKH1 DT");
        /// <summary>
        /// Gets or sets the PPKH1 DT.
        /// </summary>
        /// <value>The PPKH1 DT.</value>
        public string PPKH1DT
        {
            get { return GetProperty(PPKH1DTProperty); }
            set { SetProperty(PPKH1DTProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="PPKH2Ten"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> PPKH2TenProperty = RegisterProperty<string>(p => p.PPKH2Ten, "PPKH2 Ten");
        /// <summary>
        /// Gets or sets the PPKH2 Ten.
        /// </summary>
        /// <value>The PPKH2 Ten.</value>
        public string PPKH2Ten
        {
            get { return GetProperty(PPKH2TenProperty); }
            set { SetProperty(PPKH2TenProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="PPKH2Email"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> PPKH2EmailProperty = RegisterProperty<string>(p => p.PPKH2Email, "PPKH2 Email");
        /// <summary>
        /// Gets or sets the PPKH2 Email.
        /// </summary>
        /// <value>The PPKH2 Email.</value>
        public string PPKH2Email
        {
            get { return GetProperty(PPKH2EmailProperty); }
            set { SetProperty(PPKH2EmailProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="PPKH2DT"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> PPKH2DTProperty = RegisterProperty<string>(p => p.PPKH2DT, "PPKH2 DT");
        /// <summary>
        /// Gets or sets the PPKH2 DT.
        /// </summary>
        /// <value>The PPKH2 DT.</value>
        public string PPKH2DT
        {
            get { return GetProperty(PPKH2DTProperty); }
            set { SetProperty(PPKH2DTProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="TPCDTTen"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> TPCDTTenProperty = RegisterProperty<string>(p => p.TPCDTTen, "TPCDTTen");
        /// <summary>
        /// Gets or sets the TPCDTTen.
        /// </summary>
        /// <value>The TPCDTTen.</value>
        public string TPCDTTen
        {
            get { return GetProperty(TPCDTTenProperty); }
            set { SetProperty(TPCDTTenProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="TPCDTEmail"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> TPCDTEmailProperty = RegisterProperty<string>(p => p.TPCDTEmail, "TPCDTEmail");
        /// <summary>
        /// Gets or sets the TPCDTEmail.
        /// </summary>
        /// <value>The TPCDTEmail.</value>
        public string TPCDTEmail
        {
            get { return GetProperty(TPCDTEmailProperty); }
            set { SetProperty(TPCDTEmailProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="TPCDTDT"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> TPCDTDTProperty = RegisterProperty<string>(p => p.TPCDTDT, "TPCDTDT");
        /// <summary>
        /// Gets or sets the TPCDTDT.
        /// </summary>
        /// <value>The TPCDTDT.</value>
        public string TPCDTDT
        {
            get { return GetProperty(TPCDTDTProperty); }
            set { SetProperty(TPCDTDTProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="PPCDT1Ten"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> PPCDT1TenProperty = RegisterProperty<string>(p => p.PPCDT1Ten, "PPCDT1 Ten");
        /// <summary>
        /// Gets or sets the PPCDT1 Ten.
        /// </summary>
        /// <value>The PPCDT1 Ten.</value>
        public string PPCDT1Ten
        {
            get { return GetProperty(PPCDT1TenProperty); }
            set { SetProperty(PPCDT1TenProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="PPCDT1Email"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> PPCDT1EmailProperty = RegisterProperty<string>(p => p.PPCDT1Email, "PPCDT1 Email");
        /// <summary>
        /// Gets or sets the PPCDT1 Email.
        /// </summary>
        /// <value>The PPCDT1 Email.</value>
        public string PPCDT1Email
        {
            get { return GetProperty(PPCDT1EmailProperty); }
            set { SetProperty(PPCDT1EmailProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="PPCDT2DT"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> PPCDT2DTProperty = RegisterProperty<string>(p => p.PPCDT2DT, "PPCDT2 DT");
        /// <summary>
        /// Gets or sets the PPCDT2 DT.
        /// </summary>
        /// <value>The PPCDT2 DT.</value>
        public string PPCDT2DT
        {
            get { return GetProperty(PPCDT2DTProperty); }
            set { SetProperty(PPCDT2DTProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="PPCDT2Email"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> PPCDT2EmailProperty = RegisterProperty<string>(p => p.PPCDT2Email, "PPCDT2 Email");
        /// <summary>
        /// Gets or sets the PPCDT2 Email.
        /// </summary>
        /// <value>The PPCDT2 Email.</value>
        public string PPCDT2Email
        {
            get { return GetProperty(PPCDT2EmailProperty); }
            set { SetProperty(PPCDT2EmailProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="PPCDT2Ten"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> PPCDT2TenProperty = RegisterProperty<string>(p => p.PPCDT2Ten, "PPCDT2 Ten");
        /// <summary>
        /// Gets or sets the PPCDT2 Ten.
        /// </summary>
        /// <value>The PPCDT2 Ten.</value>
        public string PPCDT2Ten
        {
            get { return GetProperty(PPCDT2TenProperty); }
            set { SetProperty(PPCDT2TenProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="PPCDT1DT"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> PPCDT1DTProperty = RegisterProperty<string>(p => p.PPCDT1DT, "PPCDT1 DT");
        /// <summary>
        /// Gets or sets the PPCDT1 DT.
        /// </summary>
        /// <value>The PPCDT1 DT.</value>
        public string PPCDT1DT
        {
            get { return GetProperty(PPCDT1DTProperty); }
            set { SetProperty(PPCDT1DTProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="backup01"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> Backup01Property = RegisterProperty<string>(p => p.Backup01, "backup01");
        /// <summary>
        /// Gets or sets the backup01.
        /// </summary>
        /// <value>The backup01.</value>
        public string Backup01
        {
            get { return GetProperty(Backup01Property); }
            set { SetProperty(Backup01Property, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="backup02"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> Backup02Property = RegisterProperty<string>(p => p.Backup02, "backup02");
        /// <summary>
        /// Gets or sets the backup02.
        /// </summary>
        /// <value>The backup02.</value>
        public string Backup02
        {
            get { return GetProperty(Backup02Property); }
            set { SetProperty(Backup02Property, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="backup03"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> Backup03Property = RegisterProperty<string>(p => p.Backup03, "backup03");
        /// <summary>
        /// Gets or sets the backup03.
        /// </summary>
        /// <value>The backup03.</value>
        public string Backup03
        {
            get { return GetProperty(Backup03Property); }
            set { SetProperty(Backup03Property, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="backup04"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> Backup04Property = RegisterProperty<string>(p => p.Backup04, "backup04");
        /// <summary>
        /// Gets or sets the backup04.
        /// </summary>
        /// <value>The backup04.</value>
        public string Backup04
        {
            get { return GetProperty(Backup04Property); }
            set { SetProperty(Backup04Property, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="backup05"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> Backup05Property = RegisterProperty<string>(p => p.Backup05, "backup05");
        /// <summary>
        /// Gets or sets the backup05.
        /// </summary>
        /// <value>The backup05.</value>
        public string Backup05
        {
            get { return GetProperty(Backup05Property); }
            set { SetProperty(Backup05Property, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="backup06"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> Backup06Property = RegisterProperty<string>(p => p.Backup06, "backup06");
        /// <summary>
        /// Gets or sets the backup06.
        /// </summary>
        /// <value>The backup06.</value>
        public string Backup06
        {
            get { return GetProperty(Backup06Property); }
            set { SetProperty(Backup06Property, value); }
        }

        #endregion

        #region Factory Methods

        /// <summary>
        /// Factory method. Creates a new <see cref="DIC_BenhVien"/> object.
        /// </summary>
        /// <returns>A reference to the created <see cref="DIC_BenhVien"/> object.</returns>
        public static DIC_BenhVien NewDIC_BenhVien()
        {
            return DataPortal.Create<DIC_BenhVien>();
        }

        /// <summary>
        /// Factory method. Loads a <see cref="DIC_BenhVien"/> object, based on given parameters.
        /// </summary>
        /// <param name="id">The ID parameter of the DIC_BenhVien to fetch.</param>
        /// <returns>A reference to the fetched <see cref="DIC_BenhVien"/> object.</returns>
        public static DIC_BenhVien GetDIC_BenhVien(Int64 id)
        {
            return DataPortal.Fetch<DIC_BenhVien>(id);
        }

        /// <summary>
        /// Factory method. Deletes a <see cref="DIC_BenhVien"/> object, based on given parameters.
        /// </summary>
        /// <param name="id">The ID of the DIC_BenhVien to delete.</param>
        public static void DeleteDIC_BenhVien(Int64 id)
        {
            DataPortal.Delete<DIC_BenhVien>(id);
        }

        /// <summary>
        /// Factory method. Asynchronously creates a new <see cref="DIC_BenhVien"/> object.
        /// </summary>
        /// <param name="callback">The completion callback method.</param>
        public static void NewDIC_BenhVien(EventHandler<DataPortalResult<DIC_BenhVien>> callback)
        {
            DataPortal.BeginCreate<DIC_BenhVien>(callback);
        }

        /// <summary>
        /// Factory method. Asynchronously loads a <see cref="DIC_BenhVien"/> object, based on given parameters.
        /// </summary>
        /// <param name="id">The ID parameter of the DIC_BenhVien to fetch.</param>
        /// <param name="callback">The completion callback method.</param>
        public static void GetDIC_BenhVien(Int64 id, EventHandler<DataPortalResult<DIC_BenhVien>> callback)
        {
            DataPortal.BeginFetch<DIC_BenhVien>(id, callback);
        }

        /// <summary>
        /// Factory method. Asynchronously deletes a <see cref="DIC_BenhVien"/> object, based on given parameters.
        /// </summary>
        /// <param name="id">The ID of the DIC_BenhVien to delete.</param>
        /// <param name="callback">The completion callback method.</param>
        public static void DeleteDIC_BenhVien(Int64 id, EventHandler<DataPortalResult<DIC_BenhVien>> callback)
        {
            DataPortal.BeginDelete<DIC_BenhVien>(id, callback);
        }

        #endregion

        #region Constructor

        /// <summary>
        /// Initializes a new instance of the <see cref="DIC_BenhVien"/> class.
        /// </summary>
        /// <remarks> Do not use to create a Csla object. Use factory methods instead.</remarks>
        private DIC_BenhVien()
        {
            // Prevent direct creation
        }

        #endregion

        #region Data Access

        /// <summary>
        /// Loads default values for the <see cref="DIC_BenhVien"/> object properties.
        /// </summary>
        [Csla.RunLocal]
        protected override void DataPortal_Create()
        {
            LoadProperty(IDProperty, System.Threading.Interlocked.Decrement(ref _lastID));
            LoadProperty(TenProperty, null);
            LoadProperty(KhoangCachProperty, null);
            LoadProperty(EmailProperty, null);
            LoadProperty(FaxProperty, null);
            LoadProperty(GiuongTKProperty, null);
            LoadProperty(GiuongKHProperty, null);
            LoadProperty(KhoaLSProperty, null);
            LoadProperty(KhoaCLSProperty, null);
            LoadProperty(PhongProperty, null);
            LoadProperty(GhiChuProperty, null);
            LoadProperty(DienThoaiProperty, null);
            LoadProperty(DiaChiProperty, null);
            LoadProperty(LastEdited_DateProperty, null);
            LoadProperty(HangProperty, null);
            LoadProperty(GDTenProperty, null);
            LoadProperty(GDDTProperty, null);
            LoadProperty(GDEmailProperty, null);
            LoadProperty(PGD1TenProperty, null);
            LoadProperty(PGD1DTProperty, null);
            LoadProperty(PGD1EmailProperty, null);
            LoadProperty(PGD2TenProperty, null);
            LoadProperty(PGD2DTProperty, null);
            LoadProperty(PGD2EmailProperty, null);
            LoadProperty(TPKHTHTenProperty, null);
            LoadProperty(TPKHTHEmailProperty, null);
            LoadProperty(TPKHTHDTProperty, null);
            LoadProperty(PPKH1TenProperty, null);
            LoadProperty(PPKH1EmailProperty, null);
            LoadProperty(PPKH1DTProperty, null);
            LoadProperty(PPKH2TenProperty, null);
            LoadProperty(PPKH2EmailProperty, null);
            LoadProperty(PPKH2DTProperty, null);
            LoadProperty(TPCDTTenProperty, null);
            LoadProperty(TPCDTEmailProperty, null);
            LoadProperty(TPCDTDTProperty, null);
            LoadProperty(PPCDT1TenProperty, null);
            LoadProperty(PPCDT1EmailProperty, null);
            LoadProperty(PPCDT2DTProperty, null);
            LoadProperty(PPCDT2EmailProperty, null);
            LoadProperty(PPCDT2TenProperty, null);
            LoadProperty(PPCDT1DTProperty, null);
            LoadProperty(Backup01Property, null);
            LoadProperty(Backup02Property, null);
            LoadProperty(Backup03Property, null);
            LoadProperty(Backup04Property, null);
            LoadProperty(Backup05Property, null);
            LoadProperty(Backup06Property, null);
            var args = new DataPortalHookArgs();
            OnCreate(args);
            base.DataPortal_Create();
        }

        /// <summary>
        /// Loads a <see cref="DIC_BenhVien"/> object from the database, based on given criteria.
        /// </summary>
        /// <param name="id">The ID.</param>
        protected void DataPortal_Fetch(Int64 id)
        {
            using (var ctx = ConnectionManager<SqlConnection>.GetManager("Connection"))
            {
                using (var cmd = new SqlCommand("dbo.DIC_BenhVien_get", ctx.Connection))
                {
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@ID", id).DbType = DbType.Int64;
                    var args = new DataPortalHookArgs(cmd, id);
                    OnFetchPre(args);
                    Fetch(cmd);
                    OnFetchPost(args);
                }
            }
            // check all object rules and property rules
            BusinessRules.CheckRules();
        }

        private void Fetch(SqlCommand cmd)
        {
            using (var dr = new SafeDataReader(cmd.ExecuteReader()))
            {
                if (dr.Read())
                {
                    Fetch(dr);
                }
            }
        }

        /// <summary>
        /// Loads a <see cref="DIC_BenhVien"/> object from the given SafeDataReader.
        /// </summary>
        /// <param name="dr">The SafeDataReader to use.</param>
        private void Fetch(SafeDataReader dr)
        {
            // Value properties
            LoadProperty(IDProperty, dr.GetInt64("ID"));
            LoadProperty(TenProperty, dr.GetString("Ten"));
            LoadProperty(IDTinhProperty, dr.GetInt64("IDTinh"));
            LoadProperty(KhoangCachProperty, dr.GetString("KhoangCach"));
            LoadProperty(EmailProperty, dr.GetString("Email"));
            LoadProperty(FaxProperty, dr.GetString("Fax"));
            LoadProperty(IDLoaiProperty, dr.GetInt32("IDLoai"));
            LoadProperty(GiuongTKProperty, dr.GetString("GiuongTK"));
            LoadProperty(GiuongKHProperty, dr.GetString("GiuongKH"));
            LoadProperty(KhoaLSProperty, dr.GetString("KhoaLS"));
            LoadProperty(KhoaCLSProperty, dr.GetString("KhoaCLS"));
            LoadProperty(PhongProperty, dr.GetString("Phong"));
            LoadProperty(GhiChuProperty, dr.GetString("GhiChu"));
            LoadProperty(SuDungProperty, dr.GetBoolean("SuDung"));
            LoadProperty(DienThoaiProperty, dr.GetString("DienThoai"));
            LoadProperty(DiaChiProperty, dr.GetString("DiaChi"));
            LoadProperty(LastEdited_UserProperty, dr.GetInt64("LastEdited_User"));
            LoadProperty(LastEdited_DateProperty, dr.GetSmartDate("LastEdited_Date"));
            LoadProperty(HangProperty, dr.GetString("Hang"));
            LoadProperty(GDTenProperty, dr.GetString("GDTen"));
            LoadProperty(GDDTProperty, dr.GetString("GDDT"));
            LoadProperty(GDEmailProperty, dr.GetString("GDEmail"));
            LoadProperty(PGD1TenProperty, dr.GetString("PGD1Ten"));
            LoadProperty(PGD1DTProperty, dr.GetString("PGD1DT"));
            LoadProperty(PGD1EmailProperty, dr.GetString("PGD1Email"));
            LoadProperty(PGD2TenProperty, dr.GetString("PGD2Ten"));
            LoadProperty(PGD2DTProperty, dr.GetString("PGD2DT"));
            LoadProperty(PGD2EmailProperty, dr.GetString("PGD2Email"));
            LoadProperty(TPKHTHTenProperty, dr.GetString("TPKHTHTen"));
            LoadProperty(TPKHTHEmailProperty, dr.GetString("TPKHTHEmail"));
            LoadProperty(TPKHTHDTProperty, dr.GetString("TPKHTHDT"));
            LoadProperty(PPKH1TenProperty, dr.GetString("PPKH1Ten"));
            LoadProperty(PPKH1EmailProperty, dr.GetString("PPKH1Email"));
            LoadProperty(PPKH1DTProperty, dr.GetString("PPKH1DT"));
            LoadProperty(PPKH2TenProperty, dr.GetString("PPKH2Ten"));
            LoadProperty(PPKH2EmailProperty, dr.GetString("PPKH2Email"));
            LoadProperty(PPKH2DTProperty, dr.GetString("PPKH2DT"));
            LoadProperty(TPCDTTenProperty, dr.GetString("TPCDTTen"));
            LoadProperty(TPCDTEmailProperty, dr.GetString("TPCDTEmail"));
            LoadProperty(TPCDTDTProperty, dr.GetString("TPCDTDT"));
            LoadProperty(PPCDT1TenProperty, dr.GetString("PPCDT1Ten"));
            LoadProperty(PPCDT1EmailProperty, dr.GetString("PPCDT1Email"));
            LoadProperty(PPCDT2DTProperty, dr.GetString("PPCDT2DT"));
            LoadProperty(PPCDT2EmailProperty, dr.GetString("PPCDT2Email"));
            LoadProperty(PPCDT2TenProperty, dr.GetString("PPCDT2Ten"));
            LoadProperty(PPCDT1DTProperty, dr.GetString("PPCDT1DT"));
            LoadProperty(Backup01Property, dr.GetString("Backup01"));
            LoadProperty(Backup02Property, dr.GetString("Backup02"));
            LoadProperty(Backup03Property, dr.GetString("Backup03"));
            LoadProperty(Backup04Property, dr.GetString("Backup04"));
            LoadProperty(Backup05Property, dr.GetString("Backup05"));
            LoadProperty(Backup06Property, dr.GetString("Backup06"));
            var args = new DataPortalHookArgs(dr);
            OnFetchRead(args);
        }

        /// <summary>
        /// Inserts a new <see cref="DIC_BenhVien"/> object in the database.
        /// </summary>
        protected override void DataPortal_Insert()
        {
            using (var ctx = TransactionManager<SqlConnection, SqlTransaction>.GetManager("Connection"))
            {
                using (var cmd = new SqlCommand("dbo.DIC_BenhVien_add", ctx.Connection))
                {
                    cmd.Transaction = ctx.Transaction;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@ID", ReadProperty(IDProperty)).Direction = ParameterDirection.Output;
                    cmd.Parameters.AddWithValue("@Ten", ReadProperty(TenProperty) == null ? (object)DBNull.Value : ReadProperty(TenProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@IDTinh", ReadProperty(IDTinhProperty) == null ? (object)DBNull.Value : ReadProperty(IDTinhProperty).Value).DbType = DbType.Int64;
                    cmd.Parameters.AddWithValue("@KhoangCach", ReadProperty(KhoangCachProperty) == null ? (object)DBNull.Value : ReadProperty(KhoangCachProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@Email", ReadProperty(EmailProperty) == null ? (object)DBNull.Value : ReadProperty(EmailProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@Fax", ReadProperty(FaxProperty) == null ? (object)DBNull.Value : ReadProperty(FaxProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@IDLoai", ReadProperty(IDLoaiProperty) == null ? (object)DBNull.Value : ReadProperty(IDLoaiProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@GiuongTK", ReadProperty(GiuongTKProperty) == null ? (object)DBNull.Value : ReadProperty(GiuongTKProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@GiuongKH", ReadProperty(GiuongKHProperty) == null ? (object)DBNull.Value : ReadProperty(GiuongKHProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@KhoaLS", ReadProperty(KhoaLSProperty) == null ? (object)DBNull.Value : ReadProperty(KhoaLSProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@KhoaCLS", ReadProperty(KhoaCLSProperty) == null ? (object)DBNull.Value : ReadProperty(KhoaCLSProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@Phong", ReadProperty(PhongProperty) == null ? (object)DBNull.Value : ReadProperty(PhongProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@GhiChu", ReadProperty(GhiChuProperty) == null ? (object)DBNull.Value : ReadProperty(GhiChuProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@SuDung", ReadProperty(SuDungProperty) == null ? (object)DBNull.Value : ReadProperty(SuDungProperty).Value).DbType = DbType.Boolean;
                    cmd.Parameters.AddWithValue("@DienThoai", ReadProperty(DienThoaiProperty) == null ? (object)DBNull.Value : ReadProperty(DienThoaiProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@DiaChi", ReadProperty(DiaChiProperty) == null ? (object)DBNull.Value : ReadProperty(DiaChiProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@LastEdited_User", ReadProperty(LastEdited_UserProperty) == null ? (object)DBNull.Value : ReadProperty(LastEdited_UserProperty).Value).DbType = DbType.Int64;
                    cmd.Parameters.AddWithValue("@LastEdited_Date", ReadProperty(LastEdited_DateProperty).DBValue).DbType = DbType.DateTime;
                    cmd.Parameters.AddWithValue("@Hang", ReadProperty(HangProperty) == null ? (object)DBNull.Value : ReadProperty(HangProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@GDTen", ReadProperty(GDTenProperty) == null ? (object)DBNull.Value : ReadProperty(GDTenProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@GDDT", ReadProperty(GDDTProperty) == null ? (object)DBNull.Value : ReadProperty(GDDTProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@GDEmail", ReadProperty(GDEmailProperty) == null ? (object)DBNull.Value : ReadProperty(GDEmailProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@PGD1Ten", ReadProperty(PGD1TenProperty) == null ? (object)DBNull.Value : ReadProperty(PGD1TenProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@PGD1DT", ReadProperty(PGD1DTProperty) == null ? (object)DBNull.Value : ReadProperty(PGD1DTProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@PGD1Email", ReadProperty(PGD1EmailProperty) == null ? (object)DBNull.Value : ReadProperty(PGD1EmailProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@PGD2Ten", ReadProperty(PGD2TenProperty) == null ? (object)DBNull.Value : ReadProperty(PGD2TenProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@PGD2DT", ReadProperty(PGD2DTProperty) == null ? (object)DBNull.Value : ReadProperty(PGD2DTProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@PGD2Email", ReadProperty(PGD2EmailProperty) == null ? (object)DBNull.Value : ReadProperty(PGD2EmailProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@TPKHTHTen", ReadProperty(TPKHTHTenProperty) == null ? (object)DBNull.Value : ReadProperty(TPKHTHTenProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@TPKHTHEmail", ReadProperty(TPKHTHEmailProperty) == null ? (object)DBNull.Value : ReadProperty(TPKHTHEmailProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@TPKHTHDT", ReadProperty(TPKHTHDTProperty) == null ? (object)DBNull.Value : ReadProperty(TPKHTHDTProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@PPKH1Ten", ReadProperty(PPKH1TenProperty) == null ? (object)DBNull.Value : ReadProperty(PPKH1TenProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@PPKH1Email", ReadProperty(PPKH1EmailProperty) == null ? (object)DBNull.Value : ReadProperty(PPKH1EmailProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@PPKH1DT", ReadProperty(PPKH1DTProperty) == null ? (object)DBNull.Value : ReadProperty(PPKH1DTProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@PPKH2Ten", ReadProperty(PPKH2TenProperty) == null ? (object)DBNull.Value : ReadProperty(PPKH2TenProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@PPKH2Email", ReadProperty(PPKH2EmailProperty) == null ? (object)DBNull.Value : ReadProperty(PPKH2EmailProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@PPKH2DT", ReadProperty(PPKH2DTProperty) == null ? (object)DBNull.Value : ReadProperty(PPKH2DTProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@TPCDTTen", ReadProperty(TPCDTTenProperty) == null ? (object)DBNull.Value : ReadProperty(TPCDTTenProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@TPCDTEmail", ReadProperty(TPCDTEmailProperty) == null ? (object)DBNull.Value : ReadProperty(TPCDTEmailProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@TPCDTDT", ReadProperty(TPCDTDTProperty) == null ? (object)DBNull.Value : ReadProperty(TPCDTDTProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@PPCDT1Ten", ReadProperty(PPCDT1TenProperty) == null ? (object)DBNull.Value : ReadProperty(PPCDT1TenProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@PPCDT1Email", ReadProperty(PPCDT1EmailProperty) == null ? (object)DBNull.Value : ReadProperty(PPCDT1EmailProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@PPCDT2DT", ReadProperty(PPCDT2DTProperty) == null ? (object)DBNull.Value : ReadProperty(PPCDT2DTProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@PPCDT2Email", ReadProperty(PPCDT2EmailProperty) == null ? (object)DBNull.Value : ReadProperty(PPCDT2EmailProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@PPCDT2Ten", ReadProperty(PPCDT2TenProperty) == null ? (object)DBNull.Value : ReadProperty(PPCDT2TenProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@PPCDT1DT", ReadProperty(PPCDT1DTProperty) == null ? (object)DBNull.Value : ReadProperty(PPCDT1DTProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@backup01", ReadProperty(Backup01Property) == null ? (object)DBNull.Value : ReadProperty(Backup01Property)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@backup02", ReadProperty(Backup02Property) == null ? (object)DBNull.Value : ReadProperty(Backup02Property)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@backup03", ReadProperty(Backup03Property) == null ? (object)DBNull.Value : ReadProperty(Backup03Property)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@backup04", ReadProperty(Backup04Property) == null ? (object)DBNull.Value : ReadProperty(Backup04Property)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@backup05", ReadProperty(Backup05Property) == null ? (object)DBNull.Value : ReadProperty(Backup05Property)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@backup06", ReadProperty(Backup06Property) == null ? (object)DBNull.Value : ReadProperty(Backup06Property)).DbType = DbType.String;
                    var args = new DataPortalHookArgs(cmd);
                    OnInsertPre(args);
                    cmd.ExecuteNonQuery();
                    OnInsertPost(args);
                    LoadProperty(IDProperty, (long) cmd.Parameters["@ID"].Value);
                }
                ctx.Commit();
            }
        }

        /// <summary>
        /// Updates in the database all changes made to the <see cref="DIC_BenhVien"/> object.
        /// </summary>
        protected override void DataPortal_Update()
        {
            using (var ctx = TransactionManager<SqlConnection, SqlTransaction>.GetManager("Connection"))
            {
                using (var cmd = new SqlCommand("dbo.DIC_BenhVien_update", ctx.Connection))
                {
                    cmd.Transaction = ctx.Transaction;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@ID", ReadProperty(IDProperty)).DbType = DbType.Int64;
                    cmd.Parameters.AddWithValue("@Ten", ReadProperty(TenProperty) == null ? (object)DBNull.Value : ReadProperty(TenProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@IDTinh", ReadProperty(IDTinhProperty) == null ? (object)DBNull.Value : ReadProperty(IDTinhProperty).Value).DbType = DbType.Int64;
                    cmd.Parameters.AddWithValue("@KhoangCach", ReadProperty(KhoangCachProperty) == null ? (object)DBNull.Value : ReadProperty(KhoangCachProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@Email", ReadProperty(EmailProperty) == null ? (object)DBNull.Value : ReadProperty(EmailProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@Fax", ReadProperty(FaxProperty) == null ? (object)DBNull.Value : ReadProperty(FaxProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@IDLoai", ReadProperty(IDLoaiProperty) == null ? (object)DBNull.Value : ReadProperty(IDLoaiProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@GiuongTK", ReadProperty(GiuongTKProperty) == null ? (object)DBNull.Value : ReadProperty(GiuongTKProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@GiuongKH", ReadProperty(GiuongKHProperty) == null ? (object)DBNull.Value : ReadProperty(GiuongKHProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@KhoaLS", ReadProperty(KhoaLSProperty) == null ? (object)DBNull.Value : ReadProperty(KhoaLSProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@KhoaCLS", ReadProperty(KhoaCLSProperty) == null ? (object)DBNull.Value : ReadProperty(KhoaCLSProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@Phong", ReadProperty(PhongProperty) == null ? (object)DBNull.Value : ReadProperty(PhongProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@GhiChu", ReadProperty(GhiChuProperty) == null ? (object)DBNull.Value : ReadProperty(GhiChuProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@SuDung", ReadProperty(SuDungProperty) == null ? (object)DBNull.Value : ReadProperty(SuDungProperty).Value).DbType = DbType.Boolean;
                    cmd.Parameters.AddWithValue("@DienThoai", ReadProperty(DienThoaiProperty) == null ? (object)DBNull.Value : ReadProperty(DienThoaiProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@DiaChi", ReadProperty(DiaChiProperty) == null ? (object)DBNull.Value : ReadProperty(DiaChiProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@LastEdited_User", ReadProperty(LastEdited_UserProperty) == null ? (object)DBNull.Value : ReadProperty(LastEdited_UserProperty).Value).DbType = DbType.Int64;
                    cmd.Parameters.AddWithValue("@LastEdited_Date", ReadProperty(LastEdited_DateProperty).DBValue).DbType = DbType.DateTime;
                    cmd.Parameters.AddWithValue("@Hang", ReadProperty(HangProperty) == null ? (object)DBNull.Value : ReadProperty(HangProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@GDTen", ReadProperty(GDTenProperty) == null ? (object)DBNull.Value : ReadProperty(GDTenProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@GDDT", ReadProperty(GDDTProperty) == null ? (object)DBNull.Value : ReadProperty(GDDTProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@GDEmail", ReadProperty(GDEmailProperty) == null ? (object)DBNull.Value : ReadProperty(GDEmailProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@PGD1Ten", ReadProperty(PGD1TenProperty) == null ? (object)DBNull.Value : ReadProperty(PGD1TenProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@PGD1DT", ReadProperty(PGD1DTProperty) == null ? (object)DBNull.Value : ReadProperty(PGD1DTProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@PGD1Email", ReadProperty(PGD1EmailProperty) == null ? (object)DBNull.Value : ReadProperty(PGD1EmailProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@PGD2Ten", ReadProperty(PGD2TenProperty) == null ? (object)DBNull.Value : ReadProperty(PGD2TenProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@PGD2DT", ReadProperty(PGD2DTProperty) == null ? (object)DBNull.Value : ReadProperty(PGD2DTProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@PGD2Email", ReadProperty(PGD2EmailProperty) == null ? (object)DBNull.Value : ReadProperty(PGD2EmailProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@TPKHTHTen", ReadProperty(TPKHTHTenProperty) == null ? (object)DBNull.Value : ReadProperty(TPKHTHTenProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@TPKHTHEmail", ReadProperty(TPKHTHEmailProperty) == null ? (object)DBNull.Value : ReadProperty(TPKHTHEmailProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@TPKHTHDT", ReadProperty(TPKHTHDTProperty) == null ? (object)DBNull.Value : ReadProperty(TPKHTHDTProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@PPKH1Ten", ReadProperty(PPKH1TenProperty) == null ? (object)DBNull.Value : ReadProperty(PPKH1TenProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@PPKH1Email", ReadProperty(PPKH1EmailProperty) == null ? (object)DBNull.Value : ReadProperty(PPKH1EmailProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@PPKH1DT", ReadProperty(PPKH1DTProperty) == null ? (object)DBNull.Value : ReadProperty(PPKH1DTProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@PPKH2Ten", ReadProperty(PPKH2TenProperty) == null ? (object)DBNull.Value : ReadProperty(PPKH2TenProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@PPKH2Email", ReadProperty(PPKH2EmailProperty) == null ? (object)DBNull.Value : ReadProperty(PPKH2EmailProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@PPKH2DT", ReadProperty(PPKH2DTProperty) == null ? (object)DBNull.Value : ReadProperty(PPKH2DTProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@TPCDTTen", ReadProperty(TPCDTTenProperty) == null ? (object)DBNull.Value : ReadProperty(TPCDTTenProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@TPCDTEmail", ReadProperty(TPCDTEmailProperty) == null ? (object)DBNull.Value : ReadProperty(TPCDTEmailProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@TPCDTDT", ReadProperty(TPCDTDTProperty) == null ? (object)DBNull.Value : ReadProperty(TPCDTDTProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@PPCDT1Ten", ReadProperty(PPCDT1TenProperty) == null ? (object)DBNull.Value : ReadProperty(PPCDT1TenProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@PPCDT1Email", ReadProperty(PPCDT1EmailProperty) == null ? (object)DBNull.Value : ReadProperty(PPCDT1EmailProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@PPCDT2DT", ReadProperty(PPCDT2DTProperty) == null ? (object)DBNull.Value : ReadProperty(PPCDT2DTProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@PPCDT2Email", ReadProperty(PPCDT2EmailProperty) == null ? (object)DBNull.Value : ReadProperty(PPCDT2EmailProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@PPCDT2Ten", ReadProperty(PPCDT2TenProperty) == null ? (object)DBNull.Value : ReadProperty(PPCDT2TenProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@PPCDT1DT", ReadProperty(PPCDT1DTProperty) == null ? (object)DBNull.Value : ReadProperty(PPCDT1DTProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@backup01", ReadProperty(Backup01Property) == null ? (object)DBNull.Value : ReadProperty(Backup01Property)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@backup02", ReadProperty(Backup02Property) == null ? (object)DBNull.Value : ReadProperty(Backup02Property)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@backup03", ReadProperty(Backup03Property) == null ? (object)DBNull.Value : ReadProperty(Backup03Property)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@backup04", ReadProperty(Backup04Property) == null ? (object)DBNull.Value : ReadProperty(Backup04Property)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@backup05", ReadProperty(Backup05Property) == null ? (object)DBNull.Value : ReadProperty(Backup05Property)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@backup06", ReadProperty(Backup06Property) == null ? (object)DBNull.Value : ReadProperty(Backup06Property)).DbType = DbType.String;
                    var args = new DataPortalHookArgs(cmd);
                    OnUpdatePre(args);
                    cmd.ExecuteNonQuery();
                    OnUpdatePost(args);
                }
                ctx.Commit();
            }
        }

        /// <summary>
        /// Self deletes the <see cref="DIC_BenhVien"/> object.
        /// </summary>
        protected override void DataPortal_DeleteSelf()
        {
            DataPortal_Delete(ID);
        }

        /// <summary>
        /// Deletes the <see cref="DIC_BenhVien"/> object from database.
        /// </summary>
        /// <param name="id">The delete criteria.</param>
        protected void DataPortal_Delete(Int64 id)
        {
            using (var ctx = TransactionManager<SqlConnection, SqlTransaction>.GetManager("Connection"))
            {
                using (var cmd = new SqlCommand("dbo.DIC_BenhVien_delete", ctx.Connection))
                {
                    cmd.Transaction = ctx.Transaction;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@ID", id).DbType = DbType.Int64;
                    var args = new DataPortalHookArgs(cmd, id);
                    OnDeletePre(args);
                    cmd.ExecuteNonQuery();
                    OnDeletePost(args);
                }
                ctx.Commit();
            }
        }

        #endregion

        #region Pseudo Events

        /// <summary>
        /// Occurs after setting all defaults for object creation.
        /// </summary>
        partial void OnCreate(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Delete, after setting query parameters and before the delete operation.
        /// </summary>
        partial void OnDeletePre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Delete, after the delete operation, before Commit().
        /// </summary>
        partial void OnDeletePost(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after setting query parameters and before the fetch operation.
        /// </summary>
        partial void OnFetchPre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after the fetch operation (object or collection is fully loaded and set up).
        /// </summary>
        partial void OnFetchPost(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after the low level fetch operation, before the data reader is destroyed.
        /// </summary>
        partial void OnFetchRead(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after setting query parameters and before the update operation.
        /// </summary>
        partial void OnUpdatePre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Insert, after the update operation, before setting back row identifiers (RowVersion) and Commit().
        /// </summary>
        partial void OnUpdatePost(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Insert, after setting query parameters and before the insert operation.
        /// </summary>
        partial void OnInsertPre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Insert, after the insert operation, before setting back row identifiers (ID and RowVersion) and Commit().
        /// </summary>
        partial void OnInsertPost(DataPortalHookArgs args);

        #endregion

    }
}
