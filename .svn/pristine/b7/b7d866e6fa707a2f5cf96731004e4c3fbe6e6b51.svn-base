//  This file was generated by CSLA Object Generator - CslaGenFork v4.3.0
//
// Filename:    HC_NhanVien_ChamCongThang_Info
// ObjectType:  HC_NhanVien_ChamCongThang_Info
// CSLAType:    EditableChild

using System;
using System.Data;
using System.Data.SqlClient;
using Csla;
using Csla.Data;
using NETLINK.LIB;

namespace ModuleHanhChinh.LIB
{

    /// <summary>
    /// HC_NhanVien_ChamCongThang_Info (editable child object).<br/>
    /// This is a generated base class of <see cref="HC_NhanVien_ChamCongThang_Info"/> business object.
    /// </summary>
    /// <remarks>
    /// This class is an item of <see cref="HC_NhanVien_ChamCongThang_Coll"/> collection.
    /// </remarks>
    [Serializable]
    public partial class HC_NhanVien_ChamCongThang_Info : BusinessBase<HC_NhanVien_ChamCongThang_Info>
    {

        #region Static Fields

        private static int _lastID;

        #endregion

        #region Business Properties

        /// <summary>
        /// Maintains metadata about <see cref="Id"/> property.
        /// </summary>
        public static readonly PropertyInfo<int> IdProperty = RegisterProperty<int>(p => p.Id, "Id");
        /// <summary>
        /// Gets the Id.
        /// </summary>
        /// <value>The Id.</value>
        public int Id
        {
            get { return GetProperty(IdProperty); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="MaNhanVien"/> property.
        /// </summary>
        public static readonly PropertyInfo<int> MaNhanVienProperty = RegisterProperty<int>(p => p.MaNhanVien, "Ma Nhan Vien");
        /// <summary>
        /// Gets or sets the Ma Nhan Vien.
        /// </summary>
        /// <value>The Ma Nhan Vien.</value>
        public int MaNhanVien
        {
            get { return GetProperty(MaNhanVienProperty); }
            set { SetProperty(MaNhanVienProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="Gio"/> property.
        /// </summary>
        public static readonly PropertyInfo<Double?> GioProperty = RegisterProperty<Double?>(p => p.Gio, "Gio");
        /// <summary>
        /// Gets or sets the Gio.
        /// </summary>
        /// <value>The Gio.</value>
        public Double? Gio
        {
            get { return GetProperty(GioProperty); }
            set { SetProperty(GioProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="Solantre"/> property.
        /// </summary>
        public static readonly PropertyInfo<int?> SolantreProperty = RegisterProperty<int?>(p => p.Solantre, "Solantre");
        /// <summary>
        /// Gets or sets the Solantre.
        /// </summary>
        /// <value>The Solantre.</value>
        public int? Solantre
        {
            get { return GetProperty(SolantreProperty); }
            set { SetProperty(SolantreProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="Sophuttre"/> property.
        /// </summary>
        public static readonly PropertyInfo<int?> SophuttreProperty = RegisterProperty<int?>(p => p.Sophuttre, "Sophuttre");
        /// <summary>
        /// Gets or sets the Sophuttre.
        /// </summary>
        /// <value>The Sophuttre.</value>
        public int? Sophuttre
        {
            get { return GetProperty(SophuttreProperty); }
            set { SetProperty(SophuttreProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="Cong"/> property.
        /// </summary>
        public static readonly PropertyInfo<Double?> CongProperty = RegisterProperty<Double?>(p => p.Cong, "Cong");
        /// <summary>
        /// Gets or sets the Cong.
        /// </summary>
        /// <value>The Cong.</value>
        public Double? Cong
        {
            get { return GetProperty(CongProperty); }
            set { SetProperty(CongProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="Solansom"/> property.
        /// </summary>
        public static readonly PropertyInfo<int?> SolansomProperty = RegisterProperty<int?>(p => p.Solansom, "Solansom");
        /// <summary>
        /// Gets or sets the Solansom.
        /// </summary>
        /// <value>The Solansom.</value>
        public int? Solansom
        {
            get { return GetProperty(SolansomProperty); }
            set { SetProperty(SolansomProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="SoPhutsom"/> property.
        /// </summary>
        public static readonly PropertyInfo<int?> SoPhutsomProperty = RegisterProperty<int?>(p => p.SoPhutsom, "So Phutsom");
        /// <summary>
        /// Gets or sets the So Phutsom.
        /// </summary>
        /// <value>The So Phutsom.</value>
        public int? SoPhutsom
        {
            get { return GetProperty(SoPhutsomProperty); }
            set { SetProperty(SoPhutsomProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="NgoaiGio"/> property.
        /// </summary>
        public static readonly PropertyInfo<Double?> NgoaiGioProperty = RegisterProperty<Double?>(p => p.NgoaiGio, "Ngoai Gio");
        /// <summary>
        /// Gets or sets the Ngoai Gio.
        /// </summary>
        /// <value>The Ngoai Gio.</value>
        public Double? NgoaiGio
        {
            get { return GetProperty(NgoaiGioProperty); }
            set { SetProperty(NgoaiGioProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="VangKP"/> property.
        /// </summary>
        public static readonly PropertyInfo<Double?> VangKPProperty = RegisterProperty<Double?>(p => p.VangKP, "Vang KP");
        /// <summary>
        /// Gets or sets the Vang KP.
        /// </summary>
        /// <value>The Vang KP.</value>
        public Double? VangKP
        {
            get { return GetProperty(VangKPProperty); }
            set { SetProperty(VangKPProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="VangCoPhep"/> property.
        /// </summary>
        public static readonly PropertyInfo<Double?> VangCoPhepProperty = RegisterProperty<Double?>(p => p.VangCoPhep, "Vang Co Phep");
        /// <summary>
        /// Gets or sets the Vang Co Phep.
        /// </summary>
        /// <value>The Vang Co Phep.</value>
        public Double? VangCoPhep
        {
            get { return GetProperty(VangCoPhepProperty); }
            set { SetProperty(VangCoPhepProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="Chunhat"/> property.
        /// </summary>
        public static readonly PropertyInfo<Double?> ChunhatProperty = RegisterProperty<Double?>(p => p.Chunhat, "Chunhat");
        /// <summary>
        /// Gets or sets the Chunhat.
        /// </summary>
        /// <value>The Chunhat.</value>
        public Double? Chunhat
        {
            get { return GetProperty(ChunhatProperty); }
            set { SetProperty(ChunhatProperty, value); }
        }

        #endregion

        #region Factory Methods

        /// <summary>
        /// Factory method. Creates a new <see cref="HC_NhanVien_ChamCongThang_Info"/> object.
        /// </summary>
        /// <returns>A reference to the created <see cref="HC_NhanVien_ChamCongThang_Info"/> object.</returns>
        internal static HC_NhanVien_ChamCongThang_Info NewHC_NhanVien_ChamCongThang_Info()
        {
            return DataPortal.CreateChild<HC_NhanVien_ChamCongThang_Info>();
        }

        /// <summary>
        /// Factory method. Asynchronously creates a new <see cref="HC_NhanVien_ChamCongThang_Info"/> object.
        /// </summary>
        /// <param name="callback">The completion callback method.</param>
        internal static void NewHC_NhanVien_ChamCongThang_Info(EventHandler<DataPortalResult<HC_NhanVien_ChamCongThang_Info>> callback)
        {
            DataPortal.BeginCreate<HC_NhanVien_ChamCongThang_Info>(callback);
        }

        /// <summary>
        /// Factory method. Loads a <see cref="HC_NhanVien_ChamCongThang_Info"/> object from the given SafeDataReader.
        /// </summary>
        /// <param name="dr">The SafeDataReader to use.</param>
        /// <returns>A reference to the fetched <see cref="HC_NhanVien_ChamCongThang_Info"/> object.</returns>
        internal static HC_NhanVien_ChamCongThang_Info GetHC_NhanVien_ChamCongThang_Info(SafeDataReader dr)
        {
            HC_NhanVien_ChamCongThang_Info obj = new HC_NhanVien_ChamCongThang_Info();
            // show the framework that this is a child object
            obj.MarkAsChild();
            obj.Fetch(dr);
            obj.MarkOld();
            // check all object rules and property rules
            obj.BusinessRules.CheckRules();
            return obj;
        }

        #endregion

        #region Constructor

        /// <summary>
        /// Initializes a new instance of the <see cref="HC_NhanVien_ChamCongThang_Info"/> class.
        /// </summary>
        /// <remarks> Do not use to create a Csla object. Use factory methods instead.</remarks>
        private HC_NhanVien_ChamCongThang_Info()
        {
            // Prevent direct creation

            // show the framework that this is a child object
            MarkAsChild();
        }

        #endregion

        #region Data Access

        /// <summary>
        /// Loads default values for the <see cref="HC_NhanVien_ChamCongThang_Info"/> object properties.
        /// </summary>
        [Csla.RunLocal]
        protected override void Child_Create()
        {
            LoadProperty(IdProperty, System.Threading.Interlocked.Decrement(ref _lastID));
            var args = new DataPortalHookArgs();
            OnCreate(args);
            base.Child_Create();
        }

        /// <summary>
        /// Loads a <see cref="HC_NhanVien_ChamCongThang_Info"/> object from the given SafeDataReader.
        /// </summary>
        /// <param name="dr">The SafeDataReader to use.</param>
        private void Fetch(SafeDataReader dr)
        {
            // Value properties
            LoadProperty(IdProperty, dr.GetInt32("Id"));
            LoadProperty(MaNhanVienProperty, dr.GetInt32("MaNhanVien"));
            LoadProperty(GioProperty, dr.GetDouble("Gio"));
            LoadProperty(SolantreProperty, dr.GetInt32("Solantre"));
            LoadProperty(SophuttreProperty, dr.GetInt32("Sophuttre"));
            LoadProperty(CongProperty, dr.GetDouble("Cong"));
            LoadProperty(SolansomProperty, dr.GetInt32("Solansom"));
            LoadProperty(SoPhutsomProperty, dr.GetInt32("SoPhutsom"));
            LoadProperty(NgoaiGioProperty, dr.GetDouble("NgoaiGio"));
            LoadProperty(VangKPProperty, dr.GetDouble("VangKP"));
            LoadProperty(VangCoPhepProperty, dr.GetDouble("VangCoPhep"));
            LoadProperty(ChunhatProperty, dr.GetDouble("Chunhat"));
            var args = new DataPortalHookArgs(dr);
            OnFetchRead(args);
        }

        /// <summary>
        /// Inserts a new <see cref="HC_NhanVien_ChamCongThang_Info"/> object in the database.
        /// </summary>
        private void Child_Insert()
        {
            using (var ctx = TransactionManager<SqlConnection, SqlTransaction>.GetManager("Connection"))
            {
                using (var cmd = new SqlCommand("dbo.HC_NhanVien_ChamCongThang_Info_add", ctx.Connection))
                {
                    cmd.Transaction = ctx.Transaction;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@Id", ReadProperty(IdProperty)).Direction = ParameterDirection.Output;
                    cmd.Parameters.AddWithValue("@MaNhanVien", ReadProperty(MaNhanVienProperty)).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@Gio", ReadProperty(GioProperty) == null ? (object)DBNull.Value : ReadProperty(GioProperty).Value).DbType = DbType.Double;
                    cmd.Parameters.AddWithValue("@Solantre", ReadProperty(SolantreProperty) == null ? (object)DBNull.Value : ReadProperty(SolantreProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@Sophuttre", ReadProperty(SophuttreProperty) == null ? (object)DBNull.Value : ReadProperty(SophuttreProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@Cong", ReadProperty(CongProperty) == null ? (object)DBNull.Value : ReadProperty(CongProperty).Value).DbType = DbType.Double;
                    cmd.Parameters.AddWithValue("@Solansom", ReadProperty(SolansomProperty) == null ? (object)DBNull.Value : ReadProperty(SolansomProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@SoPhutsom", ReadProperty(SoPhutsomProperty) == null ? (object)DBNull.Value : ReadProperty(SoPhutsomProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@NgoaiGio", ReadProperty(NgoaiGioProperty) == null ? (object)DBNull.Value : ReadProperty(NgoaiGioProperty).Value).DbType = DbType.Double;
                    cmd.Parameters.AddWithValue("@VangKP", ReadProperty(VangKPProperty) == null ? (object)DBNull.Value : ReadProperty(VangKPProperty).Value).DbType = DbType.Double;
                    cmd.Parameters.AddWithValue("@VangCoPhep", ReadProperty(VangCoPhepProperty) == null ? (object)DBNull.Value : ReadProperty(VangCoPhepProperty).Value).DbType = DbType.Double;
                    cmd.Parameters.AddWithValue("@Chunhat", ReadProperty(ChunhatProperty) == null ? (object)DBNull.Value : ReadProperty(ChunhatProperty).Value).DbType = DbType.Double;
                    var args = new DataPortalHookArgs(cmd);
                    OnInsertPre(args);
                    cmd.ExecuteNonQuery();
                    OnInsertPost(args);
                    LoadProperty(IdProperty, (int) cmd.Parameters["@Id"].Value);
                }
            }
        }

        /// <summary>
        /// Updates in the database all changes made to the <see cref="HC_NhanVien_ChamCongThang_Info"/> object.
        /// </summary>
        private void Child_Update()
        {
            if (!IsDirty)
                return;

            using (var ctx = TransactionManager<SqlConnection, SqlTransaction>.GetManager("Connection"))
            {
                using (var cmd = new SqlCommand("dbo.HC_NhanVien_ChamCongThang_Info_update", ctx.Connection))
                {
                    cmd.Transaction = ctx.Transaction;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@Id", ReadProperty(IdProperty)).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@MaNhanVien", ReadProperty(MaNhanVienProperty)).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@Gio", ReadProperty(GioProperty) == null ? (object)DBNull.Value : ReadProperty(GioProperty).Value).DbType = DbType.Double;
                    cmd.Parameters.AddWithValue("@Solantre", ReadProperty(SolantreProperty) == null ? (object)DBNull.Value : ReadProperty(SolantreProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@Sophuttre", ReadProperty(SophuttreProperty) == null ? (object)DBNull.Value : ReadProperty(SophuttreProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@Cong", ReadProperty(CongProperty) == null ? (object)DBNull.Value : ReadProperty(CongProperty).Value).DbType = DbType.Double;
                    cmd.Parameters.AddWithValue("@Solansom", ReadProperty(SolansomProperty) == null ? (object)DBNull.Value : ReadProperty(SolansomProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@SoPhutsom", ReadProperty(SoPhutsomProperty) == null ? (object)DBNull.Value : ReadProperty(SoPhutsomProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@NgoaiGio", ReadProperty(NgoaiGioProperty) == null ? (object)DBNull.Value : ReadProperty(NgoaiGioProperty).Value).DbType = DbType.Double;
                    cmd.Parameters.AddWithValue("@VangKP", ReadProperty(VangKPProperty) == null ? (object)DBNull.Value : ReadProperty(VangKPProperty).Value).DbType = DbType.Double;
                    cmd.Parameters.AddWithValue("@VangCoPhep", ReadProperty(VangCoPhepProperty) == null ? (object)DBNull.Value : ReadProperty(VangCoPhepProperty).Value).DbType = DbType.Double;
                    cmd.Parameters.AddWithValue("@Chunhat", ReadProperty(ChunhatProperty) == null ? (object)DBNull.Value : ReadProperty(ChunhatProperty).Value).DbType = DbType.Double;
                    var args = new DataPortalHookArgs(cmd);
                    OnUpdatePre(args);
                    cmd.ExecuteNonQuery();
                    OnUpdatePost(args);
                }
            }
        }

        /// <summary>
        /// Self deletes the <see cref="HC_NhanVien_ChamCongThang_Info"/> object from database.
        /// </summary>
        private void Child_DeleteSelf()
        {
            using (var ctx = TransactionManager<SqlConnection, SqlTransaction>.GetManager("Connection"))
            {
                using (var cmd = new SqlCommand("dbo.HC_NhanVien_ChamCongThang_Info_delete", ctx.Connection))
                {
                    cmd.Transaction = ctx.Transaction;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@Id", ReadProperty(IdProperty)).DbType = DbType.Int32;
                    var args = new DataPortalHookArgs(cmd);
                    OnDeletePre(args);
                    cmd.ExecuteNonQuery();
                    OnDeletePost(args);
                }
            }
        }

        #endregion

        #region Pseudo Events

        /// <summary>
        /// Occurs after setting all defaults for object creation.
        /// </summary>
        partial void OnCreate(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Delete, after setting query parameters and before the delete operation.
        /// </summary>
        partial void OnDeletePre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Delete, after the delete operation, before Commit().
        /// </summary>
        partial void OnDeletePost(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after setting query parameters and before the fetch operation.
        /// </summary>
        partial void OnFetchPre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after the fetch operation (object or collection is fully loaded and set up).
        /// </summary>
        partial void OnFetchPost(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after the low level fetch operation, before the data reader is destroyed.
        /// </summary>
        partial void OnFetchRead(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after setting query parameters and before the update operation.
        /// </summary>
        partial void OnUpdatePre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Insert, after the update operation, before setting back row identifiers (RowVersion) and Commit().
        /// </summary>
        partial void OnUpdatePost(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Insert, after setting query parameters and before the insert operation.
        /// </summary>
        partial void OnInsertPre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Insert, after the insert operation, before setting back row identifiers (ID and RowVersion) and Commit().
        /// </summary>
        partial void OnInsertPost(DataPortalHookArgs args);

        #endregion

    }
}
