//  This file was generated by CSLA Object Generator - CslaGenFork v4.3.0
//
// Filename:    DT_ChinhQuy_HocVien
// ObjectType:  DT_ChinhQuy_HocVien
// CSLAType:    EditableRoot

using System;
using System.Data;
using System.Data.SqlClient;
using Csla;
using Csla.Data;using NETLINK.LIB;

namespace ModuleDaoTao.LIB
{

    /// <summary>
    /// DT_ChinhQuy_HocVien (editable root object).<br/>
    /// This is a generated base class of <see cref="DT_ChinhQuy_HocVien"/> business object.
    /// </summary>
    [Serializable]
    public partial class DT_ChinhQuy_HocVien : BusinessBase<DT_ChinhQuy_HocVien>
    {

        #region Static Fields

        private static int _lastID;

        #endregion

        #region Business Properties

        /// <summary>
        /// Maintains metadata about <see cref="id"/> property.
        /// </summary>
        public static readonly PropertyInfo<int> IdProperty = RegisterProperty<int>(p => p.Id, "id");
        /// <summary>
        /// Gets the id.
        /// </summary>
        /// <value>The id.</value>
        public int Id
        {
            get { return GetProperty(IdProperty); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="HoTen"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> HoTenProperty = RegisterProperty<string>(p => p.HoTen, "Ho Ten");
        /// <summary>
        /// Gets or sets the Ho Ten.
        /// </summary>
        /// <value>The Ho Ten.</value>
        public string HoTen
        {
            get { return GetProperty(HoTenProperty); }
            set { SetProperty(HoTenProperty, value); }
        }
        public static readonly PropertyInfo<bool> MienThiProperty = RegisterProperty<bool>(p => p.MienThi, "Ho Ten");
        /// <summary>
        /// Gets or sets the Ho Ten.
        /// </summary>
        /// <value>The Ho Ten.</value>
        public bool MienThi
        {
            get { return GetProperty(MienThiProperty); }
            set { SetProperty(MienThiProperty, value); }
        }
        public static readonly PropertyInfo<bool> MienThi1Property = RegisterProperty<bool>(p => p.MienThi1, "Ho Ten");
        /// <summary>
        /// Gets or sets the Ho Ten.
        /// </summary>
        /// <value>The Ho Ten.</value>
        public bool MienThi1
        {
            get { return GetProperty(MienThi1Property); }
            set { SetProperty(MienThi1Property, value); }
        }
        public static readonly PropertyInfo<bool> MienThi2Property = RegisterProperty<bool>(p => p.MienThi2, "Ho Ten");
        /// <summary>
        /// Gets or sets the Ho Ten.
        /// </summary>
        /// <value>The Ho Ten.</value>
        public bool MienThi2
        {
            get { return GetProperty(MienThi2Property); }
            set { SetProperty(MienThi2Property, value); }
        }
        public static readonly PropertyInfo<bool> MienThi3Property = RegisterProperty<bool>(p => p.MienThi3, "Ho Ten");
        /// <summary>
        /// Gets or sets the Ho Ten.
        /// </summary>
        /// <value>The Ho Ten.</value>
        public bool MienThi3
        {
            get { return GetProperty(MienThi3Property); }
            set { SetProperty(MienThi3Property, value); }
        }
        public static readonly PropertyInfo<bool> MienThi4Property = RegisterProperty<bool>(p => p.MienThi4, "Ho Ten");
        /// <summary>
        /// Gets or sets the Ho Ten.
        /// </summary>
        /// <value>The Ho Ten.</value>
        public bool MienThi4
        {
            get { return GetProperty(MienThi4Property); }
            set { SetProperty(MienThi4Property, value); }
        }
        public static readonly PropertyInfo<bool> MienThi5Property = RegisterProperty<bool>(p => p.MienThi5, "Ho Ten");
        /// <summary>
        /// Gets or sets the Ho Ten.
        /// </summary>
        /// <value>The Ho Ten.</value>
        public bool MienThi5
        {
            get { return GetProperty(MienThi5Property); }
            set { SetProperty(MienThi5Property, value); }
        }
        /// <summary>
        /// Maintains metadata about <see cref="HoTen"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> TenLopProperty = RegisterProperty<string>(p => p.TenLop, "Ho TenLop");
        /// <summary>
        /// Gets or sets the Ho Ten.
        /// </summary>
        /// <value>The Ho Ten.</value>
        public string TenLop
        {
            get { return GetProperty(TenLopProperty); }
            set { SetProperty(TenLopProperty, value); }
        }
        /// <summary>
        /// Maintains metadata about <see cref="HoTen"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> TenKhoaHocProperty = RegisterProperty<string>(p => p.TenKhoaHoc, "Ho TenKhoaHoc");
        /// <summary>
        /// Gets or sets the Ho Ten.
        /// </summary>
        /// <value>The Ho Ten.</value>
        public string TenKhoaHoc
        {
            get { return GetProperty(TenKhoaHocProperty); }
            set { SetProperty(TenKhoaHocProperty, value); }
        }
        /// <summary>
        /// Maintains metadata about <see cref="NgaySinh"/> property.
        /// </summary>
        public static readonly PropertyInfo<SmartDate> NgaySinhProperty = RegisterProperty<SmartDate>(p => p.NgaySinh, "Ngay Sinh");
        /// <summary>
        /// Gets or sets the Ngay Sinh.
        /// </summary>
        /// <value>The Ngay Sinh.</value>
        public string NgaySinh
        {
            get { return GetPropertyConvert<SmartDate, String>(NgaySinhProperty); }
            set { SetPropertyConvert<SmartDate, String>(NgaySinhProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="SoCMT"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> SoCMTProperty = RegisterProperty<string>(p => p.SoCMT, "So CMT");
        /// <summary>
        /// Gets or sets the So CMT.
        /// </summary>
        /// <value>The So CMT.</value>
        public string SoCMT
        {
            get { return GetProperty(SoCMTProperty); }
            set { SetProperty(SoCMTProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="MaHocVien"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> MaHocVienProperty = RegisterProperty<string>(p => p.MaHocVien, "Ma Hoc Vien");
        /// <summary>
        /// Gets or sets the Ma Hoc Vien.
        /// </summary>
        /// <value>The Ma Hoc Vien.</value>
        public string MaHocVien
        {
            get { return GetProperty(MaHocVienProperty); }
            set { SetProperty(MaHocVienProperty, value); }
        }
        /// <summary>
        /// Maintains metadata about <see cref="NoiSinh"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> NoiSinhProperty = RegisterProperty<string>(p => p.NoiSinh, "NoiSinh");
        /// <summary>
        /// Gets or sets the NoiSinh.
        /// </summary>
        /// <value>The NoiSinh.</value>
        public string NoiSinh
        {
            get { return GetProperty(NoiSinhProperty); }
            set { SetProperty(NoiSinhProperty, value); }
        }
        /// <summary>
        /// Maintains metadata about <see cref="GioiTinh"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> GioiTinhProperty = RegisterProperty<string>(p => p.GioiTinh, "Gioi Tinh");
        /// <summary>
        /// Gets or sets the Gioi Tinh.
        /// </summary>
        /// <value>The Gioi Tinh.</value>
        public string GioiTinh
        {
            get { return GetProperty(GioiTinhProperty); }
            set { SetProperty(GioiTinhProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="idTrinhDo"/> property.
        /// </summary>
        public static readonly PropertyInfo<Int64?> IdTrinhDoProperty = RegisterProperty<Int64?>(p => p.IdTrinhDo, "id Trinh Do");
        /// <summary>
        /// Gets or sets the id Trinh Do.
        /// </summary>
        /// <value>The id Trinh Do.</value>
        public Int64? IdTrinhDo
        {
            get { return GetProperty(IdTrinhDoProperty); }
            set { SetProperty(IdTrinhDoProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="idChuyenNganh"/> property.
        /// </summary>
        public static readonly PropertyInfo<int?> IdChuyenNganhProperty = RegisterProperty<int?>(p => p.IdChuyenNganh, "id Chuyen Nganh");
        /// <summary>
        /// Gets or sets the id Chuyen Nganh.
        /// </summary>
        /// <value>The id Chuyen Nganh.</value>
        public int? IdChuyenNganh
        {
            get { return GetProperty(IdChuyenNganhProperty); }
            set { SetProperty(IdChuyenNganhProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="TruongTotNghiep"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> TruongTotNghiepProperty = RegisterProperty<string>(p => p.TruongTotNghiep, "Truong Tot Nghiep");
        /// <summary>
        /// Gets or sets the Truong Tot Nghiep.
        /// </summary>
        /// <value>The Truong Tot Nghiep.</value>
        public string TruongTotNghiep
        {
            get { return GetProperty(TruongTotNghiepProperty); }
            set { SetProperty(TruongTotNghiepProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="NamTotNghiep"/> property.
        /// </summary>
        public static readonly PropertyInfo<int?> NamTotNghiepProperty = RegisterProperty<int?>(p => p.NamTotNghiep, "Nam Tot Nghiep");
        /// <summary>
        /// Gets or sets the Nam Tot Nghiep.
        /// </summary>
        /// <value>The Nam Tot Nghiep.</value>
        public int? NamTotNghiep
        {
            get { return GetProperty(NamTotNghiepProperty); }
            set { SetProperty(NamTotNghiepProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="SoBang"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> SoBangProperty = RegisterProperty<string>(p => p.SoBang, "So Bang");
        /// <summary>
        /// Gets or sets the So Bang.
        /// </summary>
        /// <value>The So Bang.</value>
        public string SoBang
        {
            get { return GetProperty(SoBangProperty); }
            set { SetProperty(SoBangProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="NoiCongTac"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> NoiCongTacProperty = RegisterProperty<string>(p => p.NoiCongTac, "Noi Cong Tac");
        /// <summary>
        /// Gets or sets the Noi Cong Tac.
        /// </summary>
        /// <value>The Noi Cong Tac.</value>
        public string NoiCongTac
        {
            get { return GetProperty(NoiCongTacProperty); }
            set { SetProperty(NoiCongTacProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="DiaChiNhaRieng"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> DiaChiNhaRiengProperty = RegisterProperty<string>(p => p.DiaChiNhaRieng, "Dia Chi Nha Rieng");
        /// <summary>
        /// Gets or sets the Dia Chi Nha Rieng.
        /// </summary>
        /// <value>The Dia Chi Nha Rieng.</value>
        public string DiaChiNhaRieng
        {
            get { return GetProperty(DiaChiNhaRiengProperty); }
            set { SetProperty(DiaChiNhaRiengProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="DienThoaiNhaRieng"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> DienThoaiNhaRiengProperty = RegisterProperty<string>(p => p.DienThoaiNhaRieng, "Dien Thoai Nha Rieng");
        /// <summary>
        /// Gets or sets the Dien Thoai Nha Rieng.
        /// </summary>
        /// <value>The Dien Thoai Nha Rieng.</value>
        public string DienThoaiNhaRieng
        {
            get { return GetProperty(DienThoaiNhaRiengProperty); }
            set { SetProperty(DienThoaiNhaRiengProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="DiDong"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> DiDongProperty = RegisterProperty<string>(p => p.DiDong, "Di Dong");
        /// <summary>
        /// Gets or sets the Di Dong.
        /// </summary>
        /// <value>The Di Dong.</value>
        public string DiDong
        {
            get { return GetProperty(DiDongProperty); }
            set { SetProperty(DiDongProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="Email"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> EmailProperty = RegisterProperty<string>(p => p.Email, "Email");
        /// <summary>
        /// Gets or sets the Email.
        /// </summary>
        /// <value>The Email.</value>
        public string Email
        {
            get { return GetProperty(EmailProperty); }
            set { SetProperty(EmailProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="NgayCapCMT"/> property.
        /// </summary>
        public static readonly PropertyInfo<SmartDate> NgayCapCMTProperty = RegisterProperty<SmartDate>(p => p.NgayCapCMT, "Ngay Cap CMT");
        /// <summary>
        /// Gets or sets the Ngay Cap CMT.
        /// </summary>
        /// <value>The Ngay Cap CMT.</value>
        public string NgayCapCMT
        {
            get { return GetPropertyConvert<SmartDate, String>(NgayCapCMTProperty); }
            set { SetPropertyConvert<SmartDate, String>(NgayCapCMTProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="NoiCapCMT"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> NoiCapCMTProperty = RegisterProperty<string>(p => p.NoiCapCMT, "Noi Cap CMT");
        /// <summary>
        /// Gets or sets the Noi Cap CMT.
        /// </summary>
        /// <value>The Noi Cap CMT.</value>
        public string NoiCapCMT
        {
            get { return GetProperty(NoiCapCMTProperty); }
            set { SetProperty(NoiCapCMTProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="NgayDangKi"/> property.
        /// </summary>
        public static readonly PropertyInfo<SmartDate> NgayDangKiProperty = RegisterProperty<SmartDate>(p => p.NgayDangKi, "Ngay Dang Ki");
        /// <summary>
        /// Gets or sets the Ngay Dang Ki.
        /// </summary>
        /// <value>The Ngay Dang Ki.</value>
        public string NgayDangKi
        {
            get { return GetPropertyConvert<SmartDate, String>(NgayDangKiProperty); }
            set { SetPropertyConvert<SmartDate, String>(NgayDangKiProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="Anh"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> AnhProperty = RegisterProperty<string>(p => p.Anh, "Anh");
        /// <summary>
        /// Gets or sets the Anh.
        /// </summary>
        /// <value>The Anh.</value>
        public string Anh
        {
            get { return GetProperty(AnhProperty); }
            set { SetProperty(AnhProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="DauVaoMon1"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> DauVaoMon1Property = RegisterProperty<string>(p => p.DauVaoMon1, "Dau Vao Mon1");
        /// <summary>
        /// Gets or sets the Dau Vao Mon1.
        /// </summary>
        /// <value>The Dau Vao Mon1.</value>
        public string DauVaoMon1
        {
            get { return GetProperty(DauVaoMon1Property); }
            set { SetProperty(DauVaoMon1Property, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="DauVaoDiem1"/> property.
        /// </summary>
        public static readonly PropertyInfo<Double?> DauVaoDiem1Property = RegisterProperty<Double?>(p => p.DauVaoDiem1, "Dau Vao Diem1");
        /// <summary>
        /// Gets or sets the Dau Vao Diem1.
        /// </summary>
        /// <value>The Dau Vao Diem1.</value>
        public Double? DauVaoDiem1
        {
            get { return GetProperty(DauVaoDiem1Property); }
            set { SetProperty(DauVaoDiem1Property, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="DauVaoMon2"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> DauVaoMon2Property = RegisterProperty<string>(p => p.DauVaoMon2, "Dau Vao Mon2");
        /// <summary>
        /// Gets or sets the Dau Vao Mon2.
        /// </summary>
        /// <value>The Dau Vao Mon2.</value>
        public string DauVaoMon2
        {
            get { return GetProperty(DauVaoMon2Property); }
            set { SetProperty(DauVaoMon2Property, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="DauVaoDiem2"/> property.
        /// </summary>
        public static readonly PropertyInfo<Double?> DauVaoDiem2Property = RegisterProperty<Double?>(p => p.DauVaoDiem2, "Dau Vao Diem2");
        /// <summary>
        /// Gets or sets the Dau Vao Diem2.
        /// </summary>
        /// <value>The Dau Vao Diem2.</value>
        public Double? DauVaoDiem2
        {
            get { return GetProperty(DauVaoDiem2Property); }
            set { SetProperty(DauVaoDiem2Property, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="DauVaoMon3"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> DauVaoMon3Property = RegisterProperty<string>(p => p.DauVaoMon3, "Dau Vao Mon3");
        /// <summary>
        /// Gets or sets the Dau Vao Mon3.
        /// </summary>
        /// <value>The Dau Vao Mon3.</value>
        public string DauVaoMon3
        {
            get { return GetProperty(DauVaoMon3Property); }
            set { SetProperty(DauVaoMon3Property, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="DauVaoDiem3"/> property.
        /// </summary>
        public static readonly PropertyInfo<Double?> DauVaoDiem3Property = RegisterProperty<Double?>(p => p.DauVaoDiem3, "Dau Vao Diem3");
        /// <summary>
        /// Gets or sets the Dau Vao Diem3.
        /// </summary>
        /// <value>The Dau Vao Diem3.</value>
        public Double? DauVaoDiem3
        {
            get { return GetProperty(DauVaoDiem3Property); }
            set { SetProperty(DauVaoDiem3Property, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="DauVaoMon4"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> DauVaoMon4Property = RegisterProperty<string>(p => p.DauVaoMon4, "Dau Vao Mon4");
        /// <summary>
        /// Gets or sets the Dau Vao Mon4.
        /// </summary>
        /// <value>The Dau Vao Mon4.</value>
        public string DauVaoMon4
        {
            get { return GetProperty(DauVaoMon4Property); }
            set { SetProperty(DauVaoMon4Property, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="DauVaoDiem4"/> property.
        /// </summary>
        public static readonly PropertyInfo<Double?> DauVaoDiem4Property = RegisterProperty<Double?>(p => p.DauVaoDiem4, "Dau Vao Diem4");
        /// <summary>
        /// Gets or sets the Dau Vao Diem4.
        /// </summary>
        /// <value>The Dau Vao Diem4.</value>
        public Double? DauVaoDiem4
        {
            get { return GetProperty(DauVaoDiem4Property); }
            set { SetProperty(DauVaoDiem4Property, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="DauVaoMon5"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> DauVaoMon5Property = RegisterProperty<string>(p => p.DauVaoMon5, "Dau Vao Mon5");
        /// <summary>
        /// Gets or sets the Dau Vao Mon5.
        /// </summary>
        /// <value>The Dau Vao Mon5.</value>
        public string DauVaoMon5
        {
            get { return GetProperty(DauVaoMon5Property); }
            set { SetProperty(DauVaoMon5Property, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="DauVaoDiem5"/> property.
        /// </summary>
        public static readonly PropertyInfo<Double?> DauVaoDiem5Property = RegisterProperty<Double?>(p => p.DauVaoDiem5, "Dau Vao Diem5");
        /// <summary>
        /// Gets or sets the Dau Vao Diem5.
        /// </summary>
        /// <value>The Dau Vao Diem5.</value>
        public Double? DauVaoDiem5
        {
            get { return GetProperty(DauVaoDiem5Property); }
            set { SetProperty(DauVaoDiem5Property, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="DauVaoMon6"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> DauVaoMon6Property = RegisterProperty<string>(p => p.DauVaoMon6, "Dau Vao Mon6");
        /// <summary>
        /// Gets or sets the Dau Vao Mon6.
        /// </summary>
        /// <value>The Dau Vao Mon6.</value>
        public string DauVaoMon6
        {
            get { return GetProperty(DauVaoMon6Property); }
            set { SetProperty(DauVaoMon6Property, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="DauVaoDiem6"/> property.
        /// </summary>
        public static readonly PropertyInfo<Double?> DauVaoDiem6Property = RegisterProperty<Double?>(p => p.DauVaoDiem6, "Dau Vao Diem6");
        /// <summary>
        /// Gets or sets the Dau Vao Diem6.
        /// </summary>
        /// <value>The Dau Vao Diem6.</value>
        public Double? DauVaoDiem6
        {
            get { return GetProperty(DauVaoDiem6Property); }
            set { SetProperty(DauVaoDiem6Property, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="DanToc"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> DanTocProperty = RegisterProperty<string>(p => p.DanToc, "Dan Toc");
        /// <summary>
        /// Gets or sets the Dan Toc.
        /// </summary>
        /// <value>The Dan Toc.</value>
        public string DanToc
        {
            get { return GetProperty(DanTocProperty); }
            set { SetProperty(DanTocProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="TonGiao"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> TonGiaoProperty = RegisterProperty<string>(p => p.TonGiao, "Ton Giao");
        /// <summary>
        /// Gets or sets the Ton Giao.
        /// </summary>
        /// <value>The Ton Giao.</value>
        public string TonGiao
        {
            get { return GetProperty(TonGiaoProperty); }
            set { SetProperty(TonGiaoProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="QuanHeGiaDinh"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> QuanHeGiaDinhProperty = RegisterProperty<string>(p => p.QuanHeGiaDinh, "Quan He Gia Dinh");
        /// <summary>
        /// Gets or sets the Quan He Gia Dinh.
        /// </summary>
        /// <value>The Quan He Gia Dinh.</value>
        public string QuanHeGiaDinh
        {
            get { return GetProperty(QuanHeGiaDinhProperty); }
            set { SetProperty(QuanHeGiaDinhProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="DuocPhepThiLai"/> property.
        /// </summary>
        public static readonly PropertyInfo<bool?> DuocPhepThiLaiProperty = RegisterProperty<bool?>(p => p.DuocPhepThiLai, "Duoc Phep Thi Lai");
        /// <summary>
        /// Gets or sets the Duoc Phep Thi Lai.
        /// </summary>
        /// <value><c>true</c> if Duoc Phep Thi Lai; <c>false</c> if not Duoc Phep Thi Lai; otherwise, <c>null</c>.</value>
        public bool? DuocPhepThiLai
        {
            get { return GetProperty(DuocPhepThiLaiProperty); }
            set { SetProperty(DuocPhepThiLaiProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="LyDoKhongDuocThiLai"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> LyDoKhongDuocThiLaiProperty = RegisterProperty<string>(p => p.LyDoKhongDuocThiLai, "Ly Do Khong Duoc Thi Lai");
        /// <summary>
        /// Gets or sets the Ly Do Khong Duoc Thi Lai.
        /// </summary>
        /// <value>The Ly Do Khong Duoc Thi Lai.</value>
        public string LyDoKhongDuocThiLai
        {
            get { return GetProperty(LyDoKhongDuocThiLaiProperty); }
            set { SetProperty(LyDoKhongDuocThiLaiProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="LastEdited_User"/> property.
        /// </summary>
        public static readonly PropertyInfo<Int64?> LastEdited_UserProperty = RegisterProperty<Int64?>(p => p.LastEdited_User, "Last Edited User");
        /// <summary>
        /// Gets or sets the Last Edited User.
        /// </summary>
        /// <value>The Last Edited User.</value>
        public Int64? LastEdited_User
        {
            get { return GetProperty(LastEdited_UserProperty); }
            set { SetProperty(LastEdited_UserProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="LastEdited_Date"/> property.
        /// </summary>
        public static readonly PropertyInfo<SmartDate> LastEdited_DateProperty = RegisterProperty<SmartDate>(p => p.LastEdited_Date, "Last Edited Date");
        /// <summary>
        /// Gets or sets the Last Edited Date.
        /// </summary>
        /// <value>The Last Edited Date.</value>
        public SmartDate LastEdited_Date
        {
            get { return GetProperty(LastEdited_DateProperty); }
            set { SetProperty(LastEdited_DateProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="backup01"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> Backup01Property = RegisterProperty<string>(p => p.Backup01, "backup01");
        /// <summary>
        /// Gets or sets the backup01.
        /// </summary>
        /// <value>The backup01.</value>
        public string Backup01
        {
            get { return GetProperty(Backup01Property); }
            set { SetProperty(Backup01Property, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="backup02"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> Backup02Property = RegisterProperty<string>(p => p.Backup02, "backup02");
        /// <summary>
        /// Gets or sets the backup02.
        /// </summary>
        /// <value>The backup02.</value>
        public string Backup02
        {
            get { return GetProperty(Backup02Property); }
            set { SetProperty(Backup02Property, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="backup03"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> Backup03Property = RegisterProperty<string>(p => p.Backup03, "backup03");
        /// <summary>
        /// Gets or sets the backup03.
        /// </summary>
        /// <value>The backup03.</value>
        public string Backup03
        {
            get { return GetProperty(Backup03Property); }
            set { SetProperty(Backup03Property, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="backup04"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> Backup04Property = RegisterProperty<string>(p => p.Backup04, "backup04");
        /// <summary>
        /// Gets or sets the backup04.
        /// </summary>
        /// <value>The backup04.</value>
        public string Backup04
        {
            get { return GetProperty(Backup04Property); }
            set { SetProperty(Backup04Property, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="backup05"/> property.
        /// </summary>
        public static readonly PropertyInfo<int?> Backup05Property = RegisterProperty<int?>(p => p.Backup05, "backup05");
        /// <summary>
        /// Gets or sets the backup05.
        /// </summary>
        /// <value>The backup05.</value>
        public int? Backup05
        {
            get { return GetProperty(Backup05Property); }
            set { SetProperty(Backup05Property, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="backup06"/> property.
        /// </summary>
        public static readonly PropertyInfo<int?> Backup06Property = RegisterProperty<int?>(p => p.Backup06, "backup06");
        /// <summary>
        /// Gets or sets the backup06.
        /// </summary>
        /// <value>The backup06.</value>
        public int? Backup06
        {
            get { return GetProperty(Backup06Property); }
            set { SetProperty(Backup06Property, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="backup07"/> property.
        /// </summary>
        public static readonly PropertyInfo<SmartDate> Backup07Property = RegisterProperty<SmartDate>(p => p.Backup07, "backup07");
        /// <summary>
        /// Gets or sets the backup07.
        /// </summary>
        /// <value>The backup07.</value>
        public string Backup07
        {
            get { return GetPropertyConvert<SmartDate, String>(Backup07Property); }
            set { SetPropertyConvert<SmartDate, String>(Backup07Property, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="backup08"/> property.
        /// </summary>
        public static readonly PropertyInfo<SmartDate> Backup08Property = RegisterProperty<SmartDate>(p => p.Backup08, "backup08");
        /// <summary>
        /// Gets or sets the backup08.
        /// </summary>
        /// <value>The backup08.</value>
        public string Backup08
        {
            get { return GetPropertyConvert<SmartDate, String>(Backup08Property); }
            set { SetPropertyConvert<SmartDate, String>(Backup08Property, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="TongHocPhiPhaiDong"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> TongHocPhiPhaiDongProperty = RegisterProperty<string>(p => p.TongHocPhiPhaiDong, "Tong Hoc Phi Phai Dong");
        /// <summary>
        /// Gets or sets the Tong Hoc Phi Phai Dong.
        /// </summary>
        /// <value>The Tong Hoc Phi Phai Dong.</value>
        public string TongHocPhiPhaiDong
        {
            get { return GetProperty(TongHocPhiPhaiDongProperty); }
            set { SetProperty(TongHocPhiPhaiDongProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="TongHocPhiDaDong"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> TongHocPhiDaDongProperty = RegisterProperty<string>(p => p.TongHocPhiDaDong, "Tong Hoc Phi Da Dong");
        /// <summary>
        /// Gets or sets the Tong Hoc Phi Da Dong.
        /// </summary>
        /// <value>The Tong Hoc Phi Da Dong.</value>
        public string TongHocPhiDaDong
        {
            get { return GetProperty(TongHocPhiDaDongProperty); }
            set { SetProperty(TongHocPhiDaDongProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="AllInOneHoaDon"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> AllInOneHoaDonProperty = RegisterProperty<string>(p => p.AllInOneHoaDon, "All In One Hoa Don");
        /// <summary>
        /// Gets or sets the All In One Hoa Don.
        /// </summary>
        /// <value>The All In One Hoa Don.</value>
        public string AllInOneHoaDon
        {
            get { return GetProperty(AllInOneHoaDonProperty); }
            set { SetProperty(AllInOneHoaDonProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="SoLanInThe"/> property.
        /// </summary>
        public static readonly PropertyInfo<int?> SoLanInTheProperty = RegisterProperty<int?>(p => p.SoLanInThe, "So Lan In The");
        /// <summary>
        /// Gets or sets the So Lan In The.
        /// </summary>
        /// <value>The So Lan In The.</value>
        public int? SoLanInThe
        {
            get { return GetProperty(SoLanInTheProperty); }
            set { SetProperty(SoLanInTheProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="SoLanInBangDiem"/> property.
        /// </summary>
        public static readonly PropertyInfo<int?> SoLanInBangDiemProperty = RegisterProperty<int?>(p => p.SoLanInBangDiem, "So Lan In Bang Diem");
        /// <summary>
        /// Gets or sets the So Lan In Bang Diem.
        /// </summary>
        /// <value>The So Lan In Bang Diem.</value>
        public int? SoLanInBangDiem
        {
            get { return GetProperty(SoLanInBangDiemProperty); }
            set { SetProperty(SoLanInBangDiemProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="SoLanInBang"/> property.
        /// </summary>
        public static readonly PropertyInfo<int?> SoLanInBangProperty = RegisterProperty<int?>(p => p.SoLanInBang, "So Lan In Bang");
        /// <summary>
        /// Gets or sets the So Lan In Bang.
        /// </summary>
        /// <value>The So Lan In Bang.</value>
        public int? SoLanInBang
        {
            get { return GetProperty(SoLanInBangProperty); }
            set { SetProperty(SoLanInBangProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="idLopHoc"/> property.
        /// </summary>
        public static readonly PropertyInfo<int?> IdLopHocProperty = RegisterProperty<int?>(p => p.IdLopHoc, "id Lop Hoc");
        /// <summary>
        /// Gets or sets the id Lop Hoc.
        /// </summary>
        /// <value>The id Lop Hoc.</value>
        public int? IdLopHoc
        {
            get { return GetProperty(IdLopHocProperty); }
            set { SetProperty(IdLopHocProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="SBD"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> SBDProperty = RegisterProperty<string>(p => p.SBD, "SBD");
        /// <summary>
        /// Gets or sets the SBD.
        /// </summary>
        /// <value>The SBD.</value>
        public string SBD
        {
            get { return GetProperty(SBDProperty); }
            set { SetProperty(SBDProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="idChuyenNganhDuThi"/> property.
        /// </summary>
        public static readonly PropertyInfo<int?> IdChuyenNganhDuThiProperty = RegisterProperty<int?>(p => p.IdChuyenNganhDuThi, "id Chuyen Nganh Du Thi");
        /// <summary>
        /// Gets or sets the id Chuyen Nganh Du Thi.
        /// </summary>
        /// <value>The id Chuyen Nganh Du Thi.</value>
        public int? IdChuyenNganhDuThi
        {
            get { return GetProperty(IdChuyenNganhDuThiProperty); }
            set { SetProperty(IdChuyenNganhDuThiProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="CapDoDuTuyen"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> CapDoDuTuyenProperty = RegisterProperty<string>(p => p.CapDoDuTuyen, "Cap Do Du Tuyen");
        /// <summary>
        /// Gets or sets the Cap Do Du Tuyen.
        /// </summary>
        /// <value>The Cap Do Du Tuyen.</value>
        public string CapDoDuTuyen
        {
            get { return GetProperty(CapDoDuTuyenProperty); }
            set { SetProperty(CapDoDuTuyenProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="KhoaDuTuyen"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> KhoaDuTuyenProperty = RegisterProperty<string>(p => p.KhoaDuTuyen, "Khoa Du Tuyen");
        /// <summary>
        /// Gets or sets the Khoa Du Tuyen.
        /// </summary>
        /// <value>The Khoa Du Tuyen.</value>
        public string KhoaDuTuyen
        {
            get { return GetProperty(KhoaDuTuyenProperty); }
            set { SetProperty(KhoaDuTuyenProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="NamDuTuyen"/> property.
        /// </summary>
        public static readonly PropertyInfo<int?> NamDuTuyenProperty = RegisterProperty<int?>(p => p.NamDuTuyen, "Nam Du Tuyen");
        /// <summary>
        /// Gets or sets the Nam Du Tuyen.
        /// </summary>
        /// <value>The Nam Du Tuyen.</value>
        public int? NamDuTuyen
        {
            get { return GetProperty(NamDuTuyenProperty); }
            set { SetProperty(NamDuTuyenProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="TongDiemDauVao"/> property.
        /// </summary>
        public static readonly PropertyInfo<Double?> TongDiemDauVaoProperty = RegisterProperty<Double?>(p => p.TongDiemDauVao, "Tong Diem Dau Vao");
        /// <summary>
        /// Gets or sets the Tong Diem Dau Vao.
        /// </summary>
        /// <value>The Tong Diem Dau Vao.</value>
        public Double? TongDiemDauVao
        {
            get { return GetProperty(TongDiemDauVaoProperty); }
            set { SetProperty(TongDiemDauVaoProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="TotNghiepLT"/> property.
        /// </summary>
        public static readonly PropertyInfo<Double?> TotNghiepLTProperty = RegisterProperty<Double?>(p => p.TotNghiepLT, "Tot Nghiep LT");
        /// <summary>
        /// Gets or sets the Tot Nghiep LT.
        /// </summary>
        /// <value>The Tot Nghiep LT.</value>
        public Double? TotNghiepLT
        {
            get { return GetProperty(TotNghiepLTProperty); }
            set { SetProperty(TotNghiepLTProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="TotNghiepTH"/> property.
        /// </summary>
        public static readonly PropertyInfo<Double?> TotNghiepTHProperty = RegisterProperty<Double?>(p => p.TotNghiepTH, "Tot Nghiep TH");
        /// <summary>
        /// Gets or sets the Tot Nghiep TH.
        /// </summary>
        /// <value>The Tot Nghiep TH.</value>
        public Double? TotNghiepTH
        {
            get { return GetProperty(TotNghiepTHProperty); }
            set { SetProperty(TotNghiepTHProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="BaoVeLuanVan"/> property.
        /// </summary>
        public static readonly PropertyInfo<Double?> BaoVeLuanVanProperty = RegisterProperty<Double?>(p => p.BaoVeLuanVan, "Bao Ve Luan Van");
        /// <summary>
        /// Gets or sets the Bao Ve Luan Van.
        /// </summary>
        /// <value>The Bao Ve Luan Van.</value>
        public Double? BaoVeLuanVan
        {
            get { return GetProperty(BaoVeLuanVanProperty); }
            set { SetProperty(BaoVeLuanVanProperty, value); }
        }

        #endregion

        #region Factory Methods

        /// <summary>
        /// Factory method. Creates a new <see cref="DT_ChinhQuy_HocVien"/> object.
        /// </summary>
        /// <returns>A reference to the created <see cref="DT_ChinhQuy_HocVien"/> object.</returns>
        public static DT_ChinhQuy_HocVien NewDT_ChinhQuy_HocVien()
        {
            return DataPortal.Create<DT_ChinhQuy_HocVien>();
        }

        /// <summary>
        /// Factory method. Loads a <see cref="DT_ChinhQuy_HocVien"/> object, based on given parameters.
        /// </summary>
        /// <param name="id">The Id parameter of the DT_ChinhQuy_HocVien to fetch.</param>
        /// <returns>A reference to the fetched <see cref="DT_ChinhQuy_HocVien"/> object.</returns>
        public static DT_ChinhQuy_HocVien GetDT_ChinhQuy_HocVien(int id)
        {
            return DataPortal.Fetch<DT_ChinhQuy_HocVien>(id);
        }

        /// <summary>
        /// Factory method. Deletes a <see cref="DT_ChinhQuy_HocVien"/> object, based on given parameters.
        /// </summary>
        /// <param name="id">The Id of the DT_ChinhQuy_HocVien to delete.</param>
        public static void DeleteDT_ChinhQuy_HocVien(int id)
        {
            DataPortal.Delete<DT_ChinhQuy_HocVien>(id);
        }

        /// <summary>
        /// Factory method. Asynchronously creates a new <see cref="DT_ChinhQuy_HocVien"/> object.
        /// </summary>
        /// <param name="callback">The completion callback method.</param>
        public static void NewDT_ChinhQuy_HocVien(EventHandler<DataPortalResult<DT_ChinhQuy_HocVien>> callback)
        {
            DataPortal.BeginCreate<DT_ChinhQuy_HocVien>(callback);
        }

        /// <summary>
        /// Factory method. Asynchronously loads a <see cref="DT_ChinhQuy_HocVien"/> object, based on given parameters.
        /// </summary>
        /// <param name="id">The Id parameter of the DT_ChinhQuy_HocVien to fetch.</param>
        /// <param name="callback">The completion callback method.</param>
        public static void GetDT_ChinhQuy_HocVien(int id, EventHandler<DataPortalResult<DT_ChinhQuy_HocVien>> callback)
        {
            DataPortal.BeginFetch<DT_ChinhQuy_HocVien>(id, callback);
        }

        /// <summary>
        /// Factory method. Asynchronously deletes a <see cref="DT_ChinhQuy_HocVien"/> object, based on given parameters.
        /// </summary>
        /// <param name="id">The Id of the DT_ChinhQuy_HocVien to delete.</param>
        /// <param name="callback">The completion callback method.</param>
        public static void DeleteDT_ChinhQuy_HocVien(int id, EventHandler<DataPortalResult<DT_ChinhQuy_HocVien>> callback)
        {
            DataPortal.BeginDelete<DT_ChinhQuy_HocVien>(id, callback);
        }

        #endregion

        #region Constructor

        /// <summary>
        /// Initializes a new instance of the <see cref="DT_ChinhQuy_HocVien"/> class.
        /// </summary>
        /// <remarks> Do not use to create a Csla object. Use factory methods instead.</remarks>
        private DT_ChinhQuy_HocVien()
        {
            // Prevent direct creation
        }

        #endregion

        #region Data Access

        /// <summary>
        /// Loads default values for the <see cref="DT_ChinhQuy_HocVien"/> object properties.
        /// </summary>
        [Csla.RunLocal]
        protected override void DataPortal_Create()
        {
            LoadProperty(IdProperty, System.Threading.Interlocked.Decrement(ref _lastID));
            LoadProperty(HoTenProperty, null);
            LoadProperty(NgaySinhProperty, null);
            LoadProperty(SoCMTProperty, null);
            LoadProperty(MaHocVienProperty, null);
            LoadProperty(GioiTinhProperty, null);
            LoadProperty(TruongTotNghiepProperty, null);
            LoadProperty(SoBangProperty, null);
            LoadProperty(NoiCongTacProperty, null);
            LoadProperty(DiaChiNhaRiengProperty, null);
            LoadProperty(DienThoaiNhaRiengProperty, null);
            LoadProperty(DiDongProperty, null);
            LoadProperty(EmailProperty, null);
            LoadProperty(NgayCapCMTProperty, null);
            LoadProperty(NoiCapCMTProperty, null);
            LoadProperty(NgayDangKiProperty, null);
            LoadProperty(AnhProperty, null);
            LoadProperty(DauVaoMon1Property, null);
            LoadProperty(DauVaoMon2Property, null);
            LoadProperty(DauVaoMon3Property, null);
            LoadProperty(DauVaoMon4Property, null);
            LoadProperty(DauVaoMon5Property, null);
            LoadProperty(DauVaoMon6Property, null);
            LoadProperty(DanTocProperty, null);
            LoadProperty(TonGiaoProperty, null);
            LoadProperty(QuanHeGiaDinhProperty, null);
            LoadProperty(LyDoKhongDuocThiLaiProperty, null);
            LoadProperty(LastEdited_DateProperty, null);
            LoadProperty(Backup01Property, null);
            LoadProperty(Backup02Property, null);
            LoadProperty(Backup03Property, null);
            LoadProperty(Backup04Property, null);
            LoadProperty(Backup07Property, null);
            LoadProperty(Backup08Property, null);
            LoadProperty(TongHocPhiPhaiDongProperty, null);
            LoadProperty(TongHocPhiDaDongProperty, null);
            LoadProperty(AllInOneHoaDonProperty, null);
            LoadProperty(SBDProperty, null);
            LoadProperty(CapDoDuTuyenProperty, null);
            LoadProperty(KhoaDuTuyenProperty, null);
            var args = new DataPortalHookArgs();
            OnCreate(args);
            base.DataPortal_Create();
        }

        /// <summary>
        /// Loads a <see cref="DT_ChinhQuy_HocVien"/> object from the database, based on given criteria.
        /// </summary>
        /// <param name="id">The id.</param>
        protected void DataPortal_Fetch(int id)
        {
            using (var ctx = ConnectionManager<SqlConnection>.GetManager("Connection"))
            {
                using (var cmd = new SqlCommand("dbo.DT_ChinhQuy_HocVien_get", ctx.Connection))
                {
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@id", id).DbType = DbType.Int32;
                    var args = new DataPortalHookArgs(cmd, id);
                    OnFetchPre(args);
                    Fetch(cmd);
                    OnFetchPost(args);
                }
            }
            // check all object rules and property rules
            BusinessRules.CheckRules();
        }

        private void Fetch(SqlCommand cmd)
        {
            using (var dr = new SafeDataReader(cmd.ExecuteReader()))
            {
                if (dr.Read())
                {
                    Fetch(dr);
                }
            }
        }

        /// <summary>
        /// Loads a <see cref="DT_ChinhQuy_HocVien"/> object from the given SafeDataReader.
        /// </summary>
        /// <param name="dr">The SafeDataReader to use.</param>
        private void Fetch(SafeDataReader dr)
        {
            // Value properties
            LoadProperty(IdProperty, dr.GetInt32("Id"));
            LoadProperty(HoTenProperty, dr.GetString("HoTen"));
            LoadProperty(NgaySinhProperty, dr.GetSmartDate("NgaySinh"));
            LoadProperty(SoCMTProperty, dr.GetString("SoCMT"));
            LoadProperty(MaHocVienProperty, dr.GetString("MaHocVien"));
            LoadProperty(GioiTinhProperty, dr.GetString("GioiTinh"));
            LoadProperty(IdTrinhDoProperty, dr.GetInt64("IdTrinhDo"));
            LoadProperty(IdChuyenNganhProperty, dr.GetInt32("IdChuyenNganh"));
            LoadProperty(TruongTotNghiepProperty, dr.GetString("TruongTotNghiep"));
            LoadProperty(NamTotNghiepProperty, dr.GetInt32("NamTotNghiep"));
            LoadProperty(SoBangProperty, dr.GetString("SoBang"));
            LoadProperty(NoiCongTacProperty, dr.GetString("NoiCongTac"));
            LoadProperty(DiaChiNhaRiengProperty, dr.GetString("DiaChiNhaRieng"));
            LoadProperty(DienThoaiNhaRiengProperty, dr.GetString("DienThoaiNhaRieng"));
            LoadProperty(DiDongProperty, dr.GetString("DiDong"));
            LoadProperty(EmailProperty, dr.GetString("Email"));
            LoadProperty(NgayCapCMTProperty, dr.GetSmartDate("NgayCapCMT"));
            LoadProperty(NoiCapCMTProperty, dr.GetString("NoiCapCMT"));
            LoadProperty(NgayDangKiProperty, dr.GetSmartDate("NgayDangKi"));
            LoadProperty(AnhProperty, dr.GetString("Anh"));
            LoadProperty(DauVaoMon1Property, dr.GetString("DauVaoMon1"));
            LoadProperty(DauVaoDiem1Property, dr.GetDouble("DauVaoDiem1"));
            LoadProperty(DauVaoMon2Property, dr.GetString("DauVaoMon2"));
            LoadProperty(DauVaoDiem2Property, dr.GetDouble("DauVaoDiem2"));
            LoadProperty(DauVaoMon3Property, dr.GetString("DauVaoMon3"));
            LoadProperty(DauVaoDiem3Property, dr.GetDouble("DauVaoDiem3"));
            LoadProperty(DauVaoMon4Property, dr.GetString("DauVaoMon4"));
            LoadProperty(DauVaoDiem4Property, dr.GetDouble("DauVaoDiem4"));
            LoadProperty(DauVaoMon5Property, dr.GetString("DauVaoMon5"));
            LoadProperty(DauVaoDiem5Property, dr.GetDouble("DauVaoDiem5"));
            LoadProperty(DauVaoMon6Property, dr.GetString("DauVaoMon6"));
            LoadProperty(DauVaoDiem6Property, dr.GetDouble("DauVaoDiem6"));
            LoadProperty(DanTocProperty, dr.GetString("DanToc"));
            LoadProperty(TonGiaoProperty, dr.GetString("TonGiao"));
            LoadProperty(QuanHeGiaDinhProperty, dr.GetString("QuanHeGiaDinh"));
            LoadProperty(DuocPhepThiLaiProperty, dr.GetBoolean("DuocPhepThiLai"));
            LoadProperty(LyDoKhongDuocThiLaiProperty, dr.GetString("LyDoKhongDuocThiLai"));
            LoadProperty(LastEdited_UserProperty, dr.GetInt64("LastEdited_User"));
            LoadProperty(LastEdited_DateProperty, dr.GetSmartDate("LastEdited_Date"));
            LoadProperty(Backup01Property, dr.GetString("Backup01"));
            LoadProperty(Backup02Property, dr.GetString("Backup02"));
            LoadProperty(Backup03Property, dr.GetString("Backup03"));
            LoadProperty(Backup04Property, dr.GetString("Backup04"));
            LoadProperty(Backup05Property, dr.GetInt32("Backup05"));
            LoadProperty(Backup06Property, dr.GetInt32("Backup06"));
            LoadProperty(Backup07Property, dr.GetSmartDate("Backup07"));
            LoadProperty(Backup08Property, dr.GetSmartDate("Backup08"));
 LoadProperty(TongHocPhiPhaiDongProperty, dr.GetString("TongHocPhiPhaiDong"));
            LoadProperty(TongHocPhiDaDongProperty, dr.GetString("TongHocPhiDaDong"));
            LoadProperty(AllInOneHoaDonProperty, dr.GetString("AllInOneHoaDon"));
            LoadProperty(SoLanInTheProperty, dr.GetInt32("SoLanInThe"));
            LoadProperty(SoLanInBangDiemProperty, dr.GetInt32("SoLanInBangDiem"));
            LoadProperty(SoLanInBangProperty, dr.GetInt32("SoLanInBang"));
    LoadProperty(IdLopHocProperty, dr.GetInt32("IdLopHoc"));
    LoadProperty(SBDProperty, dr.GetString("SBD"));
            LoadProperty(IdChuyenNganhDuThiProperty, dr.GetInt32("IdChuyenNganhDuThi"));
            LoadProperty(CapDoDuTuyenProperty, dr.GetString("CapDoDuTuyen"));
            LoadProperty(KhoaDuTuyenProperty, dr.GetString("KhoaDuTuyen"));
            LoadProperty(NamDuTuyenProperty, dr.GetInt32("NamDuTuyen"));
            LoadProperty(TongDiemDauVaoProperty, dr.GetDouble("TongDiemDauVao"));
            LoadProperty(TotNghiepLTProperty, dr.GetDouble("TotNghiepLT"));
            LoadProperty(TotNghiepTHProperty, dr.GetDouble("TotNghiepTH"));
            LoadProperty(BaoVeLuanVanProperty, dr.GetDouble("BaoVeLuanVan"));
            LoadProperty(NoiSinhProperty, dr.GetString("NoiSinh"));
            LoadProperty(MienThi1Property, dr.GetBoolean("MienThi1"));
            LoadProperty(MienThi2Property, dr.GetBoolean("MienThi2"));
            LoadProperty(MienThi3Property, dr.GetBoolean("MienThi3"));
            LoadProperty(MienThi4Property, dr.GetBoolean("MienThi4"));
            LoadProperty(MienThi5Property, dr.GetBoolean("MienThi5"));
            var args = new DataPortalHookArgs(dr);
            OnFetchRead(args);
        }

        /// <summary>
        /// Inserts a new <see cref="DT_ChinhQuy_HocVien"/> object in the database.
        /// </summary>
        protected override void DataPortal_Insert()
        {
            using (var ctx = TransactionManager<SqlConnection, SqlTransaction>.GetManager("Connection"))
            {
                using (var cmd = new SqlCommand("dbo.DT_ChinhQuy_HocVien_add", ctx.Connection))
                {
                    cmd.Transaction = ctx.Transaction;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@id", ReadProperty(IdProperty)).Direction = ParameterDirection.Output;
                    cmd.Parameters.AddWithValue("@HoTen", ReadProperty(HoTenProperty) == null ? (object)DBNull.Value : ReadProperty(HoTenProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@NgaySinh", ReadProperty(NgaySinhProperty).DBValue).DbType = DbType.DateTime;
                    cmd.Parameters.AddWithValue("@SoCMT", ReadProperty(SoCMTProperty) == null ? (object)DBNull.Value : ReadProperty(SoCMTProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@MaHocVien", ReadProperty(MaHocVienProperty) == null ? (object)DBNull.Value : ReadProperty(MaHocVienProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@GioiTinh", ReadProperty(GioiTinhProperty) == null ? (object)DBNull.Value : ReadProperty(GioiTinhProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@idTrinhDo", ReadProperty(IdTrinhDoProperty) == null ? (object)DBNull.Value : ReadProperty(IdTrinhDoProperty).Value).DbType = DbType.Int64;
                    cmd.Parameters.AddWithValue("@idChuyenNganh", ReadProperty(IdChuyenNganhProperty) == null ? (object)DBNull.Value : ReadProperty(IdChuyenNganhProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@TruongTotNghiep", ReadProperty(TruongTotNghiepProperty) == null ? (object)DBNull.Value : ReadProperty(TruongTotNghiepProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@NamTotNghiep", ReadProperty(NamTotNghiepProperty) == null ? (object)DBNull.Value : ReadProperty(NamTotNghiepProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@SoBang", ReadProperty(SoBangProperty) == null ? (object)DBNull.Value : ReadProperty(SoBangProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@NoiCongTac", ReadProperty(NoiCongTacProperty) == null ? (object)DBNull.Value : ReadProperty(NoiCongTacProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@DiaChiNhaRieng", ReadProperty(DiaChiNhaRiengProperty) == null ? (object)DBNull.Value : ReadProperty(DiaChiNhaRiengProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@DienThoaiNhaRieng", ReadProperty(DienThoaiNhaRiengProperty) == null ? (object)DBNull.Value : ReadProperty(DienThoaiNhaRiengProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@DiDong", ReadProperty(DiDongProperty) == null ? (object)DBNull.Value : ReadProperty(DiDongProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@Email", ReadProperty(EmailProperty) == null ? (object)DBNull.Value : ReadProperty(EmailProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@NgayCapCMT", ReadProperty(NgayCapCMTProperty).DBValue).DbType = DbType.DateTime;
                    cmd.Parameters.AddWithValue("@NoiCapCMT", ReadProperty(NoiCapCMTProperty) == null ? (object)DBNull.Value : ReadProperty(NoiCapCMTProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@NgayDangKi", ReadProperty(NgayDangKiProperty).DBValue).DbType = DbType.DateTime;
                    cmd.Parameters.AddWithValue("@Anh", ReadProperty(AnhProperty) == null ? (object)DBNull.Value : ReadProperty(AnhProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@DauVaoMon1", ReadProperty(DauVaoMon1Property) == null ? (object)DBNull.Value : ReadProperty(DauVaoMon1Property)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@DauVaoDiem1", ReadProperty(DauVaoDiem1Property) == null ? (object)DBNull.Value : ReadProperty(DauVaoDiem1Property).Value).DbType = DbType.Double;
                    cmd.Parameters.AddWithValue("@DauVaoMon2", ReadProperty(DauVaoMon2Property) == null ? (object)DBNull.Value : ReadProperty(DauVaoMon2Property)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@DauVaoDiem2", ReadProperty(DauVaoDiem2Property) == null ? (object)DBNull.Value : ReadProperty(DauVaoDiem2Property).Value).DbType = DbType.Double;
                    cmd.Parameters.AddWithValue("@DauVaoMon3", ReadProperty(DauVaoMon3Property) == null ? (object)DBNull.Value : ReadProperty(DauVaoMon3Property)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@DauVaoDiem3", ReadProperty(DauVaoDiem3Property) == null ? (object)DBNull.Value : ReadProperty(DauVaoDiem3Property).Value).DbType = DbType.Double;
                    cmd.Parameters.AddWithValue("@DauVaoMon4", ReadProperty(DauVaoMon4Property) == null ? (object)DBNull.Value : ReadProperty(DauVaoMon4Property)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@DauVaoDiem4", ReadProperty(DauVaoDiem4Property) == null ? (object)DBNull.Value : ReadProperty(DauVaoDiem4Property).Value).DbType = DbType.Double;
                    cmd.Parameters.AddWithValue("@DauVaoMon5", ReadProperty(DauVaoMon5Property) == null ? (object)DBNull.Value : ReadProperty(DauVaoMon5Property)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@DauVaoDiem5", ReadProperty(DauVaoDiem5Property) == null ? (object)DBNull.Value : ReadProperty(DauVaoDiem5Property).Value).DbType = DbType.Double;
                    cmd.Parameters.AddWithValue("@DauVaoMon6", ReadProperty(DauVaoMon6Property) == null ? (object)DBNull.Value : ReadProperty(DauVaoMon6Property)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@DauVaoDiem6", ReadProperty(DauVaoDiem6Property) == null ? (object)DBNull.Value : ReadProperty(DauVaoDiem6Property).Value).DbType = DbType.Double;
                    cmd.Parameters.AddWithValue("@DanToc", ReadProperty(DanTocProperty) == null ? (object)DBNull.Value : ReadProperty(DanTocProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@TonGiao", ReadProperty(TonGiaoProperty) == null ? (object)DBNull.Value : ReadProperty(TonGiaoProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@QuanHeGiaDinh", ReadProperty(QuanHeGiaDinhProperty) == null ? (object)DBNull.Value : ReadProperty(QuanHeGiaDinhProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@DuocPhepThiLai", ReadProperty(DuocPhepThiLaiProperty) == null ? (object)DBNull.Value : ReadProperty(DuocPhepThiLaiProperty).Value).DbType = DbType.Boolean;
                    cmd.Parameters.AddWithValue("@LyDoKhongDuocThiLai", ReadProperty(LyDoKhongDuocThiLaiProperty) == null ? (object)DBNull.Value : ReadProperty(LyDoKhongDuocThiLaiProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@LastEdited_User", ReadProperty(LastEdited_UserProperty) == null ? (object)DBNull.Value : ReadProperty(LastEdited_UserProperty).Value).DbType = DbType.Int64;
                    cmd.Parameters.AddWithValue("@LastEdited_Date", ReadProperty(LastEdited_DateProperty).DBValue).DbType = DbType.DateTime;
                    cmd.Parameters.AddWithValue("@backup01", ReadProperty(Backup01Property) == null ? (object)DBNull.Value : ReadProperty(Backup01Property)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@backup02", ReadProperty(Backup02Property) == null ? (object)DBNull.Value : ReadProperty(Backup02Property)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@backup03", ReadProperty(Backup03Property) == null ? (object)DBNull.Value : ReadProperty(Backup03Property)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@backup04", ReadProperty(Backup04Property) == null ? (object)DBNull.Value : ReadProperty(Backup04Property)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@backup05", ReadProperty(Backup05Property) == null ? (object)DBNull.Value : ReadProperty(Backup05Property).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@backup06", ReadProperty(Backup06Property) == null ? (object)DBNull.Value : ReadProperty(Backup06Property).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@backup07", ReadProperty(Backup07Property).DBValue).DbType = DbType.DateTime;
                    cmd.Parameters.AddWithValue("@backup08", ReadProperty(Backup08Property).DBValue).DbType = DbType.DateTime;
                    cmd.Parameters.AddWithValue("@TongHocPhiPhaiDong", ReadProperty(TongHocPhiPhaiDongProperty) == null ? (object)DBNull.Value : ReadProperty(TongHocPhiPhaiDongProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@TongHocPhiDaDong", ReadProperty(TongHocPhiDaDongProperty) == null ? (object)DBNull.Value : ReadProperty(TongHocPhiDaDongProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@AllInOneHoaDon", ReadProperty(AllInOneHoaDonProperty) == null ? (object)DBNull.Value : ReadProperty(AllInOneHoaDonProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@SoLanInThe", ReadProperty(SoLanInTheProperty) == null ? (object)DBNull.Value : ReadProperty(SoLanInTheProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@SoLanInBangDiem", ReadProperty(SoLanInBangDiemProperty) == null ? (object)DBNull.Value : ReadProperty(SoLanInBangDiemProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@SoLanInBang", ReadProperty(SoLanInBangProperty) == null ? (object)DBNull.Value : ReadProperty(SoLanInBangProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@idLopHoc", ReadProperty(IdLopHocProperty) == null ? (object)DBNull.Value : ReadProperty(IdLopHocProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@SBD", ReadProperty(SBDProperty) == null ? (object)DBNull.Value : ReadProperty(SBDProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@idChuyenNganhDuThi", ReadProperty(IdChuyenNganhDuThiProperty) == null ? (object)DBNull.Value : ReadProperty(IdChuyenNganhDuThiProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@CapDoDuTuyen", ReadProperty(CapDoDuTuyenProperty) == null ? (object)DBNull.Value : ReadProperty(CapDoDuTuyenProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@KhoaDuTuyen", ReadProperty(KhoaDuTuyenProperty) == null ? (object)DBNull.Value : ReadProperty(KhoaDuTuyenProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@NamDuTuyen", ReadProperty(NamDuTuyenProperty) == null ? (object)DBNull.Value : ReadProperty(NamDuTuyenProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@TongDiemDauVao", ReadProperty(TongDiemDauVaoProperty) == null ? (object)DBNull.Value : ReadProperty(TongDiemDauVaoProperty).Value).DbType = DbType.Double;
                    cmd.Parameters.AddWithValue("@TotNghiepLT", ReadProperty(TotNghiepLTProperty) == null ? (object)DBNull.Value : ReadProperty(TotNghiepLTProperty).Value).DbType = DbType.Double;
                    cmd.Parameters.AddWithValue("@TotNghiepTH", ReadProperty(TotNghiepTHProperty) == null ? (object)DBNull.Value : ReadProperty(TotNghiepTHProperty).Value).DbType = DbType.Double;
                    cmd.Parameters.AddWithValue("@BaoVeLuanVan", ReadProperty(BaoVeLuanVanProperty) == null ? (object)DBNull.Value : ReadProperty(BaoVeLuanVanProperty).Value).DbType = DbType.Double;
                    cmd.Parameters.AddWithValue("@NoiSinh", ReadProperty(NoiSinhProperty) == null ? (object)DBNull.Value : ReadProperty(NoiSinhProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@MienThi1", ReadProperty(MienThi1Property) == null ? (object)DBNull.Value : ReadProperty(MienThi1Property)).DbType = DbType.Boolean;
                    cmd.Parameters.AddWithValue("@MienThi2", ReadProperty(MienThi2Property) == null ? (object)DBNull.Value : ReadProperty(MienThi2Property)).DbType = DbType.Boolean;
                    cmd.Parameters.AddWithValue("@MienThi3", ReadProperty(MienThi3Property) == null ? (object)DBNull.Value : ReadProperty(MienThi3Property)).DbType = DbType.Boolean;
                    cmd.Parameters.AddWithValue("@MienThi4", ReadProperty(MienThi4Property) == null ? (object)DBNull.Value : ReadProperty(MienThi4Property)).DbType = DbType.Boolean;
                    cmd.Parameters.AddWithValue("@MienThi5", ReadProperty(MienThi5Property) == null ? (object)DBNull.Value : ReadProperty(MienThi5Property)).DbType = DbType.Boolean;
                    var args = new DataPortalHookArgs(cmd);
                    OnInsertPre(args);
                    cmd.ExecuteNonQuery();
                    OnInsertPost(args);
                    LoadProperty(IdProperty, (int) cmd.Parameters["@id"].Value);
                }
                ctx.Commit();
            }
        }

        /// <summary>
        /// Updates in the database all changes made to the <see cref="DT_ChinhQuy_HocVien"/> object.
        /// </summary>
        protected override void DataPortal_Update()
        {
            using (var ctx = TransactionManager<SqlConnection, SqlTransaction>.GetManager("Connection"))
            {
                using (var cmd = new SqlCommand("dbo.DT_ChinhQuy_HocVien_update", ctx.Connection))
                {
                    cmd.Transaction = ctx.Transaction;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@id", ReadProperty(IdProperty)).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@HoTen", ReadProperty(HoTenProperty) == null ? (object)DBNull.Value : ReadProperty(HoTenProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@NgaySinh", ReadProperty(NgaySinhProperty).DBValue).DbType = DbType.DateTime;
                    cmd.Parameters.AddWithValue("@SoCMT", ReadProperty(SoCMTProperty) == null ? (object)DBNull.Value : ReadProperty(SoCMTProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@MaHocVien", ReadProperty(MaHocVienProperty) == null ? (object)DBNull.Value : ReadProperty(MaHocVienProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@GioiTinh", ReadProperty(GioiTinhProperty) == null ? (object)DBNull.Value : ReadProperty(GioiTinhProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@idTrinhDo", ReadProperty(IdTrinhDoProperty) == null ? (object)DBNull.Value : ReadProperty(IdTrinhDoProperty).Value).DbType = DbType.Int64;
                    cmd.Parameters.AddWithValue("@idChuyenNganh", ReadProperty(IdChuyenNganhProperty) == null ? (object)DBNull.Value : ReadProperty(IdChuyenNganhProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@TruongTotNghiep", ReadProperty(TruongTotNghiepProperty) == null ? (object)DBNull.Value : ReadProperty(TruongTotNghiepProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@NamTotNghiep", ReadProperty(NamTotNghiepProperty) == null ? (object)DBNull.Value : ReadProperty(NamTotNghiepProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@SoBang", ReadProperty(SoBangProperty) == null ? (object)DBNull.Value : ReadProperty(SoBangProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@NoiCongTac", ReadProperty(NoiCongTacProperty) == null ? (object)DBNull.Value : ReadProperty(NoiCongTacProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@DiaChiNhaRieng", ReadProperty(DiaChiNhaRiengProperty) == null ? (object)DBNull.Value : ReadProperty(DiaChiNhaRiengProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@DienThoaiNhaRieng", ReadProperty(DienThoaiNhaRiengProperty) == null ? (object)DBNull.Value : ReadProperty(DienThoaiNhaRiengProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@DiDong", ReadProperty(DiDongProperty) == null ? (object)DBNull.Value : ReadProperty(DiDongProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@Email", ReadProperty(EmailProperty) == null ? (object)DBNull.Value : ReadProperty(EmailProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@NgayCapCMT", ReadProperty(NgayCapCMTProperty).DBValue).DbType = DbType.DateTime;
                    cmd.Parameters.AddWithValue("@NoiCapCMT", ReadProperty(NoiCapCMTProperty) == null ? (object)DBNull.Value : ReadProperty(NoiCapCMTProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@NgayDangKi", ReadProperty(NgayDangKiProperty).DBValue).DbType = DbType.DateTime;
                    cmd.Parameters.AddWithValue("@Anh", ReadProperty(AnhProperty) == null ? (object)DBNull.Value : ReadProperty(AnhProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@DauVaoMon1", ReadProperty(DauVaoMon1Property) == null ? (object)DBNull.Value : ReadProperty(DauVaoMon1Property)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@DauVaoDiem1", ReadProperty(DauVaoDiem1Property) == null ? (object)DBNull.Value : ReadProperty(DauVaoDiem1Property).Value).DbType = DbType.Double;
                    cmd.Parameters.AddWithValue("@DauVaoMon2", ReadProperty(DauVaoMon2Property) == null ? (object)DBNull.Value : ReadProperty(DauVaoMon2Property)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@DauVaoDiem2", ReadProperty(DauVaoDiem2Property) == null ? (object)DBNull.Value : ReadProperty(DauVaoDiem2Property).Value).DbType = DbType.Double;
                    cmd.Parameters.AddWithValue("@DauVaoMon3", ReadProperty(DauVaoMon3Property) == null ? (object)DBNull.Value : ReadProperty(DauVaoMon3Property)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@DauVaoDiem3", ReadProperty(DauVaoDiem3Property) == null ? (object)DBNull.Value : ReadProperty(DauVaoDiem3Property).Value).DbType = DbType.Double;
                    cmd.Parameters.AddWithValue("@DauVaoMon4", ReadProperty(DauVaoMon4Property) == null ? (object)DBNull.Value : ReadProperty(DauVaoMon4Property)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@DauVaoDiem4", ReadProperty(DauVaoDiem4Property) == null ? (object)DBNull.Value : ReadProperty(DauVaoDiem4Property).Value).DbType = DbType.Double;
                    cmd.Parameters.AddWithValue("@DauVaoMon5", ReadProperty(DauVaoMon5Property) == null ? (object)DBNull.Value : ReadProperty(DauVaoMon5Property)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@DauVaoDiem5", ReadProperty(DauVaoDiem5Property) == null ? (object)DBNull.Value : ReadProperty(DauVaoDiem5Property).Value).DbType = DbType.Double;
                    cmd.Parameters.AddWithValue("@DauVaoMon6", ReadProperty(DauVaoMon6Property) == null ? (object)DBNull.Value : ReadProperty(DauVaoMon6Property)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@DauVaoDiem6", ReadProperty(DauVaoDiem6Property) == null ? (object)DBNull.Value : ReadProperty(DauVaoDiem6Property).Value).DbType = DbType.Double;
                    cmd.Parameters.AddWithValue("@DanToc", ReadProperty(DanTocProperty) == null ? (object)DBNull.Value : ReadProperty(DanTocProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@TonGiao", ReadProperty(TonGiaoProperty) == null ? (object)DBNull.Value : ReadProperty(TonGiaoProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@QuanHeGiaDinh", ReadProperty(QuanHeGiaDinhProperty) == null ? (object)DBNull.Value : ReadProperty(QuanHeGiaDinhProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@DuocPhepThiLai", ReadProperty(DuocPhepThiLaiProperty) == null ? (object)DBNull.Value : ReadProperty(DuocPhepThiLaiProperty).Value).DbType = DbType.Boolean;
                    cmd.Parameters.AddWithValue("@LyDoKhongDuocThiLai", ReadProperty(LyDoKhongDuocThiLaiProperty) == null ? (object)DBNull.Value : ReadProperty(LyDoKhongDuocThiLaiProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@LastEdited_User", ReadProperty(LastEdited_UserProperty) == null ? (object)DBNull.Value : ReadProperty(LastEdited_UserProperty).Value).DbType = DbType.Int64;
                    cmd.Parameters.AddWithValue("@LastEdited_Date", ReadProperty(LastEdited_DateProperty).DBValue).DbType = DbType.DateTime;
                    cmd.Parameters.AddWithValue("@backup01", ReadProperty(Backup01Property) == null ? (object)DBNull.Value : ReadProperty(Backup01Property)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@backup02", ReadProperty(Backup02Property) == null ? (object)DBNull.Value : ReadProperty(Backup02Property)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@backup03", ReadProperty(Backup03Property) == null ? (object)DBNull.Value : ReadProperty(Backup03Property)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@backup04", ReadProperty(Backup04Property) == null ? (object)DBNull.Value : ReadProperty(Backup04Property)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@backup05", ReadProperty(Backup05Property) == null ? (object)DBNull.Value : ReadProperty(Backup05Property).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@backup06", ReadProperty(Backup06Property) == null ? (object)DBNull.Value : ReadProperty(Backup06Property).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@backup07", ReadProperty(Backup07Property).DBValue).DbType = DbType.DateTime;
                    cmd.Parameters.AddWithValue("@backup08", ReadProperty(Backup08Property).DBValue).DbType = DbType.DateTime;
                    cmd.Parameters.AddWithValue("@TongHocPhiPhaiDong", ReadProperty(TongHocPhiPhaiDongProperty) == null ? (object)DBNull.Value : ReadProperty(TongHocPhiPhaiDongProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@TongHocPhiDaDong", ReadProperty(TongHocPhiDaDongProperty) == null ? (object)DBNull.Value : ReadProperty(TongHocPhiDaDongProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@AllInOneHoaDon", ReadProperty(AllInOneHoaDonProperty) == null ? (object)DBNull.Value : ReadProperty(AllInOneHoaDonProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@SoLanInThe", ReadProperty(SoLanInTheProperty) == null ? (object)DBNull.Value : ReadProperty(SoLanInTheProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@SoLanInBangDiem", ReadProperty(SoLanInBangDiemProperty) == null ? (object)DBNull.Value : ReadProperty(SoLanInBangDiemProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@SoLanInBang", ReadProperty(SoLanInBangProperty) == null ? (object)DBNull.Value : ReadProperty(SoLanInBangProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@idLopHoc", ReadProperty(IdLopHocProperty) == null ? (object)DBNull.Value : ReadProperty(IdLopHocProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@SBD", ReadProperty(SBDProperty) == null ? (object)DBNull.Value : ReadProperty(SBDProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@idChuyenNganhDuThi", ReadProperty(IdChuyenNganhDuThiProperty) == null ? (object)DBNull.Value : ReadProperty(IdChuyenNganhDuThiProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@CapDoDuTuyen", ReadProperty(CapDoDuTuyenProperty) == null ? (object)DBNull.Value : ReadProperty(CapDoDuTuyenProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@KhoaDuTuyen", ReadProperty(KhoaDuTuyenProperty) == null ? (object)DBNull.Value : ReadProperty(KhoaDuTuyenProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@NamDuTuyen", ReadProperty(NamDuTuyenProperty) == null ? (object)DBNull.Value : ReadProperty(NamDuTuyenProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@TongDiemDauVao", ReadProperty(TongDiemDauVaoProperty) == null ? (object)DBNull.Value : ReadProperty(TongDiemDauVaoProperty).Value).DbType = DbType.Double;
                    cmd.Parameters.AddWithValue("@TotNghiepLT", ReadProperty(TotNghiepLTProperty) == null ? (object)DBNull.Value : ReadProperty(TotNghiepLTProperty).Value).DbType = DbType.Double;
                    cmd.Parameters.AddWithValue("@TotNghiepTH", ReadProperty(TotNghiepTHProperty) == null ? (object)DBNull.Value : ReadProperty(TotNghiepTHProperty).Value).DbType = DbType.Double;
                    cmd.Parameters.AddWithValue("@BaoVeLuanVan", ReadProperty(BaoVeLuanVanProperty) == null ? (object)DBNull.Value : ReadProperty(BaoVeLuanVanProperty).Value).DbType = DbType.Double;
                    cmd.Parameters.AddWithValue("@NoiSinh", ReadProperty(NoiSinhProperty) == null ? (object)DBNull.Value : ReadProperty(NoiSinhProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@MienThi1", ReadProperty(MienThi1Property) == null ? (object)DBNull.Value : ReadProperty(MienThi1Property)).DbType = DbType.Boolean;
                    cmd.Parameters.AddWithValue("@MienThi2", ReadProperty(MienThi2Property) == null ? (object)DBNull.Value : ReadProperty(MienThi2Property)).DbType = DbType.Boolean;
                    cmd.Parameters.AddWithValue("@MienThi3", ReadProperty(MienThi3Property) == null ? (object)DBNull.Value : ReadProperty(MienThi3Property)).DbType = DbType.Boolean;
                    cmd.Parameters.AddWithValue("@MienThi4", ReadProperty(MienThi4Property) == null ? (object)DBNull.Value : ReadProperty(MienThi4Property)).DbType = DbType.Boolean;
                    cmd.Parameters.AddWithValue("@MienThi5", ReadProperty(MienThi5Property) == null ? (object)DBNull.Value : ReadProperty(MienThi5Property)).DbType = DbType.Boolean;
                    var args = new DataPortalHookArgs(cmd);
                    OnUpdatePre(args);
                    cmd.ExecuteNonQuery();
                    OnUpdatePost(args);
                }
                ctx.Commit();
            }
        }

        /// <summary>
        /// Self deletes the <see cref="DT_ChinhQuy_HocVien"/> object.
        /// </summary>
        protected override void DataPortal_DeleteSelf()
        {
            DataPortal_Delete(Id);
        }

        /// <summary>
        /// Deletes the <see cref="DT_ChinhQuy_HocVien"/> object from database.
        /// </summary>
        /// <param name="id">The delete criteria.</param>
        protected void DataPortal_Delete(int id)
        {
            using (var ctx = TransactionManager<SqlConnection, SqlTransaction>.GetManager("Connection"))
            {
                using (var cmd = new SqlCommand("dbo.DT_ChinhQuy_HocVien_delete", ctx.Connection))
                {
                    cmd.Transaction = ctx.Transaction;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@id", id).DbType = DbType.Int32;
                    var args = new DataPortalHookArgs(cmd, id);
                    OnDeletePre(args);
                    cmd.ExecuteNonQuery();
                    OnDeletePost(args);
                }
                ctx.Commit();
            }
        }

        #endregion

        #region Pseudo Events

        /// <summary>
        /// Occurs after setting all defaults for object creation.
        /// </summary>
        partial void OnCreate(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Delete, after setting query parameters and before the delete operation.
        /// </summary>
        partial void OnDeletePre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Delete, after the delete operation, before Commit().
        /// </summary>
        partial void OnDeletePost(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after setting query parameters and before the fetch operation.
        /// </summary>
        partial void OnFetchPre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after the fetch operation (object or collection is fully loaded and set up).
        /// </summary>
        partial void OnFetchPost(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after the low level fetch operation, before the data reader is destroyed.
        /// </summary>
        partial void OnFetchRead(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after setting query parameters and before the update operation.
        /// </summary>
        partial void OnUpdatePre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Insert, after the update operation, before setting back row identifiers (RowVersion) and Commit().
        /// </summary>
        partial void OnUpdatePost(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Insert, after setting query parameters and before the insert operation.
        /// </summary>
        partial void OnInsertPre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Insert, after the insert operation, before setting back row identifiers (ID and RowVersion) and Commit().
        /// </summary>
        partial void OnInsertPost(DataPortalHookArgs args);

        #endregion

    }
}
