//  This file was generated by CSLA Object Generator - CslaGenFork v4.3.0
//
// Filename:    HC_GiangDuong_PhieuDangKi_Info
// ObjectType:  HC_GiangDuong_PhieuDangKi_Info
// CSLAType:    EditableChild

using System;
using System.Data;
using System.Data.SqlClient;
using Csla;
using Csla.Data;
using NETLINK.LIB;
namespace ModuleHanhChinh.LIB
{

    /// <summary>
    /// HC_GiangDuong_PhieuDangKi_Info (editable child object).<br/>
    /// This is a generated base class of <see cref="HC_GiangDuong_PhieuDangKi_Info"/> business object.
    /// </summary>
    /// <remarks>
    /// This class is an item of <see cref="HC_GiangDuong_PhieuDangKi_Coll"/> collection.
    /// </remarks>
    [Serializable]
    public partial class HC_GiangDuong_PhieuDangKi_Info : BusinessBase<HC_GiangDuong_PhieuDangKi_Info>
    {

        #region Static Fields

        private static int _lastID;

        #endregion

        #region Business Properties

        /// <summary>
        /// Maintains metadata about <see cref="ID"/> property.
        /// </summary>
        public static readonly PropertyInfo<int> IDProperty = RegisterProperty<int>(p => p.ID, "ID");
        /// <summary>
        /// Gets the ID.
        /// </summary>
        /// <value>The ID.</value>
        public int ID
        {
            get { return GetProperty(IDProperty); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="IdPhong"/> property.
        /// </summary>
        public static readonly PropertyInfo<int?> IdPhongProperty = RegisterProperty<int?>(p => p.IdPhong, "Id Phong");
        /// <summary>
        /// Gets or sets the Id Phong.
        /// </summary>
        /// <value>The Id Phong.</value>
        public int? IdPhong
        {
            get { return GetProperty(IdPhongProperty); }
            set { SetProperty(IdPhongProperty, value); }
        }
        /// <summary>
        /// Maintains metadata about <see cref="NoiDungSuDung"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> TenPhongProperty = RegisterProperty<string>(p => p.TenPhong, "Ten Phong");
        /// <summary>
        /// Gets or sets the Noi Dung Su Dung.
        /// </summary>
        /// <value>The Noi Dung Su Dung.</value>
        public string TenPhong
        {
            get { return GetProperty(TenPhongProperty); }
            set { SetProperty(TenPhongProperty, value); }
        }
        /// <summary>
        /// Maintains metadata about <see cref="NoiDungSuDung"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> MaPhongProperty = RegisterProperty<string>(p => p.MaPhong, "Ma Phong");
        /// <summary>
        /// Gets or sets the Noi Dung Su Dung.
        /// </summary>
        /// <value>The Noi Dung Su Dung.</value>
        public string MaPhong
        {
            get { return GetProperty(MaPhongProperty); }
            set { SetProperty(MaPhongProperty, value); }
        }
        /// <summary>
        /// Maintains metadata about <see cref="NoiDungSuDung"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> NoiDungSuDungProperty = RegisterProperty<string>(p => p.NoiDungSuDung, "Noi Dung Su Dung");
        /// <summary>
        /// Gets or sets the Noi Dung Su Dung.
        /// </summary>
        /// <value>The Noi Dung Su Dung.</value>
        public string NoiDungSuDung
        {
            get { return GetProperty(NoiDungSuDungProperty); }
            set { SetProperty(NoiDungSuDungProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="ChuTri"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> ChuTriProperty = RegisterProperty<string>(p => p.ChuTri, "Chu Tri");
        /// <summary>
        /// Gets or sets the Chu Tri.
        /// </summary>
        /// <value>The Chu Tri.</value>
        public string ChuTri
        {
            get { return GetProperty(ChuTriProperty); }
            set { SetProperty(ChuTriProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="GioBatDau"/> property.
        /// </summary>
        public static readonly PropertyInfo<SmartDate> GioBatDauProperty = RegisterProperty<SmartDate>(p => p.GioBatDau, "Gio Bat Dau");
        /// <summary>
        /// Gets or sets the Gio Bat Dau.
        /// </summary>
        /// <value>The Gio Bat Dau.</value>
        public SmartDate GioBatDau
        {
            get { return GetProperty(GioBatDauProperty); }
            set { SetProperty(GioBatDauProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="GioKetThuc"/> property.
        /// </summary>
        public static readonly PropertyInfo<SmartDate> GioKetThucProperty = RegisterProperty<SmartDate>(p => p.GioKetThuc, "Gio Ket Thuc");
        /// <summary>
        /// Gets or sets the Gio Ket Thuc.
        /// </summary>
        /// <value>The Gio Ket Thuc.</value>
        public SmartDate GioKetThuc
        {
            get { return GetProperty(GioKetThucProperty); }
            set { SetProperty(GioKetThucProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="SoNguoiThamGia"/> property.
        /// </summary>
        public static readonly PropertyInfo<int?> SoNguoiThamGiaProperty = RegisterProperty<int?>(p => p.SoNguoiThamGia, "So Nguoi Tham Gia");
        /// <summary>
        /// Gets or sets the So Nguoi Tham Gia.
        /// </summary>
        /// <value>The So Nguoi Tham Gia.</value>
        public int? SoNguoiThamGia
        {
            get { return GetProperty(SoNguoiThamGiaProperty); }
            set { SetProperty(SoNguoiThamGiaProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="NgayGuiPhieu"/> property.
        /// </summary>
        public static readonly PropertyInfo<SmartDate> NgayGuiPhieuProperty = RegisterProperty<SmartDate>(p => p.NgayGuiPhieu, "Ngay Gui Phieu");
        /// <summary>
        /// Gets or sets the Ngay Gui Phieu.
        /// </summary>
        /// <value>The Ngay Gui Phieu.</value>
        public string NgayGuiPhieu
        {
            get { return GetPropertyConvert<SmartDate, String>(NgayGuiPhieuProperty); }
            set { SetPropertyConvert<SmartDate, String>(NgayGuiPhieuProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="NuocChoGiangVien"/> property.
        /// </summary>
        public static readonly PropertyInfo<bool?> NuocChoGiangVienProperty = RegisterProperty<bool?>(p => p.NuocChoGiangVien, "Nuoc Cho Giang Vien");
        /// <summary>
        /// Gets or sets the Nuoc Cho Giang Vien.
        /// </summary>
        /// <value><c>true</c> if Nuoc Cho Giang Vien; <c>false</c> if not Nuoc Cho Giang Vien; otherwise, <c>null</c>.</value>
        public bool? NuocChoGiangVien
        {
            get { return GetProperty(NuocChoGiangVienProperty); }
            set { SetProperty(NuocChoGiangVienProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="NuocChoHocVien"/> property.
        /// </summary>
        public static readonly PropertyInfo<bool?> NuocChoHocVienProperty = RegisterProperty<bool?>(p => p.NuocChoHocVien, "Nuoc Cho Hoc Vien");
        /// <summary>
        /// Gets or sets the Nuoc Cho Hoc Vien.
        /// </summary>
        /// <value><c>true</c> if Nuoc Cho Hoc Vien; <c>false</c> if not Nuoc Cho Hoc Vien; otherwise, <c>null</c>.</value>
        public bool? NuocChoHocVien
        {
            get { return GetProperty(NuocChoHocVienProperty); }
            set { SetProperty(NuocChoHocVienProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="HoaTuoi"/> property.
        /// </summary>
        public static readonly PropertyInfo<bool?> HoaTuoiProperty = RegisterProperty<bool?>(p => p.HoaTuoi, "Hoa Tuoi");
        /// <summary>
        /// Gets or sets the Hoa Tuoi.
        /// </summary>
        /// <value><c>true</c> if Hoa Tuoi; <c>false</c> if not Hoa Tuoi; otherwise, <c>null</c>.</value>
        public bool? HoaTuoi
        {
            get { return GetProperty(HoaTuoiProperty); }
            set { SetProperty(HoaTuoiProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="TraiCay"/> property.
        /// </summary>
        public static readonly PropertyInfo<bool?> TraiCayProperty = RegisterProperty<bool?>(p => p.TraiCay, "Trai Cay");
        /// <summary>
        /// Gets or sets the Trai Cay.
        /// </summary>
        /// <value><c>true</c> if Trai Cay; <c>false</c> if not Trai Cay; otherwise, <c>null</c>.</value>
        public bool? TraiCay
        {
            get { return GetProperty(TraiCayProperty); }
            set { SetProperty(TraiCayProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="BanhKeo"/> property.
        /// </summary>
        public static readonly PropertyInfo<bool?> BanhKeoProperty = RegisterProperty<bool?>(p => p.BanhKeo, "Banh Keo");
        /// <summary>
        /// Gets or sets the Banh Keo.
        /// </summary>
        /// <value><c>true</c> if Banh Keo; <c>false</c> if not Banh Keo; otherwise, <c>null</c>.</value>
        public bool? BanhKeo
        {
            get { return GetProperty(BanhKeoProperty); }
            set { SetProperty(BanhKeoProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="KhanTraiBan"/> property.
        /// </summary>
        public static readonly PropertyInfo<bool?> KhanTraiBanProperty = RegisterProperty<bool?>(p => p.KhanTraiBan, "Khan Trai Ban");
        /// <summary>
        /// Gets or sets the Khan Trai Ban.
        /// </summary>
        /// <value><c>true</c> if Khan Trai Ban; <c>false</c> if not Khan Trai Ban; otherwise, <c>null</c>.</value>
        public bool? KhanTraiBan
        {
            get { return GetProperty(KhanTraiBanProperty); }
            set { SetProperty(KhanTraiBanProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="PhongHoiTruong"/> property.
        /// </summary>
        public static readonly PropertyInfo<bool?> PhongHoiTruongProperty = RegisterProperty<bool?>(p => p.PhongHoiTruong, "Phong Hoi Truong");
        /// <summary>
        /// Gets or sets the Phong Hoi Truong.
        /// </summary>
        /// <value><c>true</c> if Phong Hoi Truong; <c>false</c> if not Phong Hoi Truong; otherwise, <c>null</c>.</value>
        public bool? PhongHoiTruong
        {
            get { return GetProperty(PhongHoiTruongProperty); }
            set { SetProperty(PhongHoiTruongProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="Micro"/> property.
        /// </summary>
        public static readonly PropertyInfo<bool?> MicroProperty = RegisterProperty<bool?>(p => p.Micro, "Micro");
        /// <summary>
        /// Gets or sets the Micro.
        /// </summary>
        /// <value><c>true</c> if Micro; <c>false</c> if not Micro; otherwise, <c>null</c>.</value>
        public bool? Micro
        {
            get { return GetProperty(MicroProperty); }
            set { SetProperty(MicroProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="ManChieu"/> property.
        /// </summary>
        public static readonly PropertyInfo<bool?> ManChieuProperty = RegisterProperty<bool?>(p => p.ManChieu, "Man Chieu");
        /// <summary>
        /// Gets or sets the Man Chieu.
        /// </summary>
        /// <value><c>true</c> if Man Chieu; <c>false</c> if not Man Chieu; otherwise, <c>null</c>.</value>
        public bool? ManChieu
        {
            get { return GetProperty(ManChieuProperty); }
            set { SetProperty(ManChieuProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="MayChieu"/> property.
        /// </summary>
        public static readonly PropertyInfo<bool?> MayChieuProperty = RegisterProperty<bool?>(p => p.MayChieu, "May Chieu");
        /// <summary>
        /// Gets or sets the May Chieu.
        /// </summary>
        /// <value><c>true</c> if May Chieu; <c>false</c> if not May Chieu; otherwise, <c>null</c>.</value>
        public bool? MayChieu
        {
            get { return GetProperty(MayChieuProperty); }
            set { SetProperty(MayChieuProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="BangButViet"/> property.
        /// </summary>
        public static readonly PropertyInfo<bool?> BangButVietProperty = RegisterProperty<bool?>(p => p.BangButViet, "Bang But Viet");
        /// <summary>
        /// Gets or sets the Bang But Viet.
        /// </summary>
        /// <value><c>true</c> if Bang But Viet; <c>false</c> if not Bang But Viet; otherwise, <c>null</c>.</value>
        public bool? BangButViet
        {
            get { return GetProperty(BangButVietProperty); }
            set { SetProperty(BangButVietProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="ButLazer"/> property.
        /// </summary>
        public static readonly PropertyInfo<bool?> ButLazerProperty = RegisterProperty<bool?>(p => p.ButLazer, "But Lazer");
        /// <summary>
        /// Gets or sets the But Lazer.
        /// </summary>
        /// <value><c>true</c> if But Lazer; <c>false</c> if not But Lazer; otherwise, <c>null</c>.</value>
        public bool? ButLazer
        {
            get { return GetProperty(ButLazerProperty); }
            set { SetProperty(ButLazerProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="Khac"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> KhacProperty = RegisterProperty<string>(p => p.Khac, "Khac");
        /// <summary>
        /// Gets or sets the Khac.
        /// </summary>
        /// <value>The Khac.</value>
        public string Khac
        {
            get { return GetProperty(KhacProperty); }
            set { SetProperty(KhacProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="NguoiGuiYeuCau"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> NguoiGuiYeuCauProperty = RegisterProperty<string>(p => p.NguoiGuiYeuCau, "Nguoi Gui Yeu Cau");
        /// <summary>
        /// Gets or sets the Nguoi Gui Yeu Cau.
        /// </summary>
        /// <value>The Nguoi Gui Yeu Cau.</value>
        public string NguoiGuiYeuCau
        {
            get { return GetProperty(NguoiGuiYeuCauProperty); }
            set { SetProperty(NguoiGuiYeuCauProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="idNguoiGuiYeuCau"/> property.
        /// </summary>
        public static readonly PropertyInfo<Int64?> IdNguoiGuiYeuCauProperty = RegisterProperty<Int64?>(p => p.IdNguoiGuiYeuCau, "id Nguoi Gui Yeu Cau");
        /// <summary>
        /// Gets or sets the id Nguoi Gui Yeu Cau.
        /// </summary>
        /// <value>The id Nguoi Gui Yeu Cau.</value>
        public Int64? IdNguoiGuiYeuCau
        {
            get { return GetProperty(IdNguoiGuiYeuCauProperty); }
            set { SetProperty(IdNguoiGuiYeuCauProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="DaDuocDuyet"/> property.
        /// </summary>
        public static readonly PropertyInfo<bool?> DaDuocDuyetProperty = RegisterProperty<bool?>(p => p.DaDuocDuyet, "Da Duoc Duyet");
        /// <summary>
        /// Gets or sets the Da Duoc Duyet.
        /// </summary>
        /// <value><c>true</c> if Da Duoc Duyet; <c>false</c> if not Da Duoc Duyet; otherwise, <c>null</c>.</value>
        public bool? DaDuocDuyet
        {
            get { return GetProperty(DaDuocDuyetProperty); }
            set { SetProperty(DaDuocDuyetProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="idUserDuyet"/> property.
        /// </summary>
        public static readonly PropertyInfo<Int64?> IdUserDuyetProperty = RegisterProperty<Int64?>(p => p.IdUserDuyet, "id User Duyet");
        /// <summary>
        /// Gets or sets the id User Duyet.
        /// </summary>
        /// <value>The id User Duyet.</value>
        public Int64? IdUserDuyet
        {
            get { return GetProperty(IdUserDuyetProperty); }
            set { SetProperty(IdUserDuyetProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="LastEdited_UserID"/> property.
        /// </summary>
        public static readonly PropertyInfo<Int64?> LastEdited_UserIDProperty = RegisterProperty<Int64?>(p => p.LastEdited_UserID, "Last Edited User ID");
        /// <summary>
        /// Gets or sets the Last Edited User ID.
        /// </summary>
        /// <value>The Last Edited User ID.</value>
        public Int64? LastEdited_UserID
        {
            get { return GetProperty(LastEdited_UserIDProperty); }
            set { SetProperty(LastEdited_UserIDProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="LastEdited_Date"/> property.
        /// </summary>
        public static readonly PropertyInfo<SmartDate> LastEdited_DateProperty = RegisterProperty<SmartDate>(p => p.LastEdited_Date, "Last Edited Date");
        /// <summary>
        /// Gets or sets the Last Edited Date.
        /// </summary>
        /// <value>The Last Edited Date.</value>
        public string LastEdited_Date
        {
            get { return GetPropertyConvert<SmartDate, String>(LastEdited_DateProperty); }
            set { SetPropertyConvert<SmartDate, String>(LastEdited_DateProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="TrangThaiDuyet"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> TrangThaiDuyetProperty = RegisterProperty<string>(p => p.TrangThaiDuyet, "Trang Thai Duyet");
        /// <summary>
        /// Gets or sets the Trang Thai Duyet.
        /// </summary>
        /// <value>The Trang Thai Duyet.</value>
        public string TrangThaiDuyet
        {
            get { return GetProperty(TrangThaiDuyetProperty); }
            set { SetProperty(TrangThaiDuyetProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="NgayDuyet"/> property.
        /// </summary>
        public static readonly PropertyInfo<SmartDate> NgayDuyetProperty = RegisterProperty<SmartDate>(p => p.NgayDuyet, "Ngay Duyet");
        /// <summary>
        /// Gets or sets the Ngay Duyet.
        /// </summary>
        /// <value>The Ngay Duyet.</value>
        public string NgayDuyet
        {
            get { return GetPropertyConvert<SmartDate, String>(NgayDuyetProperty); }
            set { SetPropertyConvert<SmartDate, String>(NgayDuyetProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="LyDoDuyet"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> LyDoDuyetProperty = RegisterProperty<string>(p => p.LyDoDuyet, "Ly Do Duyet");
        /// <summary>
        /// Gets or sets the Ly Do Duyet.
        /// </summary>
        /// <value>The Ly Do Duyet.</value>
        public string LyDoDuyet
        {
            get { return GetProperty(LyDoDuyetProperty); }
            set { SetProperty(LyDoDuyetProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="LuuVet"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> LuuVetProperty = RegisterProperty<string>(p => p.LuuVet, "Luu Vet");
        /// <summary>
        /// Gets or sets the Luu Vet.
        /// </summary>
        /// <value>The Luu Vet.</value>
        public string LuuVet
        {
            get { return GetProperty(LuuVetProperty); }
            set { SetProperty(LuuVetProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="NgayBatDau"/> property.
        /// </summary>
        public static readonly PropertyInfo<SmartDate> NgayBatDauProperty = RegisterProperty<SmartDate>(p => p.NgayBatDau, "Ngay Bat Dau");
        /// <summary>
        /// Gets or sets the Ngay Bat Dau.
        /// </summary>
        /// <value>The Ngay Bat Dau.</value>
        public string NgayBatDau
        {
            get { return GetPropertyConvert<SmartDate, String>(NgayBatDauProperty); }
            set { SetPropertyConvert<SmartDate, String>(NgayBatDauProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="NgayKetThuc"/> property.
        /// </summary>
        public static readonly PropertyInfo<SmartDate> NgayKetThucProperty = RegisterProperty<SmartDate>(p => p.NgayKetThuc, "Ngay Ket Thuc");
        /// <summary>
        /// Gets or sets the Ngay Ket Thuc.
        /// </summary>
        /// <value>The Ngay Ket Thuc.</value>
        public string NgayKetThuc
        {
            get { return GetPropertyConvert<SmartDate, String>(NgayKetThucProperty); }
            set { SetPropertyConvert<SmartDate, String>(NgayKetThucProperty, value); }
        }
        public DateTime DateNgayKetThuc
        {
            get { return GetProperty(NgayKetThucProperty); }
        }
        public DateTime DateNgayBatDau
        {
            get { return GetProperty(NgayBatDauProperty); }
        }
        public DateTime DateNgayDuyet
        {
            get { return GetProperty(NgayDuyetProperty); }
        }
        public DateTime DateNgayGuiPhieu
        {
            get { return GetProperty(NgayGuiPhieuProperty); }
        }
        #endregion

        #region Factory Methods

        /// <summary>
        /// Factory method. Creates a new <see cref="HC_GiangDuong_PhieuDangKi_Info"/> object.
        /// </summary>
        /// <returns>A reference to the created <see cref="HC_GiangDuong_PhieuDangKi_Info"/> object.</returns>
        internal static HC_GiangDuong_PhieuDangKi_Info NewHC_GiangDuong_PhieuDangKi_Info()
        {
            return DataPortal.CreateChild<HC_GiangDuong_PhieuDangKi_Info>();
        }

        /// <summary>
        /// Factory method. Asynchronously creates a new <see cref="HC_GiangDuong_PhieuDangKi_Info"/> object.
        /// </summary>
        /// <param name="callback">The completion callback method.</param>
        internal static void NewHC_GiangDuong_PhieuDangKi_Info(EventHandler<DataPortalResult<HC_GiangDuong_PhieuDangKi_Info>> callback)
        {
            DataPortal.BeginCreate<HC_GiangDuong_PhieuDangKi_Info>(callback);
        }

        /// <summary>
        /// Factory method. Loads a <see cref="HC_GiangDuong_PhieuDangKi_Info"/> object from the given SafeDataReader.
        /// </summary>
        /// <param name="dr">The SafeDataReader to use.</param>
        /// <returns>A reference to the fetched <see cref="HC_GiangDuong_PhieuDangKi_Info"/> object.</returns>
        internal static HC_GiangDuong_PhieuDangKi_Info GetHC_GiangDuong_PhieuDangKi_Info(SafeDataReader dr)
        {
            HC_GiangDuong_PhieuDangKi_Info obj = new HC_GiangDuong_PhieuDangKi_Info();
            // show the framework that this is a child object
            obj.MarkAsChild();
            obj.Fetch(dr);
            obj.MarkOld();
            // check all object rules and property rules
            obj.BusinessRules.CheckRules();
            return obj;
        }

        #endregion

        #region Constructor

        /// <summary>
        /// Initializes a new instance of the <see cref="HC_GiangDuong_PhieuDangKi_Info"/> class.
        /// </summary>
        /// <remarks> Do not use to create a Csla object. Use factory methods instead.</remarks>
        private HC_GiangDuong_PhieuDangKi_Info()
        {
            // Prevent direct creation

            // show the framework that this is a child object
            MarkAsChild();
        }

        #endregion

        #region Data Access

        /// <summary>
        /// Loads default values for the <see cref="HC_GiangDuong_PhieuDangKi_Info"/> object properties.
        /// </summary>
        [Csla.RunLocal]
        protected override void Child_Create()
        {
            LoadProperty(IDProperty, System.Threading.Interlocked.Decrement(ref _lastID));
            LoadProperty(NoiDungSuDungProperty, null);
            LoadProperty(ChuTriProperty, null);
            LoadProperty(GioBatDauProperty, null);
            LoadProperty(GioKetThucProperty, null);
            LoadProperty(NgayGuiPhieuProperty, null);
            LoadProperty(KhacProperty, null);
            LoadProperty(NguoiGuiYeuCauProperty, null);
            LoadProperty(MaPhongProperty, null);
            LoadProperty(TenPhongProperty, null);
			LoadProperty(LastEdited_DateProperty, null);
            LoadProperty(TrangThaiDuyetProperty, null);
            LoadProperty(NgayDuyetProperty, null);
            LoadProperty(LyDoDuyetProperty, null);
            LoadProperty(LuuVetProperty, null);
            LoadProperty(NgayBatDauProperty, null);
            LoadProperty(NgayKetThucProperty, null);
            var args = new DataPortalHookArgs();
            OnCreate(args);
            base.Child_Create();
        }

        /// <summary>
        /// Loads a <see cref="HC_GiangDuong_PhieuDangKi_Info"/> object from the given SafeDataReader.
        /// </summary>
        /// <param name="dr">The SafeDataReader to use.</param>
        private void Fetch(SafeDataReader dr)
        {
            // Value properties
            LoadProperty(IDProperty, dr.GetInt32("ID"));
            LoadProperty(IdPhongProperty, dr.GetInt32("IdPhong"));
            LoadProperty(NoiDungSuDungProperty, dr.GetString("NoiDungSuDung"));
            LoadProperty(ChuTriProperty, dr.GetString("ChuTri"));
            LoadProperty(GioBatDauProperty, dr.GetDateTime("GioBatDau"));
            LoadProperty(GioKetThucProperty, dr.GetDateTime("GioKetThuc"));
            LoadProperty(SoNguoiThamGiaProperty, dr.GetInt32("SoNguoiThamGia"));
      
            LoadProperty(NgayGuiPhieuProperty, dr.GetDateTime("NgayGuiPhieu"));
            LoadProperty(NuocChoGiangVienProperty, dr.GetBoolean("NuocChoGiangVien"));
            LoadProperty(NuocChoHocVienProperty, dr.GetBoolean("NuocChoHocVien"));
            LoadProperty(HoaTuoiProperty, dr.GetBoolean("HoaTuoi"));
            LoadProperty(TraiCayProperty, dr.GetBoolean("TraiCay"));
            LoadProperty(BanhKeoProperty, dr.GetBoolean("BanhKeo"));
            LoadProperty(KhanTraiBanProperty, dr.GetBoolean("KhanTraiBan"));
            LoadProperty(PhongHoiTruongProperty, dr.GetBoolean("PhongHoiTruong"));
            LoadProperty(MicroProperty, dr.GetBoolean("Micro"));
            LoadProperty(ManChieuProperty, dr.GetBoolean("ManChieu"));
            LoadProperty(MayChieuProperty, dr.GetBoolean("MayChieu"));
            LoadProperty(BangButVietProperty, dr.GetBoolean("BangButViet"));
            LoadProperty(ButLazerProperty, dr.GetBoolean("ButLazer"));
            LoadProperty(KhacProperty, dr.GetString("Khac"));
            LoadProperty(NguoiGuiYeuCauProperty, dr.GetString("NguoiGuiYeuCau"));
            LoadProperty(IdNguoiGuiYeuCauProperty, dr.GetInt64("IdNguoiGuiYeuCau"));
            LoadProperty(DaDuocDuyetProperty, dr.GetBoolean("DaDuocDuyet"));
            LoadProperty(IdUserDuyetProperty, dr.GetInt64("IdUserDuyet"));
            LoadProperty(MaPhongProperty, dr.GetString("MaPhong"));
            LoadProperty(TenPhongProperty, dr.GetString("TenPhong"));
			    LoadProperty(LastEdited_UserIDProperty, dr.GetInt64("LastEdited_UserID"));
            LoadProperty(LastEdited_DateProperty, dr.GetDateTime("LastEdited_Date"));
            LoadProperty(TrangThaiDuyetProperty, dr.GetString("TrangThaiDuyet"));
            LoadProperty(NgayDuyetProperty, dr.GetSmartDate("NgayDuyet"));
            LoadProperty(LyDoDuyetProperty, dr.GetString("LyDoDuyet"));
            LoadProperty(LuuVetProperty, dr.GetString("LuuVet"));
            LoadProperty(NgayBatDauProperty, dr.GetSmartDate("NgayBatDau"));
            LoadProperty(NgayKetThucProperty, dr.GetSmartDate("NgayKetThuc"));
            var args = new DataPortalHookArgs(dr);
            OnFetchRead(args);
        }

        /// <summary>
        /// Inserts a new <see cref="HC_GiangDuong_PhieuDangKi_Info"/> object in the database.
        /// </summary>
        private void Child_Insert()
        {
            using (var ctx = TransactionManager<SqlConnection, SqlTransaction>.GetManager("Connection"))
            {
                using (var cmd = new SqlCommand("dbo.HC_GiangDuong_PhieuDangKi_Info_add", ctx.Connection))
                {
                    cmd.Transaction = ctx.Transaction;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@ID", ReadProperty(IDProperty)).Direction = ParameterDirection.Output;
                    cmd.Parameters.AddWithValue("@IdPhong", ReadProperty(IdPhongProperty) == null ? (object)DBNull.Value : ReadProperty(IdPhongProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@NoiDungSuDung", ReadProperty(NoiDungSuDungProperty) == null ? (object)DBNull.Value : ReadProperty(NoiDungSuDungProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@ChuTri", ReadProperty(ChuTriProperty) == null ? (object)DBNull.Value : ReadProperty(ChuTriProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@GioBatDau", ReadProperty(GioBatDauProperty).DBValue).DbType = DbType.DateTime;
                    cmd.Parameters.AddWithValue("@GioKetThuc", ReadProperty(GioKetThucProperty).DBValue).DbType = DbType.DateTime;
                    cmd.Parameters.AddWithValue("@SoNguoiThamGia", ReadProperty(SoNguoiThamGiaProperty) == null ? (object)DBNull.Value : ReadProperty(SoNguoiThamGiaProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@NgayGuiPhieu", ReadProperty(NgayGuiPhieuProperty).DBValue).DbType = DbType.DateTime;
                    cmd.Parameters.AddWithValue("@NuocChoGiangVien", ReadProperty(NuocChoGiangVienProperty) == null ? (object)DBNull.Value : ReadProperty(NuocChoGiangVienProperty).Value).DbType = DbType.Boolean;
                    cmd.Parameters.AddWithValue("@NuocChoHocVien", ReadProperty(NuocChoHocVienProperty) == null ? (object)DBNull.Value : ReadProperty(NuocChoHocVienProperty).Value).DbType = DbType.Boolean;
                    cmd.Parameters.AddWithValue("@HoaTuoi", ReadProperty(HoaTuoiProperty) == null ? (object)DBNull.Value : ReadProperty(HoaTuoiProperty).Value).DbType = DbType.Boolean;
                    cmd.Parameters.AddWithValue("@TraiCay", ReadProperty(TraiCayProperty) == null ? (object)DBNull.Value : ReadProperty(TraiCayProperty).Value).DbType = DbType.Boolean;
                    cmd.Parameters.AddWithValue("@BanhKeo", ReadProperty(BanhKeoProperty) == null ? (object)DBNull.Value : ReadProperty(BanhKeoProperty).Value).DbType = DbType.Boolean;
                    cmd.Parameters.AddWithValue("@KhanTraiBan", ReadProperty(KhanTraiBanProperty) == null ? (object)DBNull.Value : ReadProperty(KhanTraiBanProperty).Value).DbType = DbType.Boolean;
                    cmd.Parameters.AddWithValue("@PhongHoiTruong", ReadProperty(PhongHoiTruongProperty) == null ? (object)DBNull.Value : ReadProperty(PhongHoiTruongProperty).Value).DbType = DbType.Boolean;
                    cmd.Parameters.AddWithValue("@Micro", ReadProperty(MicroProperty) == null ? (object)DBNull.Value : ReadProperty(MicroProperty).Value).DbType = DbType.Boolean;
                    cmd.Parameters.AddWithValue("@ManChieu", ReadProperty(ManChieuProperty) == null ? (object)DBNull.Value : ReadProperty(ManChieuProperty).Value).DbType = DbType.Boolean;
                    cmd.Parameters.AddWithValue("@MayChieu", ReadProperty(MayChieuProperty) == null ? (object)DBNull.Value : ReadProperty(MayChieuProperty).Value).DbType = DbType.Boolean;
                    cmd.Parameters.AddWithValue("@BangButViet", ReadProperty(BangButVietProperty) == null ? (object)DBNull.Value : ReadProperty(BangButVietProperty).Value).DbType = DbType.Boolean;
                    cmd.Parameters.AddWithValue("@ButLazer", ReadProperty(ButLazerProperty) == null ? (object)DBNull.Value : ReadProperty(ButLazerProperty).Value).DbType = DbType.Boolean;
                    cmd.Parameters.AddWithValue("@Khac", ReadProperty(KhacProperty) == null ? (object)DBNull.Value : ReadProperty(KhacProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@NguoiGuiYeuCau", ReadProperty(NguoiGuiYeuCauProperty) == null ? (object)DBNull.Value : ReadProperty(NguoiGuiYeuCauProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@idNguoiGuiYeuCau", ReadProperty(IdNguoiGuiYeuCauProperty) == null ? (object)DBNull.Value : ReadProperty(IdNguoiGuiYeuCauProperty).Value).DbType = DbType.Int64;
                    cmd.Parameters.AddWithValue("@DaDuocDuyet", ReadProperty(DaDuocDuyetProperty) == null ? (object)DBNull.Value : ReadProperty(DaDuocDuyetProperty).Value).DbType = DbType.Boolean;
                    cmd.Parameters.AddWithValue("@idUserDuyet", ReadProperty(IdUserDuyetProperty) == null ? (object)DBNull.Value : ReadProperty(IdUserDuyetProperty).Value).DbType = DbType.Int64;
                    cmd.Parameters.AddWithValue("@LastEdited_UserID", ReadProperty(LastEdited_UserIDProperty) == null ? (object)DBNull.Value : ReadProperty(LastEdited_UserIDProperty).Value).DbType = DbType.Int64;
                    cmd.Parameters.AddWithValue("@LastEdited_Date", ReadProperty(LastEdited_DateProperty).DBValue).DbType = DbType.DateTime;
                    cmd.Parameters.AddWithValue("@TrangThaiDuyet", ReadProperty(TrangThaiDuyetProperty) == null ? (object)DBNull.Value : ReadProperty(TrangThaiDuyetProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@NgayDuyet", ReadProperty(NgayDuyetProperty).DBValue).DbType = DbType.DateTime;
                    cmd.Parameters.AddWithValue("@LyDoDuyet", ReadProperty(LyDoDuyetProperty) == null ? (object)DBNull.Value : ReadProperty(LyDoDuyetProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@LuuVet", ReadProperty(LuuVetProperty) == null ? (object)DBNull.Value : ReadProperty(LuuVetProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@NgayBatDau", ReadProperty(NgayBatDauProperty).DBValue).DbType = DbType.DateTime;
                    cmd.Parameters.AddWithValue("@NgayKetThuc", ReadProperty(NgayKetThucProperty).DBValue).DbType = DbType.DateTime;
                    var args = new DataPortalHookArgs(cmd);
                    OnInsertPre(args);
                    cmd.ExecuteNonQuery();
                    OnInsertPost(args);
                    LoadProperty(IDProperty, (int) cmd.Parameters["@ID"].Value);
                }
            }
        }

        /// <summary>
        /// Updates in the database all changes made to the <see cref="HC_GiangDuong_PhieuDangKi_Info"/> object.
        /// </summary>
        private void Child_Update()
        {
            if (!IsDirty)
                return;

            using (var ctx = TransactionManager<SqlConnection, SqlTransaction>.GetManager("Connection"))
            {
                using (var cmd = new SqlCommand("dbo.HC_GiangDuong_PhieuDangKi_Info_update", ctx.Connection))
                {
                    cmd.Transaction = ctx.Transaction;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@ID", ReadProperty(IDProperty)).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@IdPhong", ReadProperty(IdPhongProperty) == null ? (object)DBNull.Value : ReadProperty(IdPhongProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@NoiDungSuDung", ReadProperty(NoiDungSuDungProperty) == null ? (object)DBNull.Value : ReadProperty(NoiDungSuDungProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@ChuTri", ReadProperty(ChuTriProperty) == null ? (object)DBNull.Value : ReadProperty(ChuTriProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@GioBatDau", ReadProperty(GioBatDauProperty).DBValue).DbType = DbType.DateTime;
                    cmd.Parameters.AddWithValue("@GioKetThuc", ReadProperty(GioKetThucProperty).DBValue).DbType = DbType.DateTime;
                    cmd.Parameters.AddWithValue("@SoNguoiThamGia", ReadProperty(SoNguoiThamGiaProperty) == null ? (object)DBNull.Value : ReadProperty(SoNguoiThamGiaProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@NgayGuiPhieu", ReadProperty(NgayGuiPhieuProperty).DBValue).DbType = DbType.DateTime;
                    cmd.Parameters.AddWithValue("@NuocChoGiangVien", ReadProperty(NuocChoGiangVienProperty) == null ? (object)DBNull.Value : ReadProperty(NuocChoGiangVienProperty).Value).DbType = DbType.Boolean;
                    cmd.Parameters.AddWithValue("@NuocChoHocVien", ReadProperty(NuocChoHocVienProperty) == null ? (object)DBNull.Value : ReadProperty(NuocChoHocVienProperty).Value).DbType = DbType.Boolean;
                    cmd.Parameters.AddWithValue("@HoaTuoi", ReadProperty(HoaTuoiProperty) == null ? (object)DBNull.Value : ReadProperty(HoaTuoiProperty).Value).DbType = DbType.Boolean;
                    cmd.Parameters.AddWithValue("@TraiCay", ReadProperty(TraiCayProperty) == null ? (object)DBNull.Value : ReadProperty(TraiCayProperty).Value).DbType = DbType.Boolean;
                    cmd.Parameters.AddWithValue("@BanhKeo", ReadProperty(BanhKeoProperty) == null ? (object)DBNull.Value : ReadProperty(BanhKeoProperty).Value).DbType = DbType.Boolean;
                    cmd.Parameters.AddWithValue("@KhanTraiBan", ReadProperty(KhanTraiBanProperty) == null ? (object)DBNull.Value : ReadProperty(KhanTraiBanProperty).Value).DbType = DbType.Boolean;
                    cmd.Parameters.AddWithValue("@PhongHoiTruong", ReadProperty(PhongHoiTruongProperty) == null ? (object)DBNull.Value : ReadProperty(PhongHoiTruongProperty).Value).DbType = DbType.Boolean;
                    cmd.Parameters.AddWithValue("@Micro", ReadProperty(MicroProperty) == null ? (object)DBNull.Value : ReadProperty(MicroProperty).Value).DbType = DbType.Boolean;
                    cmd.Parameters.AddWithValue("@ManChieu", ReadProperty(ManChieuProperty) == null ? (object)DBNull.Value : ReadProperty(ManChieuProperty).Value).DbType = DbType.Boolean;
                    cmd.Parameters.AddWithValue("@MayChieu", ReadProperty(MayChieuProperty) == null ? (object)DBNull.Value : ReadProperty(MayChieuProperty).Value).DbType = DbType.Boolean;
                    cmd.Parameters.AddWithValue("@BangButViet", ReadProperty(BangButVietProperty) == null ? (object)DBNull.Value : ReadProperty(BangButVietProperty).Value).DbType = DbType.Boolean;
                    cmd.Parameters.AddWithValue("@ButLazer", ReadProperty(ButLazerProperty) == null ? (object)DBNull.Value : ReadProperty(ButLazerProperty).Value).DbType = DbType.Boolean;
                    cmd.Parameters.AddWithValue("@Khac", ReadProperty(KhacProperty) == null ? (object)DBNull.Value : ReadProperty(KhacProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@NguoiGuiYeuCau", ReadProperty(NguoiGuiYeuCauProperty) == null ? (object)DBNull.Value : ReadProperty(NguoiGuiYeuCauProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@idNguoiGuiYeuCau", ReadProperty(IdNguoiGuiYeuCauProperty) == null ? (object)DBNull.Value : ReadProperty(IdNguoiGuiYeuCauProperty).Value).DbType = DbType.Int64;
                    cmd.Parameters.AddWithValue("@DaDuocDuyet", ReadProperty(DaDuocDuyetProperty) == null ? (object)DBNull.Value : ReadProperty(DaDuocDuyetProperty).Value).DbType = DbType.Boolean;
                    cmd.Parameters.AddWithValue("@idUserDuyet", ReadProperty(IdUserDuyetProperty) == null ? (object)DBNull.Value : ReadProperty(IdUserDuyetProperty).Value).DbType = DbType.Int64;
                    cmd.Parameters.AddWithValue("@LastEdited_UserID", ReadProperty(LastEdited_UserIDProperty) == null ? (object)DBNull.Value : ReadProperty(LastEdited_UserIDProperty).Value).DbType = DbType.Int64;
                    cmd.Parameters.AddWithValue("@LastEdited_Date", ReadProperty(LastEdited_DateProperty).DBValue).DbType = DbType.DateTime;
                    cmd.Parameters.AddWithValue("@TrangThaiDuyet", ReadProperty(TrangThaiDuyetProperty) == null ? (object)DBNull.Value : ReadProperty(TrangThaiDuyetProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@NgayDuyet", ReadProperty(NgayDuyetProperty).DBValue).DbType = DbType.DateTime;
                    cmd.Parameters.AddWithValue("@LyDoDuyet", ReadProperty(LyDoDuyetProperty) == null ? (object)DBNull.Value : ReadProperty(LyDoDuyetProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@LuuVet", ReadProperty(LuuVetProperty) == null ? (object)DBNull.Value : ReadProperty(LuuVetProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@NgayBatDau", ReadProperty(NgayBatDauProperty).DBValue).DbType = DbType.DateTime;
                    cmd.Parameters.AddWithValue("@NgayKetThuc", ReadProperty(NgayKetThucProperty).DBValue).DbType = DbType.DateTime;
                    var args = new DataPortalHookArgs(cmd);
                    OnUpdatePre(args);
                    cmd.ExecuteNonQuery();
                    OnUpdatePost(args);
                }
            }
        }

        /// <summary>
        /// Self deletes the <see cref="HC_GiangDuong_PhieuDangKi_Info"/> object from database.
        /// </summary>
        private void Child_DeleteSelf()
        {
            using (var ctx = TransactionManager<SqlConnection, SqlTransaction>.GetManager("Connection"))
            {
                using (var cmd = new SqlCommand("dbo.HC_GiangDuong_PhieuDangKi_Info_delete", ctx.Connection))
                {
                    cmd.Transaction = ctx.Transaction;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@ID", ReadProperty(IDProperty)).DbType = DbType.Int32;
                    var args = new DataPortalHookArgs(cmd);
                    OnDeletePre(args);
                    cmd.ExecuteNonQuery();
                    OnDeletePost(args);
                }
            }
        }

        #endregion

        #region Pseudo Events

        /// <summary>
        /// Occurs after setting all defaults for object creation.
        /// </summary>
        partial void OnCreate(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Delete, after setting query parameters and before the delete operation.
        /// </summary>
        partial void OnDeletePre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Delete, after the delete operation, before Commit().
        /// </summary>
        partial void OnDeletePost(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after setting query parameters and before the fetch operation.
        /// </summary>
        partial void OnFetchPre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after the fetch operation (object or collection is fully loaded and set up).
        /// </summary>
        partial void OnFetchPost(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after the low level fetch operation, before the data reader is destroyed.
        /// </summary>
        partial void OnFetchRead(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after setting query parameters and before the update operation.
        /// </summary>
        partial void OnUpdatePre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Insert, after the update operation, before setting back row identifiers (RowVersion) and Commit().
        /// </summary>
        partial void OnUpdatePost(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Insert, after setting query parameters and before the insert operation.
        /// </summary>
        partial void OnInsertPre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Insert, after the insert operation, before setting back row identifiers (ID and RowVersion) and Commit().
        /// </summary>
        partial void OnInsertPost(DataPortalHookArgs args);

        #endregion

    }
}
