//  This file was generated by CSLA Object Generator - CslaGenFork v4.3.0
//
// Filename:    CDT_CanBoDiTinh_Info
// ObjectType:  CDT_CanBoDiTinh_Info
// CSLAType:    EditableChild

using System;
using System.Data;
using System.Data.SqlClient;
using Csla;
using Csla.Data;
using NETLINK.LIB;

namespace ModuleChiDaoTuyen.LIB
{

    /// <summary>
    /// CDT_CanBoDiTinh_Info (editable child object).<br/>
    /// This is a generated base class of <see cref="CDT_CanBoDiTinh_Info"/> business object.
    /// </summary>
    /// <remarks>
    /// This class is an item of <see cref="CDT_CanBoDiTinh_Coll"/> collection.
    /// </remarks>
    [Serializable]
    public partial class CDT_CanBoDiTinh_Info : BusinessBase<CDT_CanBoDiTinh_Info>
    {

        #region Static Fields

        private static int _lastID;

        #endregion

        #region Business Properties

        /// <summary>
        /// Maintains metadata about <see cref="ID"/> property.
        /// </summary>
        public static readonly PropertyInfo<int> IDProperty = RegisterProperty<int>(p => p.ID, "ID");
        /// <summary>
        /// Gets the ID.
        /// </summary>
        /// <value>The ID.</value>
        public int ID
        {
            get { return GetProperty(IDProperty); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="HoTen"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> HoTenProperty = RegisterProperty<string>(p => p.HoTen, "Ho Ten");
        /// <summary>
        /// Gets or sets the Ho Ten.
        /// </summary>
        /// <value>The Ho Ten.</value>
        public string HoTen
        {
            get { return GetProperty(HoTenProperty); }
            set { SetProperty(HoTenProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="IdChucVu"/> property.
        /// </summary>
        public static readonly PropertyInfo<int?> IdChucVuProperty = RegisterProperty<int?>(p => p.IdChucVu, "Id Chuc Vu");
        /// <summary>
        /// Gets or sets the Id Chuc Vu.
        /// </summary>
        /// <value>The Id Chuc Vu.</value>
        public int? IdChucVu
        {
            get { return GetProperty(IdChucVuProperty); }
            set { SetProperty(IdChucVuProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="IdBoPhan"/> property.
        /// </summary>
        public static readonly PropertyInfo<int?> IdBoPhanProperty = RegisterProperty<int?>(p => p.IdBoPhan, "Id Bo Phan");
        /// <summary>
        /// Gets or sets the Id Bo Phan.
        /// </summary>
        /// <value>The Id Bo Phan.</value>
        public int? IdBoPhan
        {
            get { return GetProperty(IdBoPhanProperty); }
            set { SetProperty(IdBoPhanProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="IdChuyenKhoa"/> property.
        /// </summary>
        public static readonly PropertyInfo<int?> IdChuyenKhoaProperty = RegisterProperty<int?>(p => p.IdChuyenKhoa, "Id Chuyen Khoa");
        /// <summary>
        /// Gets or sets the Id Chuyen Khoa.
        /// </summary>
        /// <value>The Id Chuyen Khoa.</value>
        public int? IdChuyenKhoa
        {
            get { return GetProperty(IdChuyenKhoaProperty); }
            set { SetProperty(IdChuyenKhoaProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="IdChuyenNganh"/> property.
        /// </summary>
        public static readonly PropertyInfo<int?> IdChuyenNganhProperty = RegisterProperty<int?>(p => p.IdChuyenNganh, "Id Chuyen Nganh");
        /// <summary>
        /// Gets or sets the Id Chuyen Nganh.
        /// </summary>
        /// <value>The Id Chuyen Nganh.</value>
        public int? IdChuyenNganh
        {
            get { return GetProperty(IdChuyenNganhProperty); }
            set { SetProperty(IdChuyenNganhProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="IdCanBoTuongUng"/> property.
        /// </summary>
        public static readonly PropertyInfo<Int64?> IdCanBoTuongUngProperty = RegisterProperty<Int64?>(p => p.IdCanBoTuongUng, "Id Can Bo Tuong Ung");
        /// <summary>
        /// Gets or sets the Id Can Bo Tuong Ung.
        /// </summary>
        /// <value>The Id Can Bo Tuong Ung.</value>
        public Int64? IdCanBoTuongUng
        {
            get { return GetProperty(IdCanBoTuongUngProperty); }
            set { SetProperty(IdCanBoTuongUngProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="NgayBatDau"/> property.
        /// </summary>
        public static readonly PropertyInfo<SmartDate> NgayBatDauProperty = RegisterProperty<SmartDate>(p => p.NgayBatDau, "Ngay Bat Dau");
        /// <summary>
        /// Gets or sets the Ngay Bat Dau.
        /// </summary>
        /// <value>The Ngay Bat Dau.</value>
        public string NgayBatDau
        {
            get { return GetPropertyConvert<SmartDate, String>(NgayBatDauProperty); }
            set { SetPropertyConvert<SmartDate, String>(NgayBatDauProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="NgayKetThuc"/> property.
        /// </summary>
        public static readonly PropertyInfo<SmartDate> NgayKetThucProperty = RegisterProperty<SmartDate>(p => p.NgayKetThuc, "Ngay Ket Thuc");
        /// <summary>
        /// Gets or sets the Ngay Ket Thuc.
        /// </summary>
        /// <value>The Ngay Ket Thuc.</value>
        public string NgayKetThuc
        {
            get { return GetPropertyConvert<SmartDate, String>(NgayKetThucProperty); }
            set { SetPropertyConvert<SmartDate, String>(NgayKetThucProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="TongKinhPhi"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> TongKinhPhiProperty = RegisterProperty<string>(p => p.TongKinhPhi, "Tong Kinh Phi");
        /// <summary>
        /// Gets or sets the Tong Kinh Phi.
        /// </summary>
        /// <value>The Tong Kinh Phi.</value>
        public string TongKinhPhi
        {
            get { return GetProperty(TongKinhPhiProperty); }
            set { SetProperty(TongKinhPhiProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="idNguonKinhPhi"/> property.
        /// </summary>
        public static readonly PropertyInfo<int?> IdNguonKinhPhiProperty = RegisterProperty<int?>(p => p.IdNguonKinhPhi, "id Nguon Kinh Phi");
        /// <summary>
        /// Gets or sets the id Nguon Kinh Phi.
        /// </summary>
        /// <value>The id Nguon Kinh Phi.</value>
        public int? IdNguonKinhPhi
        {
            get { return GetProperty(IdNguonKinhPhiProperty); }
            set { SetProperty(IdNguonKinhPhiProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="NoiDen"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> NoiDenProperty = RegisterProperty<string>(p => p.NoiDen, "Noi Den");
        /// <summary>
        /// Gets or sets the Noi Den.
        /// </summary>
        /// <value>The Noi Den.</value>
        public string NoiDen
        {
            get { return GetProperty(NoiDenProperty); }
            set { SetProperty(NoiDenProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="IdBenhVienNoiDen"/> property.
        /// </summary>
        public static readonly PropertyInfo<Int64?> IdBenhVienNoiDenProperty = RegisterProperty<Int64?>(p => p.IdBenhVienNoiDen, "Id Benh Vien Noi Den");
        /// <summary>
        /// Gets or sets the Id Benh Vien Noi Den.
        /// </summary>
        /// <value>The Id Benh Vien Noi Den.</value>
        public Int64? IdBenhVienNoiDen
        {
            get { return GetProperty(IdBenhVienNoiDenProperty); }
            set { SetProperty(IdBenhVienNoiDenProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="NoiDungHoatDong"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> NoiDungHoatDongProperty = RegisterProperty<string>(p => p.NoiDungHoatDong, "Noi Dung Hoat Dong");
        /// <summary>
        /// Gets or sets the Noi Dung Hoat Dong.
        /// </summary>
        /// <value>The Noi Dung Hoat Dong.</value>
        public string NoiDungHoatDong
        {
            get { return GetProperty(NoiDungHoatDongProperty); }
            set { SetProperty(NoiDungHoatDongProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="GhiChu"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> GhiChuProperty = RegisterProperty<string>(p => p.GhiChu, "Ghi Chu");
        /// <summary>
        /// Gets or sets the Ghi Chu.
        /// </summary>
        /// <value>The Ghi Chu.</value>
        public string GhiChu
        {
            get { return GetProperty(GhiChuProperty); }
            set { SetProperty(GhiChuProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="LastEdited_UserID"/> property.
        /// </summary>
        public static readonly PropertyInfo<Int64?> LastEdited_UserIDProperty = RegisterProperty<Int64?>(p => p.LastEdited_UserID, "Last Edited User ID");
        /// <summary>
        /// Gets or sets the Last Edited User ID.
        /// </summary>
        /// <value>The Last Edited User ID.</value>
        public Int64? LastEdited_UserID
        {
            get { return GetProperty(LastEdited_UserIDProperty); }
            set { SetProperty(LastEdited_UserIDProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="LastEdited_Date"/> property.
        /// </summary>
        public static readonly PropertyInfo<SmartDate> LastEdited_DateProperty = RegisterProperty<SmartDate>(p => p.LastEdited_Date, "Last Edited Date");
        /// <summary>
        /// Gets or sets the Last Edited Date.
        /// </summary>
        /// <value>The Last Edited Date.</value>
        public string LastEdited_Date
        {
            get { return GetPropertyConvert<SmartDate, String>(LastEdited_DateProperty); }
            set { SetPropertyConvert<SmartDate, String>(LastEdited_DateProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="backup01"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> Backup01Property = RegisterProperty<string>(p => p.Backup01, "backup01");
        /// <summary>
        /// Gets or sets the backup01.
        /// </summary>
        /// <value>The backup01.</value>
        public string Backup01
        {
            get { return GetProperty(Backup01Property); }
            set { SetProperty(Backup01Property, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="backup02"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> Backup02Property = RegisterProperty<string>(p => p.Backup02, "backup02");
        /// <summary>
        /// Gets or sets the backup02.
        /// </summary>
        /// <value>The backup02.</value>
        public string Backup02
        {
            get { return GetProperty(Backup02Property); }
            set { SetProperty(Backup02Property, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="backup03"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> Backup03Property = RegisterProperty<string>(p => p.Backup03, "backup03");
        /// <summary>
        /// Gets or sets the backup03.
        /// </summary>
        /// <value>The backup03.</value>
        public string Backup03
        {
            get { return GetProperty(Backup03Property); }
            set { SetProperty(Backup03Property, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="backup04"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> Backup04Property = RegisterProperty<string>(p => p.Backup04, "backup04");
        /// <summary>
        /// Gets or sets the backup04.
        /// </summary>
        /// <value>The backup04.</value>
        public string Backup04
        {
            get { return GetProperty(Backup04Property); }
            set { SetProperty(Backup04Property, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="idGoiKT"/> property.
        /// </summary>
        public static readonly PropertyInfo<int?> IdGoiKTProperty = RegisterProperty<int?>(p => p.IdGoiKT, "id Goi KT");
        /// <summary>
        /// Gets or sets the id Goi KT.
        /// </summary>
        /// <value>The id Goi KT.</value>
        public int? IdGoiKT
        {
            get { return GetProperty(IdGoiKTProperty); }
            set { SetProperty(IdGoiKTProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="idHopDongCGKT"/> property.
        /// </summary>
        public static readonly PropertyInfo<int?> IdHopDongCGKTProperty = RegisterProperty<int?>(p => p.IdHopDongCGKT, "id Hop Dong CGKT");
        /// <summary>
        /// Gets or sets the id Hop Dong CGKT.
        /// </summary>
        /// <value>The id Hop Dong CGKT.</value>
        public int? IdHopDongCGKT
        {
            get { return GetProperty(IdHopDongCGKTProperty); }
            set { SetProperty(IdHopDongCGKTProperty, value); }
        }
        /// <summary>
        /// Maintains metadata about <see cref="backup04"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> TenMaHopDongProperty = RegisterProperty<string>(p => p.TenMaHopDong, "TenMaHopDong");
        /// <summary>
        /// Gets or sets the backup04.
        /// </summary>
        /// <value>The backup04.</value>
        public string TenMaHopDong
        {
            get { return GetProperty(TenMaHopDongProperty); }
            set { SetProperty(TenMaHopDongProperty, value); }
        }
        /// <summary>
        /// Maintains metadata about <see cref="backup04"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> TenNguonKinhPhiProperty = RegisterProperty<string>(p => p.TenNguonKinhPhi, "TenNguonKinhPhi");
        /// <summary>
        /// Gets or sets the backup04.
        /// </summary>
        /// <value>The backup04.</value>
        public string TenNguonKinhPhi
        {
            get { return GetProperty(TenNguonKinhPhiProperty); }
            set { SetProperty(TenNguonKinhPhiProperty, value); }
        }
        /// <summary>
        /// Maintains metadata about <see cref="backup04"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> TenGoiKyThuatProperty = RegisterProperty<string>(p => p.TenGoiKyThuat, "TenGoiKyThuat");
        /// <summary>
        /// Gets or sets the backup04.
        /// </summary>
        /// <value>The backup04.</value>
        public string TenGoiKyThuat
        {
            get { return GetProperty(TenGoiKyThuatProperty); }
            set { SetProperty(TenGoiKyThuatProperty, value); }
        }
        /// <summary>
        /// Maintains metadata about <see cref="backup04"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> TenChuyenKhoaProperty = RegisterProperty<string>(p => p.TenChuyenKhoa, "TenChuyenKhoa");
        /// <summary>
        /// Gets or sets the backup04.
        /// </summary>
        /// <value>The backup04.</value>
        public string TenChuyenKhoa
        {
            get { return GetProperty(TenChuyenKhoaProperty); }
            set { SetProperty(TenChuyenKhoaProperty, value); }
        }
        /// <summary>
        /// Maintains metadata about <see cref="backup04"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> TenChucVuProperty = RegisterProperty<string>(p => p.TenChucVu, "TenChucVu");
        /// <summary>
        /// Gets or sets the backup04.
        /// </summary>
        /// <value>The backup04.</value>
        public string TenChucVu
        {
            get { return GetProperty(TenChucVuProperty); }
            set { SetProperty(TenChucVuProperty, value); }
        }
        /// <summary>
        /// Maintains metadata about <see cref="backup04"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> TenBenhVienProperty = RegisterProperty<string>(p => p.TenBenhVien, "TenBenhVien");
        /// <summary>
        /// Gets or sets the backup04.
        /// </summary>
        /// <value>The backup04.</value>
        public string TenBenhVien
        {
            get { return GetProperty(TenBenhVienProperty); }
            set { SetProperty(TenBenhVienProperty, value); }
        }
        /// <summary>
        /// Maintains metadata about <see cref="backup04"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> TenTrinhDoProperty = RegisterProperty<string>(p => p.TenTrinhDo, "TenTrinhDo");
        /// <summary>
        /// Gets or sets the backup04.
        /// </summary>
        /// <value>The backup04.</value>
        public string TenTrinhDo
        {
            get { return GetProperty(TenTrinhDoProperty); }
            set { SetProperty(TenTrinhDoProperty, value); }
        }
        /// <summary>
        /// Maintains metadata about <see cref="backup04"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> TenCanBoProperty = RegisterProperty<string>(p => p.TenCanBo, "TenCanBo");
        /// <summary>
        /// Gets or sets the backup04.
        /// </summary>
        /// <value>The backup04.</value>
        public string TenCanBo
        {
            get { return GetProperty(TenCanBoProperty); }
            set { SetProperty(TenCanBoProperty, value); }
        }
        public DateTime DateNgayBatDau
        {
            get { return GetProperty(NgayBatDauProperty); }
        }
        public DateTime DateNgayKetThuc
        {
            get { return GetProperty(NgayKetThucProperty); }
        }
        #endregion

        #region Factory Methods

        /// <summary>
        /// Factory method. Creates a new <see cref="CDT_CanBoDiTinh_Info"/> object.
        /// </summary>
        /// <returns>A reference to the created <see cref="CDT_CanBoDiTinh_Info"/> object.</returns>
        internal static CDT_CanBoDiTinh_Info NewCDT_CanBoDiTinh_Info()
        {
            return DataPortal.CreateChild<CDT_CanBoDiTinh_Info>();
        }

        /// <summary>
        /// Factory method. Asynchronously creates a new <see cref="CDT_CanBoDiTinh_Info"/> object.
        /// </summary>
        /// <param name="callback">The completion callback method.</param>
        internal static void NewCDT_CanBoDiTinh_Info(EventHandler<DataPortalResult<CDT_CanBoDiTinh_Info>> callback)
        {
            DataPortal.BeginCreate<CDT_CanBoDiTinh_Info>(callback);
        }

        /// <summary>
        /// Factory method. Loads a <see cref="CDT_CanBoDiTinh_Info"/> object from the given SafeDataReader.
        /// </summary>
        /// <param name="dr">The SafeDataReader to use.</param>
        /// <returns>A reference to the fetched <see cref="CDT_CanBoDiTinh_Info"/> object.</returns>
        internal static CDT_CanBoDiTinh_Info GetCDT_CanBoDiTinh_Info(SafeDataReader dr)
        {
            CDT_CanBoDiTinh_Info obj = new CDT_CanBoDiTinh_Info();
            // show the framework that this is a child object
            obj.MarkAsChild();
            obj.Fetch(dr);
            obj.MarkOld();
            // check all object rules and property rules
            obj.BusinessRules.CheckRules();
            return obj;
        }

        #endregion

        #region Constructor

        /// <summary>
        /// Initializes a new instance of the <see cref="CDT_CanBoDiTinh_Info"/> class.
        /// </summary>
        /// <remarks> Do not use to create a Csla object. Use factory methods instead.</remarks>
        private CDT_CanBoDiTinh_Info()
        {
            // Prevent direct creation

            // show the framework that this is a child object
            MarkAsChild();
        }

        #endregion

        #region Data Access

        /// <summary>
        /// Loads default values for the <see cref="CDT_CanBoDiTinh_Info"/> object properties.
        /// </summary>
        [Csla.RunLocal]
        protected override void Child_Create()
        {
            LoadProperty(IDProperty, System.Threading.Interlocked.Decrement(ref _lastID));
            LoadProperty(HoTenProperty, null);
            LoadProperty(NgayBatDauProperty, null);
            LoadProperty(NgayKetThucProperty, null);
            LoadProperty(TongKinhPhiProperty, null);
            LoadProperty(NoiDenProperty, null);
            LoadProperty(NoiDungHoatDongProperty, null);
            LoadProperty(GhiChuProperty, null);
            LoadProperty(LastEdited_DateProperty, null);
            LoadProperty(Backup01Property, null);
            LoadProperty(Backup02Property, null);
            LoadProperty(Backup03Property, null);
            LoadProperty(Backup04Property, null);
            LoadProperty(TenMaHopDongProperty, null);
            LoadProperty(TenNguonKinhPhiProperty, null);
            LoadProperty(TenGoiKyThuatProperty, null);
            LoadProperty(TenChucVuProperty, null);
            LoadProperty(TenBenhVienProperty, null);
            LoadProperty(TenTrinhDoProperty, null);
            LoadProperty(TenCanBoProperty, null);
            var args = new DataPortalHookArgs();
            OnCreate(args);
            base.Child_Create();
        }

        /// <summary>
        /// Loads a <see cref="CDT_CanBoDiTinh_Info"/> object from the given SafeDataReader.
        /// </summary>
        /// <param name="dr">The SafeDataReader to use.</param>
        private void Fetch(SafeDataReader dr)
        {
            // Value properties
            LoadProperty(IDProperty, dr.GetInt32("ID"));
            LoadProperty(HoTenProperty, dr.GetString("HoTen"));
            LoadProperty(IdChucVuProperty, dr.GetInt32("IdChucVu"));
            LoadProperty(IdBoPhanProperty, dr.GetInt32("IdBoPhan"));
            LoadProperty(IdChuyenKhoaProperty, dr.GetInt32("IdChuyenKhoa"));
            LoadProperty(IdChuyenNganhProperty, dr.GetInt32("IdChuyenNganh"));
            LoadProperty(IdCanBoTuongUngProperty, dr.GetInt64("IdCanBoTuongUng"));
            LoadProperty(NgayBatDauProperty, dr.GetSmartDate("NgayBatDau"));
            LoadProperty(NgayKetThucProperty, dr.GetSmartDate("NgayKetThuc"));
            LoadProperty(TongKinhPhiProperty, dr.GetString("TongKinhPhi"));
            LoadProperty(IdNguonKinhPhiProperty, dr.GetInt32("IdNguonKinhPhi"));
            LoadProperty(NoiDenProperty, dr.GetString("NoiDen"));
            LoadProperty(IdBenhVienNoiDenProperty, dr.GetInt64("IdBenhVienNoiDen"));
            LoadProperty(NoiDungHoatDongProperty, dr.GetString("NoiDungHoatDong"));
            LoadProperty(GhiChuProperty, dr.GetString("GhiChu"));
            LoadProperty(Backup04Property, dr.GetString("Backup04"));
            LoadProperty(LastEdited_UserIDProperty, dr.GetInt64("LastEdited_UserID"));
            LoadProperty(LastEdited_DateProperty, dr.GetSmartDate("LastEdited_Date"));
            LoadProperty(Backup01Property, dr.GetString("Backup01"));
            LoadProperty(Backup02Property, dr.GetString("Backup02"));
            LoadProperty(Backup03Property, dr.GetString("Backup03"));
            LoadProperty(IdGoiKTProperty, dr.GetInt32("IdGoiKT"));
            LoadProperty(IdHopDongCGKTProperty, dr.GetInt32("IdHopDongCGKT"));
            //LoadProperty(TenMaHopDongProperty, dr.GetString("TenMaHopDong"));
            LoadProperty(TenNguonKinhPhiProperty, dr.GetString("TenNguonKinhPhi"));
            //LoadProperty(TenGoiKyThuatProperty, dr.GetString("TenGoiKyThuat"));
            LoadProperty(TenChuyenKhoaProperty, dr.GetString("TenChuyenKhoa"));
            LoadProperty(TenChucVuProperty, dr.GetString("TenChucVu"));
            LoadProperty(TenBenhVienProperty, dr.GetString("TenBenhVien"));
            LoadProperty(TenTrinhDoProperty, dr.GetString("TenTrinhDo"));
            //LoadProperty(TenCanBoProperty, dr.GetString("TenCanBo"));
            var args = new DataPortalHookArgs(dr);
            OnFetchRead(args);
        }

        /// <summary>
        /// Inserts a new <see cref="CDT_CanBoDiTinh_Info"/> object in the database.
        /// </summary>
        private void Child_Insert()
        {
            using (var ctx = TransactionManager<SqlConnection, SqlTransaction>.GetManager("Connection"))
            {
                using (var cmd = new SqlCommand("dbo.CDT_CanBoDiTinh_Info_add", ctx.Connection))
                {
                    cmd.Transaction = ctx.Transaction;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@ID", ReadProperty(IDProperty)).Direction = ParameterDirection.Output;
                    cmd.Parameters.AddWithValue("@HoTen", ReadProperty(HoTenProperty) == null ? (object)DBNull.Value : ReadProperty(HoTenProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@IdChucVu", ReadProperty(IdChucVuProperty) == null ? (object)DBNull.Value : ReadProperty(IdChucVuProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@IdBoPhan", ReadProperty(IdBoPhanProperty) == null ? (object)DBNull.Value : ReadProperty(IdBoPhanProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@IdChuyenKhoa", ReadProperty(IdChuyenKhoaProperty) == null ? (object)DBNull.Value : ReadProperty(IdChuyenKhoaProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@IdChuyenNganh", ReadProperty(IdChuyenNganhProperty) == null ? (object)DBNull.Value : ReadProperty(IdChuyenNganhProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@IdCanBoTuongUng", ReadProperty(IdCanBoTuongUngProperty) == null ? (object)DBNull.Value : ReadProperty(IdCanBoTuongUngProperty).Value).DbType = DbType.Int64;
                    cmd.Parameters.AddWithValue("@NgayBatDau", ReadProperty(NgayBatDauProperty).DBValue).DbType = DbType.DateTime;
                    cmd.Parameters.AddWithValue("@NgayKetThuc", ReadProperty(NgayKetThucProperty).DBValue).DbType = DbType.DateTime;
                    cmd.Parameters.AddWithValue("@TongKinhPhi", ReadProperty(TongKinhPhiProperty) == null ? (object)DBNull.Value : ReadProperty(TongKinhPhiProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@idNguonKinhPhi", ReadProperty(IdNguonKinhPhiProperty) == null ? (object)DBNull.Value : ReadProperty(IdNguonKinhPhiProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@NoiDen", ReadProperty(NoiDenProperty) == null ? (object)DBNull.Value : ReadProperty(NoiDenProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@IdBenhVienNoiDen", ReadProperty(IdBenhVienNoiDenProperty) == null ? (object)DBNull.Value : ReadProperty(IdBenhVienNoiDenProperty).Value).DbType = DbType.Int64;
                    cmd.Parameters.AddWithValue("@NoiDungHoatDong", ReadProperty(NoiDungHoatDongProperty) == null ? (object)DBNull.Value : ReadProperty(NoiDungHoatDongProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@GhiChu", ReadProperty(GhiChuProperty) == null ? (object)DBNull.Value : ReadProperty(GhiChuProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@LastEdited_UserID", ReadProperty(LastEdited_UserIDProperty) == null ? (object)DBNull.Value : ReadProperty(LastEdited_UserIDProperty).Value).DbType = DbType.Int64;
                    cmd.Parameters.AddWithValue("@LastEdited_Date", ReadProperty(LastEdited_DateProperty).DBValue).DbType = DbType.DateTime;
                    cmd.Parameters.AddWithValue("@backup01", ReadProperty(Backup01Property) == null ? (object)DBNull.Value : ReadProperty(Backup01Property)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@backup02", ReadProperty(Backup02Property) == null ? (object)DBNull.Value : ReadProperty(Backup02Property)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@backup03", ReadProperty(Backup03Property) == null ? (object)DBNull.Value : ReadProperty(Backup03Property)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@backup04", ReadProperty(Backup04Property) == null ? (object)DBNull.Value : ReadProperty(Backup04Property)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@idGoiKT", ReadProperty(IdGoiKTProperty) == null ? (object)DBNull.Value : ReadProperty(IdGoiKTProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@idHopDongCGKT", ReadProperty(IdHopDongCGKTProperty) == null ? (object)DBNull.Value : ReadProperty(IdHopDongCGKTProperty).Value).DbType = DbType.Int32;
                    var args = new DataPortalHookArgs(cmd);
                    OnInsertPre(args);
                    cmd.ExecuteNonQuery();
                    OnInsertPost(args);
                    LoadProperty(IDProperty, (int) cmd.Parameters["@ID"].Value);
                }
            }
        }

        /// <summary>
        /// Updates in the database all changes made to the <see cref="CDT_CanBoDiTinh_Info"/> object.
        /// </summary>
        private void Child_Update()
        {
            if (!IsDirty)
                return;

            using (var ctx = TransactionManager<SqlConnection, SqlTransaction>.GetManager("Connection"))
            {
                using (var cmd = new SqlCommand("dbo.CDT_CanBoDiTinh_Info_update", ctx.Connection))
                {
                    cmd.Transaction = ctx.Transaction;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@ID", ReadProperty(IDProperty)).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@HoTen", ReadProperty(HoTenProperty) == null ? (object)DBNull.Value : ReadProperty(HoTenProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@IdChucVu", ReadProperty(IdChucVuProperty) == null ? (object)DBNull.Value : ReadProperty(IdChucVuProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@IdBoPhan", ReadProperty(IdBoPhanProperty) == null ? (object)DBNull.Value : ReadProperty(IdBoPhanProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@IdChuyenKhoa", ReadProperty(IdChuyenKhoaProperty) == null ? (object)DBNull.Value : ReadProperty(IdChuyenKhoaProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@IdChuyenNganh", ReadProperty(IdChuyenNganhProperty) == null ? (object)DBNull.Value : ReadProperty(IdChuyenNganhProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@IdCanBoTuongUng", ReadProperty(IdCanBoTuongUngProperty) == null ? (object)DBNull.Value : ReadProperty(IdCanBoTuongUngProperty).Value).DbType = DbType.Int64;
                    cmd.Parameters.AddWithValue("@NgayBatDau", ReadProperty(NgayBatDauProperty).DBValue).DbType = DbType.DateTime;
                    cmd.Parameters.AddWithValue("@NgayKetThuc", ReadProperty(NgayKetThucProperty).DBValue).DbType = DbType.DateTime;
                    cmd.Parameters.AddWithValue("@TongKinhPhi", ReadProperty(TongKinhPhiProperty) == null ? (object)DBNull.Value : ReadProperty(TongKinhPhiProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@idNguonKinhPhi", ReadProperty(IdNguonKinhPhiProperty) == null ? (object)DBNull.Value : ReadProperty(IdNguonKinhPhiProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@NoiDen", ReadProperty(NoiDenProperty) == null ? (object)DBNull.Value : ReadProperty(NoiDenProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@IdBenhVienNoiDen", ReadProperty(IdBenhVienNoiDenProperty) == null ? (object)DBNull.Value : ReadProperty(IdBenhVienNoiDenProperty).Value).DbType = DbType.Int64;
                    cmd.Parameters.AddWithValue("@NoiDungHoatDong", ReadProperty(NoiDungHoatDongProperty) == null ? (object)DBNull.Value : ReadProperty(NoiDungHoatDongProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@GhiChu", ReadProperty(GhiChuProperty) == null ? (object)DBNull.Value : ReadProperty(GhiChuProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@LastEdited_UserID", ReadProperty(LastEdited_UserIDProperty) == null ? (object)DBNull.Value : ReadProperty(LastEdited_UserIDProperty).Value).DbType = DbType.Int64;
                    cmd.Parameters.AddWithValue("@LastEdited_Date", ReadProperty(LastEdited_DateProperty).DBValue).DbType = DbType.DateTime;
                    cmd.Parameters.AddWithValue("@backup01", ReadProperty(Backup01Property) == null ? (object)DBNull.Value : ReadProperty(Backup01Property)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@backup02", ReadProperty(Backup02Property) == null ? (object)DBNull.Value : ReadProperty(Backup02Property)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@backup03", ReadProperty(Backup03Property) == null ? (object)DBNull.Value : ReadProperty(Backup03Property)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@backup04", ReadProperty(Backup04Property) == null ? (object)DBNull.Value : ReadProperty(Backup04Property)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@idGoiKT", ReadProperty(IdGoiKTProperty) == null ? (object)DBNull.Value : ReadProperty(IdGoiKTProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@idHopDongCGKT", ReadProperty(IdHopDongCGKTProperty) == null ? (object)DBNull.Value : ReadProperty(IdHopDongCGKTProperty).Value).DbType = DbType.Int32;
                    var args = new DataPortalHookArgs(cmd);
                    OnUpdatePre(args);
                    cmd.ExecuteNonQuery();
                    OnUpdatePost(args);
                }
            }
        }

        /// <summary>
        /// Self deletes the <see cref="CDT_CanBoDiTinh_Info"/> object from database.
        /// </summary>
        private void Child_DeleteSelf()
        {
            using (var ctx = TransactionManager<SqlConnection, SqlTransaction>.GetManager("Connection"))
            {
                using (var cmd = new SqlCommand("dbo.CDT_CanBoDiTinh_Info_delete", ctx.Connection))
                {
                    cmd.Transaction = ctx.Transaction;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@ID", ReadProperty(IDProperty)).DbType = DbType.Int32;
                    var args = new DataPortalHookArgs(cmd);
                    OnDeletePre(args);
                    cmd.ExecuteNonQuery();
                    OnDeletePost(args);
                }
            }
        }

        #endregion

        #region Pseudo Events

        /// <summary>
        /// Occurs after setting all defaults for object creation.
        /// </summary>
        partial void OnCreate(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Delete, after setting query parameters and before the delete operation.
        /// </summary>
        partial void OnDeletePre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Delete, after the delete operation, before Commit().
        /// </summary>
        partial void OnDeletePost(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after setting query parameters and before the fetch operation.
        /// </summary>
        partial void OnFetchPre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after the fetch operation (object or collection is fully loaded and set up).
        /// </summary>
        partial void OnFetchPost(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after the low level fetch operation, before the data reader is destroyed.
        /// </summary>
        partial void OnFetchRead(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after setting query parameters and before the update operation.
        /// </summary>
        partial void OnUpdatePre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Insert, after the update operation, before setting back row identifiers (RowVersion) and Commit().
        /// </summary>
        partial void OnUpdatePost(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Insert, after setting query parameters and before the insert operation.
        /// </summary>
        partial void OnInsertPre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Insert, after the insert operation, before setting back row identifiers (ID and RowVersion) and Commit().
        /// </summary>
        partial void OnInsertPost(DataPortalHookArgs args);

        #endregion

    }
}
