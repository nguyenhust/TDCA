//  This file was generated by CSLA Object Generator - CslaGenFork v4.3.0
//
// Filename:    DT_LienTuc_LopHoc
// ObjectType:  DT_LienTuc_LopHoc
// CSLAType:    EditableRoot

using System;
using System.Data;
using System.Data.SqlClient;
using Csla;
using Csla.Data;using NETLINK.LIB;

namespace ModuleDaoTao.LIB
{

    /// <summary>
    /// DT_LienTuc_LopHoc (editable root object).<br/>
    /// This is a generated base class of <see cref="DT_LienTuc_LopHoc"/> business object.
    /// </summary>
    [Serializable]
    public partial class DT_LienTuc_LopHoc : BusinessBase<DT_LienTuc_LopHoc>
    {

        #region Business Properties

        /// <summary>
        /// Maintains metadata about <see cref="MaLop"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> MaLopProperty = RegisterProperty<string>(p => p.MaLop, "Ma Lop");
        /// <summary>
        /// Gets or sets the Ma Lop.
        /// </summary>
        /// <value>The Ma Lop.</value>
        public string MaLop
        {
            get { return GetProperty(MaLopProperty); }
            set { SetProperty(MaLopProperty, value); }
        }
        /// <summary>
        /// Maintains metadata about <see cref="MaLop"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> TenChuyenKhoaProperty = RegisterProperty<string>(p => p.TenChuyenKhoa, "Ma Lop");
        /// <summary>
        /// Gets or sets the Ma Lop.
        /// </summary>
        /// <value>The Ma Lop.</value>
        public string TenChuyenKhoa
        {
            get { return GetProperty(TenChuyenKhoaProperty); }
            set { SetProperty(TenChuyenKhoaProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="TenLop"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> TenLopProperty = RegisterProperty<string>(p => p.TenLop, "Ten Lop");
        /// <summary>
        /// Gets or sets the Ten Lop.
        /// </summary>
        /// <value>The Ten Lop.</value>
        public string TenLop
        {
            get { return GetProperty(TenLopProperty); }
            set { SetProperty(TenLopProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="DoiTuong"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> DoiTuongProperty = RegisterProperty<string>(p => p.DoiTuong, "Doi Tuong");
        /// <summary>
        /// Gets or sets the Doi Tuong.
        /// </summary>
        /// <value>The Doi Tuong.</value>
        public string DoiTuong
        {
            get { return GetProperty(DoiTuongProperty); }
            set { SetProperty(DoiTuongProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="NguonKinhPhi"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> NguonKinhPhiProperty = RegisterProperty<string>(p => p.NguonKinhPhi, "Nguon Kinh Phi");
        /// <summary>
        /// Gets or sets the Nguon Kinh Phi.
        /// </summary>
        /// <value>The Nguon Kinh Phi.</value>
        public string NguonKinhPhi
        {
            get { return GetProperty(NguonKinhPhiProperty); }
            set { SetProperty(NguonKinhPhiProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="idCanBoPhuTrach"/> property.
        /// </summary>
        public static readonly PropertyInfo<Int64?> IdCanBoPhuTrachProperty = RegisterProperty<Int64?>(p => p.IdCanBoPhuTrach, "id Can Bo Phu Trach");
        /// <summary>
        /// Gets or sets the id Can Bo Phu Trach.
        /// </summary>
        /// <value>The id Can Bo Phu Trach.</value>
        public Int64? IdCanBoPhuTrach
        {
            get { return GetProperty(IdCanBoPhuTrachProperty); }
            set { SetProperty(IdCanBoPhuTrachProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="idCanBoPhoiHop"/> property.
        /// </summary>
        public static readonly PropertyInfo<Int64?> IdCanBoPhoiHopProperty = RegisterProperty<Int64?>(p => p.IdCanBoPhoiHop, "id Can Bo Phoi Hop");
        /// <summary>
        /// Gets or sets the id Can Bo Phoi Hop.
        /// </summary>
        /// <value>The id Can Bo Phoi Hop.</value>
        public Int64? IdCanBoPhoiHop
        {
            get { return GetProperty(IdCanBoPhoiHopProperty); }
            set { SetProperty(IdCanBoPhoiHopProperty, value); }
        }

        public static readonly PropertyInfo<Int64?> IdTrinhDoProperty = RegisterProperty<Int64?>(p => p.IdTrinhDo, "id Trinh do");
        /// <summary>
        /// Gets or sets the id Can Bo Phoi Hop.
        /// </summary>
        /// <value>The id Can Bo Phoi Hop.</value>
        public Int64? IdTrinhDo
        {
            get { return GetProperty(IdTrinhDoProperty); }
            set { SetProperty(IdTrinhDoProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="NgayBatDau"/> property.
        /// </summary>
        public static readonly PropertyInfo<SmartDate> NgayBatDauProperty = RegisterProperty<SmartDate>(p => p.NgayBatDau, "Ngay Bat Dau");
        /// <summary>
        /// Gets or sets the Ngay Bat Dau.
        /// </summary>
        /// <value>The Ngay Bat Dau.</value>
        public string NgayBatDau
        {
            get { return GetPropertyConvert<SmartDate, String>(NgayBatDauProperty); }
            set { SetPropertyConvert<SmartDate, String>(NgayBatDauProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="NgayKetThuc"/> property.
        /// </summary>
        public static readonly PropertyInfo<SmartDate> NgayKetThucProperty = RegisterProperty<SmartDate>(p => p.NgayKetThuc, "Ngay Ket Thuc");
        /// <summary>
        /// Gets or sets the Ngay Ket Thuc.
        /// </summary>
        /// <value>The Ngay Ket Thuc.</value>
        public string NgayKetThuc
        {
            get { return GetPropertyConvert<SmartDate, String>(NgayKetThucProperty); }
            set { SetPropertyConvert<SmartDate, String>(NgayKetThucProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="HocPhi"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> HocPhiProperty = RegisterProperty<string>(p => p.HocPhi, "Hoc Phi");
        /// <summary>
        /// Gets or sets the Hoc Phi.
        /// </summary>
        /// <value>The Hoc Phi.</value>
        public string HocPhi
        {
            get { return GetProperty(HocPhiProperty); }
            set { SetProperty(HocPhiProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="idCanBoGiangVien1"/> property.
        /// </summary>
        public static readonly PropertyInfo<Int64?> IdCanBoGiangVien1Property = RegisterProperty<Int64?>(p => p.IdCanBoGiangVien1, "id Can Bo Giang Vien1");
        /// <summary>
        /// Gets or sets the id Can Bo Giang Vien1.
        /// </summary>
        /// <value>The id Can Bo Giang Vien1.</value>
        public Int64? IdCanBoGiangVien1
        {
            get { return GetProperty(IdCanBoGiangVien1Property); }
            set { SetProperty(IdCanBoGiangVien1Property, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="idCanBoGiangVien2"/> property.
        /// </summary>
        public static readonly PropertyInfo<Int64?> IdCanBoGiangVien2Property = RegisterProperty<Int64?>(p => p.IdCanBoGiangVien2, "id Can Bo Giang Vien2");
        /// <summary>
        /// Gets or sets the id Can Bo Giang Vien2.
        /// </summary>
        /// <value>The id Can Bo Giang Vien2.</value>
        public Int64? IdCanBoGiangVien2
        {
            get { return GetProperty(IdCanBoGiangVien2Property); }
            set { SetProperty(IdCanBoGiangVien2Property, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="idCanBoGiangVien3"/> property.
        /// </summary>
        public static readonly PropertyInfo<Int64?> IdCanBoGiangVien3Property = RegisterProperty<Int64?>(p => p.IdCanBoGiangVien3, "id Can Bo Giang Vien3");
        /// <summary>
        /// Gets or sets the id Can Bo Giang Vien3.
        /// </summary>
        /// <value>The id Can Bo Giang Vien3.</value>
        public Int64? IdCanBoGiangVien3
        {
            get { return GetProperty(IdCanBoGiangVien3Property); }
            set { SetProperty(IdCanBoGiangVien3Property, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="idCanBoGiangVien4"/> property.
        /// </summary>
        public static readonly PropertyInfo<Int64?> IdCanBoGiangVien4Property = RegisterProperty<Int64?>(p => p.IdCanBoGiangVien4, "id Can Bo Giang Vien4");
        /// <summary>
        /// Gets or sets the id Can Bo Giang Vien4.
        /// </summary>
        /// <value>The id Can Bo Giang Vien4.</value>
        public Int64? IdCanBoGiangVien4
        {
            get { return GetProperty(IdCanBoGiangVien4Property); }
            set { SetProperty(IdCanBoGiangVien4Property, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="idCanBoGiangVien5"/> property.
        /// </summary>
        public static readonly PropertyInfo<Int64?> IdCanBoGiangVien5Property = RegisterProperty<Int64?>(p => p.IdCanBoGiangVien5, "id Can Bo Giang Vien5");
        /// <summary>
        /// Gets or sets the id Can Bo Giang Vien5.
        /// </summary>
        /// <value>The id Can Bo Giang Vien5.</value>
        public Int64? IdCanBoGiangVien5
        {
            get { return GetProperty(IdCanBoGiangVien5Property); }
            set { SetProperty(IdCanBoGiangVien5Property, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="idKhungLopHoc"/> property.
        /// </summary>
        public static readonly PropertyInfo<int?> IdKhungLopHocProperty = RegisterProperty<int?>(p => p.IdKhungLopHoc, "id Khung Lop Hoc");
        /// <summary>
        /// Gets or sets the id Khung Lop Hoc.
        /// </summary>
        /// <value>The id Khung Lop Hoc.</value>
        public int? IdKhungLopHoc
        {
            get { return GetProperty(IdKhungLopHocProperty); }
            set { SetProperty(IdKhungLopHocProperty, value); }
        }
        /// <summary>
        /// Maintains metadata about <see cref="idKhungLopHoc"/> property.
        /// </summary>
        public static readonly PropertyInfo<Int64> IDChuyenKhoaProperty = RegisterProperty<Int64>(p => p.IDChuyenKhoa, "id Khung Lop Hoc");
        /// <summary>
        /// Gets or sets the id Khung Lop Hoc.
        /// </summary>
        /// <value>The id Khung Lop Hoc.</value>
        public Int64 IDChuyenKhoa
        {
            get { return GetProperty(IDChuyenKhoaProperty); }
            set { SetProperty(IDChuyenKhoaProperty, value); }
        }
        /// <summary>
        /// Maintains metadata about <see cref="MaLop"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> KhoaHocProperty = RegisterProperty<string>(p => p.KhoaHoc, "Khoa Hoc");
        /// <summary>
        /// Gets or sets the Ma Lop.
        /// </summary>
        /// <value>The Ma Lop.</value>
        public string KhoaHoc
        {
            get { return GetProperty(KhoaHocProperty); }
            set { SetProperty(KhoaHocProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="idKhungLopHoc"/> property.
        /// </summary>
        public static readonly PropertyInfo<int?> IdNguonKinhPhiProperty = RegisterProperty<int?>(p => p.IdNguonKinhPhi, "id Nguon Kinh Phi");
        /// <summary>
        /// Gets or sets the id Khung Lop Hoc.
        /// </summary>
        /// <value>The id Khung Lop Hoc.</value>
        public int? IdNguonKinhPhi
        {
            get { return GetProperty(IdNguonKinhPhiProperty); }
            set { SetProperty(IdNguonKinhPhiProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="LastEdited_User"/> property.
        /// </summary>
        public static readonly PropertyInfo<Int64?> LastEdited_UserProperty = RegisterProperty<Int64?>(p => p.LastEdited_User, "Last Edited User");
        /// <summary>
        /// Gets or sets the Last Edited User.
        /// </summary>
        /// <value>The Last Edited User.</value>
        public Int64? LastEdited_User
        {
            get { return GetProperty(LastEdited_UserProperty); }
            set { SetProperty(LastEdited_UserProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="LastEdited_Date"/> property.
        /// </summary>
        public static readonly PropertyInfo<SmartDate> LastEdited_DateProperty = RegisterProperty<SmartDate>(p => p.LastEdited_Date, "Last Edited Date");
        /// <summary>
        /// Gets or sets the Last Edited Date.
        /// </summary>
        /// <value>The Last Edited Date.</value>
        public string LastEdited_Date
        {
            get { return GetPropertyConvert<SmartDate, String>(LastEdited_DateProperty); }
            set { SetPropertyConvert<SmartDate, String>(LastEdited_DateProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="TongSoTiet"/> property.
        /// </summary>
        public static readonly PropertyInfo<int?> TongSoTietProperty = RegisterProperty<int?>(p => p.TongSoTiet, "Tong So Tiet");
        /// <summary>
        /// Gets or sets the Tong So Tiet.
        /// </summary>
        /// <value>The Tong So Tiet.</value>
        public int? TongSoTiet
        {
            get { return GetProperty(TongSoTietProperty); }
            set { SetProperty(TongSoTietProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="Backup01"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> Backup01Property = RegisterProperty<string>(p => p.Backup01, "Backup01");
        /// <summary>
        /// Gets or sets the Backup01.
        /// </summary>
        /// <value>The Backup01.</value>
        public string Backup01
        {
            get { return GetProperty(Backup01Property); }
            set { SetProperty(Backup01Property, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="Backup02"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> Backup02Property = RegisterProperty<string>(p => p.Backup02, "Backup02");
        /// <summary>
        /// Gets or sets the Backup02.
        /// </summary>
        /// <value>The Backup02.</value>
        public string Backup02
        {
            get { return GetProperty(Backup02Property); }
            set { SetProperty(Backup02Property, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="Backup03"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> Backup03Property = RegisterProperty<string>(p => p.Backup03, "Backup03");
        /// <summary>
        /// Gets or sets the Backup03.
        /// </summary>
        /// <value>The Backup03.</value>
        public string Backup03
        {
            get { return GetProperty(Backup03Property); }
            set { SetProperty(Backup03Property, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="Backup04"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> Backup04Property = RegisterProperty<string>(p => p.Backup04, "Backup04");
        /// <summary>
        /// Gets or sets the Backup04.
        /// </summary>
        /// <value>The Backup04.</value>
        public string Backup04
        {
            get { return GetProperty(Backup04Property); }
            set { SetProperty(Backup04Property, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="Backup05"/> property.
        /// </summary>
        public static readonly PropertyInfo<int?> Backup05Property = RegisterProperty<int?>(p => p.Backup05, "Backup05");
        /// <summary>
        /// Gets or sets the Backup05.
        /// </summary>
        /// <value>The Backup05.</value>
        public int? Backup05
        {
            get { return GetProperty(Backup05Property); }
            set { SetProperty(Backup05Property, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="Backup06"/> property.
        /// </summary>
        public static readonly PropertyInfo<int?> Backup06Property = RegisterProperty<int?>(p => p.Backup06, "Backup06");
        /// <summary>
        /// Gets or sets the Backup06.
        /// </summary>
        /// <value>The Backup06.</value>
        public int? Backup06
        {
            get { return GetProperty(Backup06Property); }
            set { SetProperty(Backup06Property, value); }
        }

        public static readonly PropertyInfo<string> TenCanBoProperty = RegisterProperty<string>(p => p.TenCanBo, "Ten Can Bo");
        /// <summary>
        /// Gets or sets the Ten Lop.
        /// </summary>
        /// <value>The Ten Lop.</value>
        public string TenCanBo
        {
            get { return GetProperty(TenCanBoProperty); }
            set { SetProperty(TenCanBoProperty, value); }
        }

        public static readonly PropertyInfo<string> GioiTinhCBTProperty = RegisterProperty<string>(p => p.GioiTinhCBT, "Gioi Tinh");
        /// <summary>
        /// Gets or sets the Gioi Tinh.
        /// </summary>
        /// <value>The Gioi Tinh.</value>
        public string GioiTinhCBT
        {
            get { return GetProperty(GioiTinhCBTProperty); }
            set { SetProperty(GioiTinhCBTProperty, value); }
        }

        public static readonly PropertyInfo<byte?> LoaiPhieuProperty = RegisterProperty<byte?>(p => p.LoaiPhieu, "LoaiPhieu");

        ///<summary>
        /// Gets or sets the Hinh Thuc Thanh Toan.
        ///</summary>
        ///<value>The Hinh Thuc Thanh Toan.</value>
        public byte? LoaiPhieu
        {
            get { return GetProperty(LoaiPhieuProperty); }
            set { SetProperty(LoaiPhieuProperty, value); }
        }

        //public static readonly PropertyInfo<int> IdProperty = RegisterProperty<int>(p => p.Id, "id");
        ///// <summary>
        ///// Gets or sets the id.
        ///// </summary>
        ///// <value>The id.</value>
        //public int Id
        //{
        //    get { return GetProperty(IdProperty); }
        //    set { SetProperty(IdProperty, value); }
        //}

        //public static readonly PropertyInfo<string> HinhThucHocProperty = RegisterProperty<string>(p => p.HinhThucHoc, "Hinh Thuc Hoc");
        ///// <summary>
        ///// Gets or sets the Hinh Thuc Hoc.
        ///// </summary>
        ///// <value>The Hinh Thuc Hoc.</value>
        //public string HinhThucHoc
        //{
        //    get { return GetProperty(HinhThucHocProperty); }
        //    set { SetProperty(HinhThucHocProperty, value); }
        //}

        public static readonly PropertyInfo<string> NoiCongTacProperty = RegisterProperty<string>(p => p.NoiCongTac, "Ho Ten");
        /// <summary>
        /// Gets or sets the Ho Ten.
        /// </summary>
        /// <value>The Ho Ten.</value>
        public string NoiCongTac
        {
            get { return GetProperty(NoiCongTacProperty); }
            set { SetProperty(NoiCongTacProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="NgaySinh"/> property.
        /// </summary>
        public static readonly PropertyInfo<SmartDate> NgaySinhProperty = RegisterProperty<SmartDate>(p => p.NgaySinh, "Ngay Sinh");
        /// <summary>
        /// Gets or sets the Ngay Sinh.
        /// </summary>
        /// <value>The Ngay Sinh.</value>
        public string NgaySinh
        {
            get { return GetPropertyConvert<SmartDate, String>(NgaySinhProperty); }
            set { SetPropertyConvert<SmartDate, String>(NgaySinhProperty, value); }
        }
        public static readonly PropertyInfo<string> TrinhDoProperty = RegisterProperty<string>(p => p.TrinhDo, "Ho Ten");
        /// <summary>
        /// Gets or sets the Ho Ten.
        /// </summary>
        /// <value>The Ho Ten.</value>
        public string TrinhDo
        {
            get { return GetProperty(TrinhDoProperty); }
            set { SetProperty(TrinhDoProperty, value); }
        }

        public static readonly PropertyInfo<string> GioiTinhProperty = RegisterProperty<string>(p => p.GioiTinh, "Gioi Tinh");
        /// <summary>
        /// Gets or sets the Gioi Tinh.
        /// </summary>
        /// <value>The Gioi Tinh.</value>
        public string GioiTinh
        {
            get { return GetProperty(GioiTinhProperty); }
            set { SetProperty(GioiTinhProperty, value); }
        }

        public static readonly PropertyInfo<int> IdProperty = RegisterProperty<int>(p => p.Id, "id");
        /// <summary>
        /// Gets or sets the id.
        /// </summary>
        /// <value>The id.</value>
        public int Id
        {
            get { return GetProperty(IdProperty); }
            set { SetProperty(IdProperty, value); }
        }
        #endregion

        #region Factory Methods

        /// <summary>
        /// Factory method. Creates a new <see cref="DT_LienTuc_LopHoc"/> object.
        /// </summary>
        /// <returns>A reference to the created <see cref="DT_LienTuc_LopHoc"/> object.</returns>
        public static DT_LienTuc_LopHoc NewDT_LienTuc_LopHoc()
        {
            return DataPortal.Create<DT_LienTuc_LopHoc>();
        }

        /// <summary>
        /// Factory method. Loads a <see cref="DT_LienTuc_LopHoc"/> object, based on given parameters.
        /// </summary>
        /// <param name="maLop">The MaLop parameter of the DT_LienTuc_LopHoc to fetch.</param>
        /// <returns>A reference to the fetched <see cref="DT_LienTuc_LopHoc"/> object.</returns>
        public static DT_LienTuc_LopHoc GetDT_LienTuc_LopHoc(string maLop)
        {
            return DataPortal.Fetch<DT_LienTuc_LopHoc>(maLop);
        }
        public static DT_LienTuc_LopHoc GetDT_LienTuc_LopHoc_KQ(string maLopHoc)
        {
            return DataPortal.Fetch<DT_LienTuc_LopHoc>(new Criteria(maLopHoc));
        }
        /// <summary>
        /// Factory method. Deletes a <see cref="DT_LienTuc_LopHoc"/> object, based on given parameters.
        /// </summary>
        /// <param name="maLop">The MaLop of the DT_LienTuc_LopHoc to delete.</param>
        public static void DeleteDT_LienTuc_LopHoc(string maLop)
        {
            DataPortal.Delete<DT_LienTuc_LopHoc>(maLop);
        }

        /// <summary>
        /// Factory method. Asynchronously creates a new <see cref="DT_LienTuc_LopHoc"/> object.
        /// </summary>
        /// <param name="callback">The completion callback method.</param>
        public static void NewDT_LienTuc_LopHoc(EventHandler<DataPortalResult<DT_LienTuc_LopHoc>> callback)
        {
            DataPortal.BeginCreate<DT_LienTuc_LopHoc>(callback);
        }

        /// <summary>
        /// Factory method. Asynchronously loads a <see cref="DT_LienTuc_LopHoc"/> object, based on given parameters.
        /// </summary>
        /// <param name="maLop">The MaLop parameter of the DT_LienTuc_LopHoc to fetch.</param>
        /// <param name="callback">The completion callback method.</param>
        public static void GetDT_LienTuc_LopHoc(string maLop, EventHandler<DataPortalResult<DT_LienTuc_LopHoc>> callback)
        {
            DataPortal.BeginFetch<DT_LienTuc_LopHoc>(maLop, callback);
        }

        /// <summary>
        /// Factory method. Asynchronously deletes a <see cref="DT_LienTuc_LopHoc"/> object, based on given parameters.
        /// </summary>
        /// <param name="maLop">The MaLop of the DT_LienTuc_LopHoc to delete.</param>
        /// <param name="callback">The completion callback method.</param>
        public static void DeleteDT_LienTuc_LopHoc(string maLop, EventHandler<DataPortalResult<DT_LienTuc_LopHoc>> callback)
        {
            DataPortal.BeginDelete<DT_LienTuc_LopHoc>(maLop, callback);
        }

        #endregion
        #region Criteria
        [Serializable()]
        private class Criteria
        {
            #region Protected Var
            /// <summary>
            /// ID điều trị
            /// </summary>
            protected string _maLopHoc;
            #endregion

            #region Public Properties
            public string MaLopHoc
            {
                get
                {
                    return _maLopHoc;
                }
            }
            #endregion

            public Criteria(string maLopHoc)
            {
                _maLopHoc = maLopHoc;
            }

        }
        #endregion     

        #region Constructor

        /// <summary>
        /// Initializes a new instance of the <see cref="DT_LienTuc_LopHoc"/> class.
        /// </summary>
        /// <remarks> Do not use to create a Csla object. Use factory methods instead.</remarks>
        private DT_LienTuc_LopHoc()
        {
            // Prevent direct creation
        }

        #endregion

        #region Data Access

        /// <summary>
        /// Loads default values for the <see cref="DT_LienTuc_LopHoc"/> object properties.
        /// </summary>
        [Csla.RunLocal]
        protected override void DataPortal_Create()
        {
            LoadProperty(TenLopProperty, null);
            LoadProperty(DoiTuongProperty, null);
            LoadProperty(NguonKinhPhiProperty, null);
            LoadProperty(HocPhiProperty, null);
            LoadProperty(KhoaHocProperty, null);
            LoadProperty(LastEdited_DateProperty, null);
            LoadProperty(Backup01Property, null);
            LoadProperty(Backup02Property, null);
            LoadProperty(Backup03Property, null);
            LoadProperty(Backup04Property, null);
            var args = new DataPortalHookArgs();
            OnCreate(args);
            base.DataPortal_Create();
        }

        /// <summary>
        /// Loads a <see cref="DT_LienTuc_LopHoc"/> object from the database, based on given criteria.
        /// </summary>
        /// <param name="maLop">The Ma Lop.</param>
        protected void DataPortal_Fetch(string maLop)
        {
            using (var ctx = ConnectionManager<SqlConnection>.GetManager("Connection"))
            {
                using (var cmd = new SqlCommand("dbo.DT_LienTuc_LopHoc_get", ctx.Connection))
                {
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@MaLop", maLop).DbType = DbType.String;
                    var args = new DataPortalHookArgs(cmd, maLop);
                    OnFetchPre(args);
                    Fetch(cmd);
                    OnFetchPost(args);
                }
            }
            // check all object rules and property rules
            BusinessRules.CheckRules();
        }
        private void DataPortal_Fetch(Criteria criteria)
        {
            Fetch_KQ(criteria.MaLopHoc);
        }
        private void Fetch_KQ(string maLopHoc)
        {
            using (var ctx = ConnectionManager<SqlConnection>.GetManager("Connection"))
            {
                using (var cmd = new SqlCommand("dbo.DT_LienTuc_LopHoc_Gets", ctx.Connection))
                {
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@MaLopHoc", maLopHoc).DbType = DbType.String;
                    var args = new DataPortalHookArgs(cmd, maLopHoc);
                    OnFetchPre(args);
                    Fetch_KQ(cmd);
                    OnFetchPost(args);
                }
            }
            // check all object rules and property rules
            BusinessRules.CheckRules();          
        }
        private void Fetch(SqlCommand cmd)
        {
            using (var dr = new SafeDataReader(cmd.ExecuteReader()))
            {
                if (dr.Read())
                {
                    Fetch(dr);
                }
            }
        }

        private void Fetch_KQ(SqlCommand cmd)
        {
            using (var dr = new SafeDataReader(cmd.ExecuteReader()))
            {
                if (dr.Read())
                {
                   Fetch_KQ(dr);
                }
            }
        }
        /// <summary>
        /// Loads a <see cref="DT_LienTuc_LopHoc"/> object from the given SafeDataReader.
        /// </summary>
        /// <param name="dr">The SafeDataReader to use.</param>
        private void Fetch(SafeDataReader dr)
        {
            // Value properties
            LoadProperty(MaLopProperty, dr.GetString("MaLop"));
            LoadProperty(TenLopProperty, dr.GetString("TenLop"));
            LoadProperty(DoiTuongProperty, dr.GetString("DoiTuong"));
            LoadProperty(NguonKinhPhiProperty, dr.GetString("NguonKinhPhi"));
            LoadProperty(IdCanBoPhuTrachProperty, dr.GetInt64("IdCanBoPhuTrach"));
            LoadProperty(IdCanBoPhoiHopProperty, dr.GetInt64("IdCanBoPhoiHop"));
            LoadProperty(NgayBatDauProperty, dr.GetSmartDate("NgayBatDau"));
            LoadProperty(NgayKetThucProperty, dr.GetSmartDate("NgayKetThuc"));
            LoadProperty(HocPhiProperty, dr.GetString("HocPhi"));
            LoadProperty(IdCanBoGiangVien1Property, dr.GetInt64("IdCanBoGiangVien1"));
            LoadProperty(IdCanBoGiangVien2Property, dr.GetInt64("IdCanBoGiangVien2"));
            LoadProperty(IdCanBoGiangVien3Property, dr.GetInt64("IdCanBoGiangVien3"));
            LoadProperty(IdCanBoGiangVien4Property, dr.GetInt64("IdCanBoGiangVien4"));
            LoadProperty(IdCanBoGiangVien5Property, dr.GetInt64("IdCanBoGiangVien5"));
            LoadProperty(IdKhungLopHocProperty, dr.GetInt32("IdKhungLopHoc"));
            LoadProperty(KhoaHocProperty, dr.GetString("KhoaHoc"));
            LoadProperty(IdNguonKinhPhiProperty, dr.GetInt32("IdNguonKinhPhi"));
            LoadProperty(LastEdited_UserProperty, dr.GetInt64("LastEdited_User"));
            LoadProperty(LastEdited_DateProperty, dr.GetSmartDate("LastEdited_Date"));
            LoadProperty(TongSoTietProperty, dr.GetInt32("TongSoTiet"));
            LoadProperty(Backup01Property, dr.GetString("Backup01"));
            LoadProperty(Backup02Property, dr.GetString("Backup02"));
            LoadProperty(Backup03Property, dr.GetString("Backup03"));
            LoadProperty(Backup04Property, dr.GetString("Backup04"));
            LoadProperty(Backup05Property, dr.GetInt32("Backup05"));
            LoadProperty(Backup06Property, dr.GetInt32("Backup06"));
            LoadProperty(IDChuyenKhoaProperty, dr.GetInt64("idChuyenKhoa"));
            LoadProperty(TenCanBoProperty, dr.GetString("TenCanBoPhuTrachNgoai"));
            LoadProperty(GioiTinhProperty, dr.GetString("GioiTinh"));
            //LoadProperty(IdTrinhDoProperty, dr.GetInt64("IdTrinhDo"));
           // LoadProperty(LoaiPhieuProperty, dr.GetByte("LoaiPhieu"));
         //   LoadProperty(IdProperty, dr.GetInt64("IDHocVien"));
         //   LoadProperty(HinhThucHocProperty, dr.GetString("HinhThucHoc"));
         //  LoadProperty(NoiCongTacProperty, dr.GetString("NoiCongTac"));
       //     LoadProperty(NgaySinhProperty, dr.GetDateTime("NgaySinh"));
     //       LoadProperty(TrinhDoProperty, dr.GetString("TrinhDo"));
      //      LoadProperty(GioiTinhCBTProperty, dr.GetString("GioiTinhCBT"));
            var args = new DataPortalHookArgs(dr);
            OnFetchRead(args);
        }

        private void Fetch_KQ(SafeDataReader dr)
        {
            LoadProperty(MaLopProperty, dr.GetString("MaLop"));
            LoadProperty(TenLopProperty, dr.GetString("TenLop"));
            LoadProperty(DoiTuongProperty, dr.GetString("DoiTuong"));
            LoadProperty(NguonKinhPhiProperty, dr.GetString("NguonKinhPhi"));
            LoadProperty(IdCanBoPhuTrachProperty, dr.GetInt64("IdCanBoPhuTrach"));
            LoadProperty(IdCanBoPhoiHopProperty, dr.GetInt64("IdCanBoPhoiHop"));
            LoadProperty(NgayBatDauProperty, dr.GetSmartDate("NgayBatDau"));
            LoadProperty(NgayKetThucProperty, dr.GetSmartDate("NgayKetThuc"));
            LoadProperty(HocPhiProperty, dr.GetString("HocPhi"));
            LoadProperty(IdCanBoGiangVien1Property, dr.GetInt64("IdCanBoGiangVien1"));
            LoadProperty(IdCanBoGiangVien2Property, dr.GetInt64("IdCanBoGiangVien2"));
            LoadProperty(IdCanBoGiangVien3Property, dr.GetInt64("IdCanBoGiangVien3"));
            LoadProperty(IdCanBoGiangVien4Property, dr.GetInt64("IdCanBoGiangVien4"));
            LoadProperty(IdCanBoGiangVien5Property, dr.GetInt64("IdCanBoGiangVien5"));
            LoadProperty(IdKhungLopHocProperty, dr.GetInt32("IdKhungLopHoc"));
            LoadProperty(KhoaHocProperty, dr.GetString("KhoaHoc"));
            LoadProperty(IdNguonKinhPhiProperty, dr.GetInt32("IdNguonKinhPhi"));
            LoadProperty(LastEdited_UserProperty, dr.GetInt64("LastEdited_User"));
            LoadProperty(LastEdited_DateProperty, dr.GetSmartDate("LastEdited_Date"));
            LoadProperty(TongSoTietProperty, dr.GetInt32("TongSoTiet"));
            LoadProperty(Backup01Property, dr.GetString("Backup01"));
            LoadProperty(Backup02Property, dr.GetString("Backup02"));
            LoadProperty(Backup03Property, dr.GetString("Backup03"));
            LoadProperty(Backup04Property, dr.GetString("Backup04"));
            LoadProperty(Backup05Property, dr.GetInt32("Backup05"));
            LoadProperty(Backup06Property, dr.GetInt32("Backup06"));
            LoadProperty(IDChuyenKhoaProperty, dr.GetInt64("idChuyenKhoa"));
            LoadProperty(TenCanBoProperty, dr.GetString("TenCanBoPhuTrachNgoai"));
            LoadProperty(GioiTinhProperty, dr.GetString("GioiTinh"));
          //  LoadProperty(LoaiPhieuProperty, dr.GetByte("LoaiPhieu"));
            LoadProperty(NoiCongTacProperty, dr.GetString("NoiCongTac"));
            LoadProperty(NgaySinhProperty, dr.GetDateTime("NgaySinh"));
            LoadProperty(TrinhDoProperty, dr.GetString("TrinhDo"));
            LoadProperty(GioiTinhCBTProperty, dr.GetString("GioiTinhCBT"));
            LoadProperty(IdProperty, dr.GetInt32("IDHocVien"));
            //LoadProperty(IdTrinhDoProperty, dr.GetInt64("IdTrinhDo"));
            var args = new DataPortalHookArgs(dr);
            OnFetchRead(args);
        }
        /// <summary>
        /// Inserts a new <see cref="DT_LienTuc_LopHoc"/> object in the database.
        /// </summary>
        protected override void DataPortal_Insert()
        {
            using (var ctx = TransactionManager<SqlConnection, SqlTransaction>.GetManager("Connection"))
            {
                using (var cmd = new SqlCommand("dbo.DT_LienTuc_LopHoc_add", ctx.Connection))
                {
                    cmd.Transaction = ctx.Transaction;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@MaLop", ReadProperty(MaLopProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@TenLop", ReadProperty(TenLopProperty) == null ? (object)DBNull.Value : ReadProperty(TenLopProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@DoiTuong", ReadProperty(DoiTuongProperty) == null ? (object)DBNull.Value : ReadProperty(DoiTuongProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@NguonKinhPhi", ReadProperty(NguonKinhPhiProperty) == null ? (object)DBNull.Value : ReadProperty(NguonKinhPhiProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@idCanBoPhuTrach", ReadProperty(IdCanBoPhuTrachProperty) == null ? (object)DBNull.Value : ReadProperty(IdCanBoPhuTrachProperty).Value).DbType = DbType.Int64;
                    cmd.Parameters.AddWithValue("@idCanBoPhoiHop", ReadProperty(IdCanBoPhoiHopProperty) == null ? (object)DBNull.Value : ReadProperty(IdCanBoPhoiHopProperty).Value).DbType = DbType.Int64;
                    cmd.Parameters.AddWithValue("@NgayBatDau", ReadProperty(NgayBatDauProperty)).DbType = DbType.DateTime;
                    cmd.Parameters.AddWithValue("@NgayKetThuc", ReadProperty(NgayKetThucProperty)).DbType = DbType.DateTime;
                    cmd.Parameters.AddWithValue("@HocPhi", ReadProperty(HocPhiProperty) == null ? (object)DBNull.Value : ReadProperty(HocPhiProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@idCanBoGiangVien1", ReadProperty(IdCanBoGiangVien1Property) == null ? (object)DBNull.Value : ReadProperty(IdCanBoGiangVien1Property).Value).DbType = DbType.Int64;
                    cmd.Parameters.AddWithValue("@idCanBoGiangVien2", ReadProperty(IdCanBoGiangVien2Property) == null ? (object)DBNull.Value : ReadProperty(IdCanBoGiangVien2Property).Value).DbType = DbType.Int64;
                    cmd.Parameters.AddWithValue("@idCanBoGiangVien3", ReadProperty(IdCanBoGiangVien3Property) == null ? (object)DBNull.Value : ReadProperty(IdCanBoGiangVien3Property).Value).DbType = DbType.Int64;
                    cmd.Parameters.AddWithValue("@idCanBoGiangVien4", ReadProperty(IdCanBoGiangVien4Property) == null ? (object)DBNull.Value : ReadProperty(IdCanBoGiangVien4Property).Value).DbType = DbType.Int64;
                    cmd.Parameters.AddWithValue("@idCanBoGiangVien5", ReadProperty(IdCanBoGiangVien5Property) == null ? (object)DBNull.Value : ReadProperty(IdCanBoGiangVien5Property).Value).DbType = DbType.Int64;
                    cmd.Parameters.AddWithValue("@idKhungLopHoc", ReadProperty(IdKhungLopHocProperty) == null ? (object)DBNull.Value : ReadProperty(IdKhungLopHocProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@KhoaHoc", ReadProperty(KhoaHocProperty) == null ? (object)DBNull.Value : ReadProperty(KhoaHocProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@IdNguonKinhPhi", ReadProperty(IdNguonKinhPhiProperty) == null ? (object)DBNull.Value : ReadProperty(IdNguonKinhPhiProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@LastEdited_User", ReadProperty(LastEdited_UserProperty) == null ? (object)DBNull.Value : ReadProperty(LastEdited_UserProperty).Value).DbType = DbType.Int64;
                    cmd.Parameters.AddWithValue("@LastEdited_Date", ReadProperty(LastEdited_DateProperty).DBValue).DbType = DbType.DateTime;
                    cmd.Parameters.AddWithValue("@TongSoTiet", ReadProperty(TongSoTietProperty) == null ? (object)DBNull.Value : ReadProperty(TongSoTietProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@Backup01", ReadProperty(Backup01Property) == null ? (object)DBNull.Value : ReadProperty(Backup01Property)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@Backup02", ReadProperty(Backup02Property) == null ? (object)DBNull.Value : ReadProperty(Backup02Property)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@Backup03", ReadProperty(Backup03Property) == null ? (object)DBNull.Value : ReadProperty(Backup03Property)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@Backup04", ReadProperty(Backup04Property) == null ? (object)DBNull.Value : ReadProperty(Backup04Property)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@Backup05", ReadProperty(Backup05Property) == null ? (object)DBNull.Value : ReadProperty(Backup05Property).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@Backup06", ReadProperty(Backup06Property) == null ? (object)DBNull.Value : ReadProperty(Backup06Property).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@TenCanBo", ReadProperty(TenCanBoProperty) == null ? (object)DBNull.Value : ReadProperty(TenCanBoProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@GioiTinh", ReadProperty(GioiTinhProperty) == null ? (object)DBNull.Value : ReadProperty(GioiTinhProperty)).DbType = DbType.String;
                    //cmd.Parameters.AddWithValue("@idTrinhDo", ReadProperty(IdTrinhDoProperty) == null ? (object)DBNull.Value : ReadProperty(IdTrinhDoProperty).Value).DbType = DbType.Int64;
                  //  cmd.Parameters.AddWithValue("@LoaiPhieu", ReadProperty(LoaiPhieuProperty) == null ? (object)DBNull.Value : ReadProperty(LoaiPhieuProperty).Value).DbType = DbType.Byte;
                    var args = new DataPortalHookArgs(cmd);
                    OnInsertPre(args);
                    cmd.ExecuteNonQuery();
                    OnInsertPost(args);
                }
                ctx.Commit();
            }
        }

        /// <summary>
        /// Updates in the database all changes made to the <see cref="DT_LienTuc_LopHoc"/> object.
        /// </summary>
        protected override void DataPortal_Update()
        {
            using (var ctx = TransactionManager<SqlConnection, SqlTransaction>.GetManager("Connection"))
            {
                using (var cmd = new SqlCommand("dbo.DT_LienTuc_LopHoc_update", ctx.Connection))
                {
                    cmd.Transaction = ctx.Transaction;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@MaLop", ReadProperty(MaLopProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@TenLop", ReadProperty(TenLopProperty) == null ? (object)DBNull.Value : ReadProperty(TenLopProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@DoiTuong", ReadProperty(DoiTuongProperty) == null ? (object)DBNull.Value : ReadProperty(DoiTuongProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@NguonKinhPhi", ReadProperty(NguonKinhPhiProperty) == null ? (object)DBNull.Value : ReadProperty(NguonKinhPhiProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@idCanBoPhuTrach", ReadProperty(IdCanBoPhuTrachProperty) == null ? (object)DBNull.Value : ReadProperty(IdCanBoPhuTrachProperty).Value).DbType = DbType.Int64;
                    cmd.Parameters.AddWithValue("@idCanBoPhoiHop", ReadProperty(IdCanBoPhoiHopProperty) == null ? (object)DBNull.Value : ReadProperty(IdCanBoPhoiHopProperty).Value).DbType = DbType.Int64;
                    cmd.Parameters.AddWithValue("@NgayBatDau", ReadProperty(NgayBatDauProperty)).DbType = DbType.DateTime;
                    cmd.Parameters.AddWithValue("@NgayKetThuc", ReadProperty(NgayKetThucProperty)).DbType = DbType.DateTime;
                    cmd.Parameters.AddWithValue("@HocPhi", ReadProperty(HocPhiProperty) == null ? (object)DBNull.Value : ReadProperty(HocPhiProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@idCanBoGiangVien1", ReadProperty(IdCanBoGiangVien1Property) == null ? (object)DBNull.Value : ReadProperty(IdCanBoGiangVien1Property).Value).DbType = DbType.Int64;
                    cmd.Parameters.AddWithValue("@idCanBoGiangVien2", ReadProperty(IdCanBoGiangVien2Property) == null ? (object)DBNull.Value : ReadProperty(IdCanBoGiangVien2Property).Value).DbType = DbType.Int64;
                    cmd.Parameters.AddWithValue("@idCanBoGiangVien3", ReadProperty(IdCanBoGiangVien3Property) == null ? (object)DBNull.Value : ReadProperty(IdCanBoGiangVien3Property).Value).DbType = DbType.Int64;
                    cmd.Parameters.AddWithValue("@idCanBoGiangVien4", ReadProperty(IdCanBoGiangVien4Property) == null ? (object)DBNull.Value : ReadProperty(IdCanBoGiangVien4Property).Value).DbType = DbType.Int64;
                    cmd.Parameters.AddWithValue("@idCanBoGiangVien5", ReadProperty(IdCanBoGiangVien5Property) == null ? (object)DBNull.Value : ReadProperty(IdCanBoGiangVien5Property).Value).DbType = DbType.Int64;
                    cmd.Parameters.AddWithValue("@idKhungLopHoc", ReadProperty(IdKhungLopHocProperty) == null ? (object)DBNull.Value : ReadProperty(IdKhungLopHocProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@KhoaHoc", ReadProperty(KhoaHocProperty) == null ? (object)DBNull.Value : ReadProperty(KhoaHocProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@IdNguonKinhPhi", ReadProperty(IdNguonKinhPhiProperty) == null ? (object)DBNull.Value : ReadProperty(IdNguonKinhPhiProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@LastEdited_User", ReadProperty(LastEdited_UserProperty) == null ? (object)DBNull.Value : ReadProperty(LastEdited_UserProperty).Value).DbType = DbType.Int64;
                    cmd.Parameters.AddWithValue("@LastEdited_Date", ReadProperty(LastEdited_DateProperty).DBValue).DbType = DbType.DateTime;
                    cmd.Parameters.AddWithValue("@TongSoTiet", ReadProperty(TongSoTietProperty) == null ? (object)DBNull.Value : ReadProperty(TongSoTietProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@Backup01", ReadProperty(Backup01Property) == null ? (object)DBNull.Value : ReadProperty(Backup01Property)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@Backup02", ReadProperty(Backup02Property) == null ? (object)DBNull.Value : ReadProperty(Backup02Property)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@Backup03", ReadProperty(Backup03Property) == null ? (object)DBNull.Value : ReadProperty(Backup03Property)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@Backup04", ReadProperty(Backup04Property) == null ? (object)DBNull.Value : ReadProperty(Backup04Property)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@Backup05", ReadProperty(Backup05Property) == null ? (object)DBNull.Value : ReadProperty(Backup05Property).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@Backup06", ReadProperty(Backup06Property) == null ? (object)DBNull.Value : ReadProperty(Backup06Property).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@TenCanBo", ReadProperty(TenCanBoProperty) == null ? (object)DBNull.Value : ReadProperty(TenCanBoProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@GioiTinh", ReadProperty(GioiTinhProperty) == null ? (object)DBNull.Value : ReadProperty(GioiTinhProperty)).DbType = DbType.String;
                    //cmd.Parameters.AddWithValue("@idTrinhDo", ReadProperty(IdTrinhDoProperty) == null ? (object)DBNull.Value : ReadProperty(IdTrinhDoProperty).Value).DbType = DbType.Int64;
               //     cmd.Parameters.AddWithValue("@LoaiPhieu", ReadProperty(LoaiPhieuProperty) == null ? (object)DBNull.Value : ReadProperty(LoaiPhieuProperty).Value).DbType = DbType.Byte;
                    var args = new DataPortalHookArgs(cmd);
                    OnUpdatePre(args);
                    cmd.ExecuteNonQuery();
                    OnUpdatePost(args);
                }
                ctx.Commit();
            }
        }

        /// <summary>
        /// Self deletes the <see cref="DT_LienTuc_LopHoc"/> object.
        /// </summary>
        protected override void DataPortal_DeleteSelf()
        {
            DataPortal_Delete(MaLop);
        }

        /// <summary>
        /// Deletes the <see cref="DT_LienTuc_LopHoc"/> object from database.
        /// </summary>
        /// <param name="maLop">The delete criteria.</param>
        protected void DataPortal_Delete(string maLop)
        {
            using (var ctx = TransactionManager<SqlConnection, SqlTransaction>.GetManager("Connection"))
            {
                using (var cmd = new SqlCommand("dbo.DT_LienTuc_LopHoc_delete", ctx.Connection))
                {
                    cmd.Transaction = ctx.Transaction;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@MaLop", maLop).DbType = DbType.String;
                    var args = new DataPortalHookArgs(cmd, maLop);
                    OnDeletePre(args);
                    cmd.ExecuteNonQuery();
                    OnDeletePost(args);
                }
                ctx.Commit();
            }
        }

        #endregion

        #region Pseudo Events

        /// <summary>
        /// Occurs after setting all defaults for object creation.
        /// </summary>
        partial void OnCreate(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Delete, after setting query parameters and before the delete operation.
        /// </summary>
        partial void OnDeletePre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Delete, after the delete operation, before Commit().
        /// </summary>
        partial void OnDeletePost(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after setting query parameters and before the fetch operation.
        /// </summary>
        partial void OnFetchPre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after the fetch operation (object or collection is fully loaded and set up).
        /// </summary>
        partial void OnFetchPost(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after the low level fetch operation, before the data reader is destroyed.
        /// </summary>
        partial void OnFetchRead(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after setting query parameters and before the update operation.
        /// </summary>
        partial void OnUpdatePre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Insert, after the update operation, before setting back row identifiers (RowVersion) and Commit().
        /// </summary>
        partial void OnUpdatePost(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Insert, after setting query parameters and before the insert operation.
        /// </summary>
        partial void OnInsertPre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Insert, after the insert operation, before setting back row identifiers (ID and RowVersion) and Commit().
        /// </summary>
        partial void OnInsertPost(DataPortalHookArgs args);

        #endregion

    }
}
