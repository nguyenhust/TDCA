//  This file was generated by CSLA Object Generator - CslaGenFork v4.3.0
//
// Filename:    HC_BieuMauISO_Info
// ObjectType:  HC_BieuMauISO_Info
// CSLAType:    EditableChild

using System;
using System.Data;
using System.Data.SqlClient;
using Csla;
using Csla.Data;
using NETLINK.LIB;

namespace ModuleHanhChinh.LIB
{

    /// <summary>
    /// HC_BieuMauISO_Info (editable child object).<br/>
    /// This is a generated base class of <see cref="HC_BieuMauISO_Info"/> business object.
    /// </summary>
    /// <remarks>
    /// This class is an item of <see cref="HC_BieuMauISO_Coll"/> collection.
    /// </remarks>
    [Serializable]
    public partial class HC_BieuMauISO_Info : BusinessBase<HC_BieuMauISO_Info>
    {

        #region Static Fields

        private static int _lastID;

        #endregion

        #region Business Properties

        /// <summary>
        /// Maintains metadata about <see cref="ID"/> property.
        /// </summary>
        public static readonly PropertyInfo<int> IDProperty = RegisterProperty<int>(p => p.ID, "ID");
        /// <summary>
        /// Gets the ID.
        /// </summary>
        /// <value>The ID.</value>
        public int ID
        {
            get { return GetProperty(IDProperty); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="MaSo"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> MaSoProperty = RegisterProperty<string>(p => p.MaSo, "Ma So");
        /// <summary>
        /// Gets or sets the Ma So.
        /// </summary>
        /// <value>The Ma So.</value>
        public string MaSo
        {
            get { return GetProperty(MaSoProperty); }
            set { SetProperty(MaSoProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="NgayBatDau"/> property.
        /// </summary>
        public static readonly PropertyInfo<SmartDate> NgayBatDauProperty = RegisterProperty<SmartDate>(p => p.NgayBatDau, "Ngay Bat Dau");
        /// <summary>
        /// Gets or sets the Ngay Bat Dau.
        /// </summary>
        /// <value>The Ngay Bat Dau.</value>
        public string NgayBatDau
        {
            get { return GetPropertyConvert<SmartDate, String>(NgayBatDauProperty); }
            set { SetPropertyConvert<SmartDate, String>(NgayBatDauProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="Link"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> LinkProperty = RegisterProperty<string>(p => p.Link, "Link");
        /// <summary>
        /// Gets or sets the Link.
        /// </summary>
        /// <value>The Link.</value>
        public string Link
        {
            get { return GetProperty(LinkProperty); }
            set { SetProperty(LinkProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="NoiDungApDung"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> NoiDungApDungProperty = RegisterProperty<string>(p => p.NoiDungApDung, "Noi Dung Ap Dung");
        /// <summary>
        /// Gets or sets the Noi Dung Ap Dung.
        /// </summary>
        /// <value>The Noi Dung Ap Dung.</value>
        public string NoiDungApDung
        {
            get { return GetProperty(NoiDungApDungProperty); }
            set { SetProperty(NoiDungApDungProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="GhiChu"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> GhiChuProperty = RegisterProperty<string>(p => p.GhiChu, "Ghi Chu");
        /// <summary>
        /// Gets or sets the Ghi Chu.
        /// </summary>
        /// <value>The Ghi Chu.</value>
        public string GhiChu
        {
            get { return GetProperty(GhiChuProperty); }
            set { SetProperty(GhiChuProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="LastEdited_UserID"/> property.
        /// </summary>
        public static readonly PropertyInfo<Int64?> LastEdited_UserIDProperty = RegisterProperty<Int64?>(p => p.LastEdited_UserID, "Last Edited User ID");
        /// <summary>
        /// Gets or sets the Last Edited User ID.
        /// </summary>
        /// <value>The Last Edited User ID.</value>
        public Int64? LastEdited_UserID
        {
            get { return GetProperty(LastEdited_UserIDProperty); }
            set { SetProperty(LastEdited_UserIDProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="LastEdited_Date"/> property.
        /// </summary>
        public static readonly PropertyInfo<SmartDate> LastEdited_DateProperty = RegisterProperty<SmartDate>(p => p.LastEdited_Date, "Last Edited Date");
        /// <summary>
        /// Gets or sets the Last Edited Date.
        /// </summary>
        /// <value>The Last Edited Date.</value>
        public string LastEdited_Date
        {
            get { return GetPropertyConvert<SmartDate, String>(LastEdited_DateProperty); }
            set { SetPropertyConvert<SmartDate, String>(LastEdited_DateProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="idBoPhan"/> property.
        /// </summary>
        public static readonly PropertyInfo<int?> IdBoPhanProperty = RegisterProperty<int?>(p => p.IdBoPhan, "id Bo Phan");
        /// <summary>
        /// Gets or sets the id Bo Phan.
        /// </summary>
        /// <value>The id Bo Phan.</value>
        public int? IdBoPhan
        {
            get { return GetProperty(IdBoPhanProperty); }
            set { SetProperty(IdBoPhanProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="idUserUp"/> property.
        /// </summary>
        public static readonly PropertyInfo<Int64?> IdUserUpProperty = RegisterProperty<Int64?>(p => p.IdUserUp, "id User Up");
        /// <summary>
        /// Gets or sets the id User Up.
        /// </summary>
        /// <value>The id User Up.</value>
        public Int64? IdUserUp
        {
            get { return GetProperty(IdUserUpProperty); }
            set { SetProperty(IdUserUpProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="Version"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> VersionProperty = RegisterProperty<string>(p => p.Version, "Version");
        /// <summary>
        /// Gets or sets the Version.
        /// </summary>
        /// <value>The Version.</value>
        public string Version
        {
            get { return GetProperty(VersionProperty); }
            set { SetProperty(VersionProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="Ten"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> TenProperty = RegisterProperty<string>(p => p.Ten, "Ten");
        /// <summary>
        /// Gets or sets the Ten.
        /// </summary>
        /// <value>The Ten.</value>
        public string Ten
        {
            get { return GetProperty(TenProperty); }
            set { SetProperty(TenProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="Ten"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> TenBoPhanProperty = RegisterProperty<string>(p => p.TenBoPhan, "Ten Bo Phan");
        /// <summary>
        /// Gets or sets the Ten.
        /// </summary>
        /// <value>The Ten.</value>
        public string TenBoPhan
        {
            get { return GetProperty(TenBoPhanProperty); }
            set { SetProperty(TenBoPhanProperty, value); }
        }
        /// <summary>
        /// Maintains metadata about <see cref="Ten"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> TenUserUpProperty = RegisterProperty<string>(p => p.TenUserUp, "Ten TenUserUp Phan");
        /// <summary>
        /// Gets or sets the Ten.
        /// </summary>
        /// <value>The Ten.</value>
        public string TenUserUp
        {
            get { return GetProperty(TenUserUpProperty); }
            set { SetProperty(TenUserUpProperty, value); }
        }
        public DateTime DateNgayBatDau
        {
            get { return GetProperty(NgayBatDauProperty); }
        }
        #endregion

        #region Factory Methods

        /// <summary>
        /// Factory method. Creates a new <see cref="HC_BieuMauISO_Info"/> object.
        /// </summary>
        /// <returns>A reference to the created <see cref="HC_BieuMauISO_Info"/> object.</returns>
        internal static HC_BieuMauISO_Info NewHC_BieuMauISO_Info()
        {
            return DataPortal.CreateChild<HC_BieuMauISO_Info>();
        }

        /// <summary>
        /// Factory method. Asynchronously creates a new <see cref="HC_BieuMauISO_Info"/> object.
        /// </summary>
        /// <param name="callback">The completion callback method.</param>
        internal static void NewHC_BieuMauISO_Info(EventHandler<DataPortalResult<HC_BieuMauISO_Info>> callback)
        {
            DataPortal.BeginCreate<HC_BieuMauISO_Info>(callback);
        }

        /// <summary>
        /// Factory method. Loads a <see cref="HC_BieuMauISO_Info"/> object from the given SafeDataReader.
        /// </summary>
        /// <param name="dr">The SafeDataReader to use.</param>
        /// <returns>A reference to the fetched <see cref="HC_BieuMauISO_Info"/> object.</returns>
        internal static HC_BieuMauISO_Info GetHC_BieuMauISO_Info(SafeDataReader dr)
        {
            HC_BieuMauISO_Info obj = new HC_BieuMauISO_Info();
            // show the framework that this is a child object
            obj.MarkAsChild();
            obj.Fetch(dr);
            obj.MarkOld();
            // check all object rules and property rules
            obj.BusinessRules.CheckRules();
            return obj;
        }

        #endregion

        #region Constructor

        /// <summary>
        /// Initializes a new instance of the <see cref="HC_BieuMauISO_Info"/> class.
        /// </summary>
        /// <remarks> Do not use to create a Csla object. Use factory methods instead.</remarks>
        private HC_BieuMauISO_Info()
        {
            // Prevent direct creation

            // show the framework that this is a child object
            MarkAsChild();
        }

        #endregion

        #region Data Access

        /// <summary>
        /// Loads default values for the <see cref="HC_BieuMauISO_Info"/> object properties.
        /// </summary>
        [Csla.RunLocal]
        protected override void Child_Create()
        {
            LoadProperty(IDProperty, System.Threading.Interlocked.Decrement(ref _lastID));
            LoadProperty(MaSoProperty, null);
            LoadProperty(NgayBatDauProperty, null);
            LoadProperty(LinkProperty, null);
            LoadProperty(NoiDungApDungProperty, null);
            LoadProperty(GhiChuProperty, null);
            LoadProperty(LastEdited_DateProperty, null);
            LoadProperty(VersionProperty, null);
            LoadProperty(TenProperty, null);
            LoadProperty(TenBoPhanProperty, null);
            var args = new DataPortalHookArgs();
            OnCreate(args);
            base.Child_Create();
        }

        /// <summary>
        /// Loads a <see cref="HC_BieuMauISO_Info"/> object from the given SafeDataReader.
        /// </summary>
        /// <param name="dr">The SafeDataReader to use.</param>
        private void Fetch(SafeDataReader dr)
        {
            // Value properties
            LoadProperty(IDProperty, dr.GetInt32("ID"));
            LoadProperty(MaSoProperty, dr.GetString("MaSo"));
            LoadProperty(NgayBatDauProperty, dr.GetDateTime("NgayBatDau"));
            LoadProperty(LinkProperty, dr.GetString("Link"));
            LoadProperty(NoiDungApDungProperty, dr.GetString("NoiDungApDung"));
            LoadProperty(GhiChuProperty, dr.GetString("GhiChu"));
    LoadProperty(LastEdited_UserIDProperty, dr.GetInt64("LastEdited_UserID"));
            LoadProperty(LastEdited_DateProperty, dr.GetDateTime("LastEdited_Date"));
            LoadProperty(IdBoPhanProperty, dr.GetInt32("IdBoPhan"));
            LoadProperty(IdUserUpProperty, dr.GetInt64("IdUserUp"));
            LoadProperty(VersionProperty, dr.GetString("Version"));
            LoadProperty(TenProperty, dr.GetString("Ten"));
            LoadProperty(TenBoPhanProperty, dr.GetString("TenBoPhan"));
            LoadProperty(TenUserUpProperty, dr.GetString("TenUserUp"));
            var args = new DataPortalHookArgs(dr);
            OnFetchRead(args);
        }

        /// <summary>
        /// Inserts a new <see cref="HC_BieuMauISO_Info"/> object in the database.
        /// </summary>
        private void Child_Insert()
        {
            using (var ctx = TransactionManager<SqlConnection, SqlTransaction>.GetManager("Connection"))
            {
                using (var cmd = new SqlCommand("dbo.HC_BieuMauISO_Info_add", ctx.Connection))
                {
                    cmd.Transaction = ctx.Transaction;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@ID", ReadProperty(IDProperty)).Direction = ParameterDirection.Output;
                    cmd.Parameters.AddWithValue("@MaSo", ReadProperty(MaSoProperty) == null ? (object)DBNull.Value : ReadProperty(MaSoProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@NgayBatDau", ReadProperty(NgayBatDauProperty).DBValue).DbType = DbType.DateTime;
                    cmd.Parameters.AddWithValue("@Link", ReadProperty(LinkProperty) == null ? (object)DBNull.Value : ReadProperty(LinkProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@NoiDungApDung", ReadProperty(NoiDungApDungProperty) == null ? (object)DBNull.Value : ReadProperty(NoiDungApDungProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@GhiChu", ReadProperty(GhiChuProperty) == null ? (object)DBNull.Value : ReadProperty(GhiChuProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@LastEdited_UserID", ReadProperty(LastEdited_UserIDProperty) == null ? (object)DBNull.Value : ReadProperty(LastEdited_UserIDProperty).Value).DbType = DbType.Int64;
                    cmd.Parameters.AddWithValue("@LastEdited_Date", ReadProperty(LastEdited_DateProperty).DBValue).DbType = DbType.DateTime;
                    cmd.Parameters.AddWithValue("@idBoPhan", ReadProperty(IdBoPhanProperty) == null ? (object)DBNull.Value : ReadProperty(IdBoPhanProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@idUserUp", ReadProperty(IdUserUpProperty) == null ? (object)DBNull.Value : ReadProperty(IdUserUpProperty).Value).DbType = DbType.Int64;
                    cmd.Parameters.AddWithValue("@Version", ReadProperty(VersionProperty) == null ? (object)DBNull.Value : ReadProperty(VersionProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@Ten", ReadProperty(TenProperty) == null ? (object)DBNull.Value : ReadProperty(TenProperty)).DbType = DbType.String;
                    var args = new DataPortalHookArgs(cmd);
                    OnInsertPre(args);
                    cmd.ExecuteNonQuery();
                    OnInsertPost(args);
                    LoadProperty(IDProperty, (int) cmd.Parameters["@ID"].Value);
                }
            }
        }

        /// <summary>
        /// Updates in the database all changes made to the <see cref="HC_BieuMauISO_Info"/> object.
        /// </summary>
        private void Child_Update()
        {
            if (!IsDirty)
                return;

            using (var ctx = TransactionManager<SqlConnection, SqlTransaction>.GetManager("Connection"))
            {
                using (var cmd = new SqlCommand("dbo.HC_BieuMauISO_Info_update", ctx.Connection))
                {
                    cmd.Transaction = ctx.Transaction;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@ID", ReadProperty(IDProperty)).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@MaSo", ReadProperty(MaSoProperty) == null ? (object)DBNull.Value : ReadProperty(MaSoProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@NgayBatDau", ReadProperty(NgayBatDauProperty).DBValue).DbType = DbType.DateTime;
                    cmd.Parameters.AddWithValue("@Link", ReadProperty(LinkProperty) == null ? (object)DBNull.Value : ReadProperty(LinkProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@NoiDungApDung", ReadProperty(NoiDungApDungProperty) == null ? (object)DBNull.Value : ReadProperty(NoiDungApDungProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@GhiChu", ReadProperty(GhiChuProperty) == null ? (object)DBNull.Value : ReadProperty(GhiChuProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@LastEdited_UserID", ReadProperty(LastEdited_UserIDProperty) == null ? (object)DBNull.Value : ReadProperty(LastEdited_UserIDProperty).Value).DbType = DbType.Int64;
                    cmd.Parameters.AddWithValue("@LastEdited_Date", ReadProperty(LastEdited_DateProperty).DBValue).DbType = DbType.DateTime;
                    cmd.Parameters.AddWithValue("@idBoPhan", ReadProperty(IdBoPhanProperty) == null ? (object)DBNull.Value : ReadProperty(IdBoPhanProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@idUserUp", ReadProperty(IdUserUpProperty) == null ? (object)DBNull.Value : ReadProperty(IdUserUpProperty).Value).DbType = DbType.Int64;
                    cmd.Parameters.AddWithValue("@Version", ReadProperty(VersionProperty) == null ? (object)DBNull.Value : ReadProperty(VersionProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@Ten", ReadProperty(TenProperty) == null ? (object)DBNull.Value : ReadProperty(TenProperty)).DbType = DbType.String;
                    var args = new DataPortalHookArgs(cmd);
                    OnUpdatePre(args);
                    cmd.ExecuteNonQuery();
                    OnUpdatePost(args);
                }
            }
        }

        /// <summary>
        /// Self deletes the <see cref="HC_BieuMauISO_Info"/> object from database.
        /// </summary>
        private void Child_DeleteSelf()
        {
            using (var ctx = TransactionManager<SqlConnection, SqlTransaction>.GetManager("Connection"))
            {
                using (var cmd = new SqlCommand("dbo.HC_BieuMauISO_Info_delete", ctx.Connection))
                {
                    cmd.Transaction = ctx.Transaction;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@ID", ReadProperty(IDProperty)).DbType = DbType.Int32;
                    var args = new DataPortalHookArgs(cmd);
                    OnDeletePre(args);
                    cmd.ExecuteNonQuery();
                    OnDeletePost(args);
                }
            }
        }

        #endregion

        #region Pseudo Events

        /// <summary>
        /// Occurs after setting all defaults for object creation.
        /// </summary>
        partial void OnCreate(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Delete, after setting query parameters and before the delete operation.
        /// </summary>
        partial void OnDeletePre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Delete, after the delete operation, before Commit().
        /// </summary>
        partial void OnDeletePost(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after setting query parameters and before the fetch operation.
        /// </summary>
        partial void OnFetchPre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after the fetch operation (object or collection is fully loaded and set up).
        /// </summary>
        partial void OnFetchPost(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after the low level fetch operation, before the data reader is destroyed.
        /// </summary>
        partial void OnFetchRead(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after setting query parameters and before the update operation.
        /// </summary>
        partial void OnUpdatePre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Insert, after the update operation, before setting back row identifiers (RowVersion) and Commit().
        /// </summary>
        partial void OnUpdatePost(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Insert, after setting query parameters and before the insert operation.
        /// </summary>
        partial void OnInsertPre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Insert, after the insert operation, before setting back row identifiers (ID and RowVersion) and Commit().
        /// </summary>
        partial void OnInsertPost(DataPortalHookArgs args);

        #endregion

    }
}
