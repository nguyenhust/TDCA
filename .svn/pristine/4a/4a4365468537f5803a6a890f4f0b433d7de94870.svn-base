//  This file was generated by CSLA Object Generator - CslaGenFork v4.3.0
//
// Filename:    DIC_Tinh
// ObjectType:  DIC_Tinh
// CSLAType:    EditableRoot

using System;
using System.Data;
using System.Data.SqlClient;
using Csla;
using Csla.Data;
using NETLINK.LIB;

namespace DanhMuc.LIB
{

    /// <summary>
    /// DIC_Tinh (editable root object).<br/>
    /// This is a generated base class of <see cref="DIC_Tinh"/> business object.
    /// </summary>
    /// <remarks>
    /// This class contains one child collection:<br/>
    /// - <see cref="DIC_TinhChild"/> of type <see cref="DIC_TinhChild_Coll"/> (1:M relation to <see cref="DIC_TinhChild_Info"/>)
    /// </remarks>
    [Serializable]
    public partial class DIC_Tinh : BusinessBase<DIC_Tinh>
    {

        #region Business Properties

        /// <summary>
        /// Maintains metadata about <see cref="ID"/> property.
        /// </summary>
        public static readonly PropertyInfo<Int64> IDProperty = RegisterProperty<Int64>(p => p.ID, "ID");
        /// <summary>
        /// Gets or sets the ID.
        /// </summary>
        /// <value>The ID.</value>
        public Int64 ID
        {
            get { return GetProperty(IDProperty); }
            
        }

        /// <summary>
        /// Maintains metadata about <see cref="Ma"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> MaProperty = RegisterProperty<string>(p => p.Ma, "Ma");
        /// <summary>
        /// Gets or sets the Ma.
        /// </summary>
        /// <value>The Ma.</value>
        public string Ma
        {
            get { return GetProperty(MaProperty); }
            set { SetProperty(MaProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="MaDK"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> MaDKProperty = RegisterProperty<string>(p => p.MaDK, "Ma DK");
        /// <summary>
        /// Gets or sets the Ma DK.
        /// </summary>
        /// <value>The Ma DK.</value>
        public string MaDK
        {
            get { return GetProperty(MaDKProperty); }
            set { SetProperty(MaDKProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="TieuDe"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> TieuDeProperty = RegisterProperty<string>(p => p.TieuDe, "Tieu De");
        /// <summary>
        /// Gets or sets the Tieu De.
        /// </summary>
        /// <value>The Tieu De.</value>
        public string TieuDe
        {
            get { return GetProperty(TieuDeProperty); }
            set { SetProperty(TieuDeProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="Ten"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> TenProperty = RegisterProperty<string>(p => p.Ten, "Ten");
        /// <summary>
        /// Gets or sets the Ten.
        /// </summary>
        /// <value>The Ten.</value>
        public string Ten
        {
            get { return GetProperty(TenProperty); }
            set { SetProperty(TenProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="IDRefer"/> property.
        /// </summary>
        public static readonly PropertyInfo<Int64?> IDReferProperty = RegisterProperty<Int64?>(p => p.IDRefer, "IDRefer");
        /// <summary>
        /// Gets or sets the IDRefer.
        /// </summary>
        /// <value>The IDRefer.</value>
        public Int64? IDRefer
        {
            get { return GetProperty(IDReferProperty); }
            set { SetProperty(IDReferProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="SuDung"/> property.
        /// </summary>
        public static readonly PropertyInfo<bool?> SuDungProperty = RegisterProperty<bool?>(p => p.SuDung, "Su Dung");
        /// <summary>
        /// Gets or sets the Su Dung.
        /// </summary>
        /// <value><c>true</c> if Su Dung; <c>false</c> if not Su Dung; otherwise, <c>null</c>.</value>
        public bool? SuDung
        {
            get { return GetProperty(SuDungProperty); }
            set { SetProperty(SuDungProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="GhiChu"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> GhiChuProperty = RegisterProperty<string>(p => p.GhiChu, "Ghi Chu");
        /// <summary>
        /// Gets or sets the Ghi Chu.
        /// </summary>
        /// <value>The Ghi Chu.</value>
        public string GhiChu
        {
            get { return GetProperty(GhiChuProperty); }
            set { SetProperty(GhiChuProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about child <see cref="DIC_TinhChild"/> property.
        /// </summary>
        public static readonly PropertyInfo<DIC_TinhChild_Coll> DIC_TinhChildProperty = RegisterProperty<DIC_TinhChild_Coll>(p => p.DIC_TinhChild, "DIC Tinh Child", RelationshipTypes.Child);
        /// <summary>
        /// Gets the DIC Tinh Child ("parent load" child property).
        /// </summary>
        /// <value>The DIC Tinh Child.</value>
        public DIC_TinhChild_Coll DIC_TinhChild
        {
            get { return GetProperty(DIC_TinhChildProperty); }
            set { LoadProperty(DIC_TinhChildProperty, value); }
        }

        #endregion

        #region Factory Methods

        /// <summary>
        /// Factory method. Creates a new <see cref="DIC_Tinh"/> object.
        /// </summary>
        /// <returns>A reference to the created <see cref="DIC_Tinh"/> object.</returns>
        public static DIC_Tinh NewDIC_Tinh()
        {
             return DataPortal.Create<DIC_Tinh>();
        }

        /// <summary>
        /// Factory method. Loads a <see cref="DIC_Tinh"/> object, based on given parameters.
        /// </summary>
        /// <param name="id">The ID parameter of the DIC_Tinh to fetch.</param>
        /// <returns>A reference to the fetched <see cref="DIC_Tinh"/> object.</returns>
        public static DIC_Tinh GetDIC_Tinh(Int64 id)
        {
            return DataPortal.Fetch<DIC_Tinh>(id);
        }

        /// <summary>
        /// Factory method. Deletes a <see cref="DIC_Tinh"/> object, based on given parameters.
        /// </summary>
        /// <param name="id">The ID of the DIC_Tinh to delete.</param>
        public static void DeleteDIC_Tinh(Int64 id)
        {
            DataPortal.Delete<DIC_Tinh>(id);
        }

        /// <summary>
        /// Factory method. Asynchronously creates a new <see cref="DIC_Tinh"/> object.
        /// </summary>
        /// <param name="callback">The completion callback method.</param>
        public static void NewDIC_Tinh(EventHandler<DataPortalResult<DIC_Tinh>> callback)
        {
            DataPortal.BeginCreate<DIC_Tinh>(callback);
        }

        /// <summary>
        /// Factory method. Asynchronously loads a <see cref="DIC_Tinh"/> object, based on given parameters.
        /// </summary>
        /// <param name="id">The ID parameter of the DIC_Tinh to fetch.</param>
        /// <param name="callback">The completion callback method.</param>
        public static void GetDIC_Tinh(Int64 id, EventHandler<DataPortalResult<DIC_Tinh>> callback)
        {
            DataPortal.BeginFetch<DIC_Tinh>(id, callback);
        }

        /// <summary>
        /// Factory method. Asynchronously deletes a <see cref="DIC_Tinh"/> object, based on given parameters.
        /// </summary>
        /// <param name="id">The ID of the DIC_Tinh to delete.</param>
        /// <param name="callback">The completion callback method.</param>
        public static void DeleteDIC_Tinh(Int64 id, EventHandler<DataPortalResult<DIC_Tinh>> callback)
        {
            DataPortal.BeginDelete<DIC_Tinh>(id, callback);
        }

        public override DIC_Tinh Save()
        {
           return base.Save();
        }

        #endregion

        #region Validation
        protected override void AddBusinessRules()
        {
            BusinessRules.AddRule(new Csla.Rules.CommonRules.Required(TenProperty, "Tên Tỉnh khổng thế trống"));
            BusinessRules.AddRule(new Csla.Rules.CommonRules.Required(TieuDeProperty, "Tên Tiêu đề không thế trống"));
        }
        #endregion

       

        #region Constructor

        /// <summary>
        /// Initializes a new instance of the <see cref="DIC_Tinh"/> class.
        /// </summary>
        /// <remarks> Do not use to create a Csla object. Use factory methods instead.</remarks>
        private DIC_Tinh()
        {
            // Prevent direct creation
        }

        #endregion

        #region Data Access

        /// <summary>
        /// Loads default values for the <see cref="DIC_Tinh"/> object properties.
        /// </summary>
        [Csla.RunLocal]
        protected override void DataPortal_Create()
        {
            LoadProperty(MaProperty, null);
            LoadProperty(MaDKProperty, null);
            LoadProperty(GhiChuProperty, null);
            LoadProperty(DIC_TinhChildProperty, DataPortal.CreateChild<DIC_TinhChild_Coll>());
            var args = new DataPortalHookArgs();
            OnCreate(args);
            base.DataPortal_Create();
        }

        /// <summary>
        /// Loads a <see cref="DIC_Tinh"/> object from the database, based on given criteria.
        /// </summary>
        /// <param name="id">The ID.</param>
        /// 
        protected void DataPortal_Fetch(Int64 id)
        {
            using (var ctx = ConnectionManager<SqlConnection>.GetManager("Connection"))
            {
                using (var cmd = new SqlCommand("dbo.DIC_Tinh_Coll_Get", ctx.Connection))
                {
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@ID", id).DbType = DbType.Int64;
                    var args = new DataPortalHookArgs(cmd, id);
                    OnFetchPre(args);
                    cmd.ExecuteNonQuery();
                    Fetch(cmd);
                    OnFetchPost(args);
                }
            }
            // check all object rules and property rules
            BusinessRules.CheckRules();
        }

       

        private void Fetch(SqlCommand cmd)
        {
            using (var dr = new SafeDataReader(cmd.ExecuteReader()))
            {
                if (dr.Read())
                {
                    Fetch(dr);
                    FetchChildren(dr);
                }
            }
        }

        /// <summary>
        /// Loads a <see cref="DIC_Tinh"/> object from the given SafeDataReader.
        /// </summary>
        /// <param name="dr">The SafeDataReader to use.</param>
        private void Fetch(SafeDataReader dr)
        {
            // Value properties
            LoadProperty(IDProperty, dr.GetInt64("ID"));
            LoadProperty(MaProperty, dr.GetString("Ma"));
            LoadProperty(MaDKProperty, dr.GetString("MaDK"));
            LoadProperty(TieuDeProperty, dr.GetString("TieuDe"));
            LoadProperty(TenProperty, dr.GetString("Ten"));
            LoadProperty(IDReferProperty, dr.GetInt64("IDRefer"));
            LoadProperty(SuDungProperty, dr.GetBoolean("SuDung"));
            LoadProperty(GhiChuProperty, dr.GetString("GhiChu"));
            var args = new DataPortalHookArgs(dr);
            OnFetchRead(args);
        }

        /// <summary>
        /// Loads child objects from the given SafeDataReader.
        /// </summary>
        /// <param name="dr">The SafeDataReader to use.</param>
        private void FetchChildren(SafeDataReader dr)
        {
            dr.NextResult();
            LoadProperty(DIC_TinhChildProperty, DIC_TinhChild_Coll.GetDIC_TinhChild_Coll(dr));
        }

        /// <summary>
        /// Inserts a new <see cref="DIC_Tinh"/> object in the database.
        /// </summary>
        protected override void DataPortal_Insert()
        {
            using (var ctx = TransactionManager<SqlConnection, SqlTransaction>.GetManager("Connection"))
            {
                using (var cmd = new SqlCommand("dbo.DIC_Tinh_Info_Add", ctx.Connection))
                {
                    cmd.Transaction = ctx.Transaction;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@ID", ReadProperty(IDProperty)).Direction = ParameterDirection.Output;
                    cmd.Parameters.AddWithValue("@Ma", ReadProperty(MaProperty) == null ? (object)DBNull.Value : ReadProperty(MaProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@MaDK", ReadProperty(MaDKProperty) == null ? (object)DBNull.Value : ReadProperty(MaDKProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@TieuDe", ReadProperty(TieuDeProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@Ten", ReadProperty(TenProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@IDRefer", ReadProperty(IDReferProperty) == null ? (object)DBNull.Value : ReadProperty(IDReferProperty).Value).DbType = DbType.Int64;
                    cmd.Parameters.AddWithValue("@SuDung", ReadProperty(SuDungProperty) == null ? (object)DBNull.Value : ReadProperty(SuDungProperty).Value).DbType = DbType.Boolean;
                    cmd.Parameters.AddWithValue("@GhiChu", ReadProperty(GhiChuProperty) == null ? (object)DBNull.Value : ReadProperty(GhiChuProperty)).DbType = DbType.String;
                    var args = new DataPortalHookArgs(cmd);
                    OnInsertPre(args);
                    cmd.ExecuteNonQuery();
                    OnInsertPost(args);
                    LoadProperty(IDProperty, (long)cmd.Parameters["@ID"].Value);
                }
                // flushes all pending data operations
                FieldManager.UpdateChildren(this);
                ctx.Commit();
            }
        }

        /// <summary>
        /// Updates in the database all changes made to the <see cref="DIC_Tinh"/> object.
        /// </summary>
        protected override void DataPortal_Update()
        {
            using (var ctx = TransactionManager<SqlConnection, SqlTransaction>.GetManager("Connection"))
            {
                using (var cmd = new SqlCommand("dbo.DIC_Tinh_Info_Upd", ctx.Connection))
                {
                    cmd.Transaction = ctx.Transaction;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@ID", ReadProperty(IDProperty)).DbType = DbType.Int64;
                    cmd.Parameters.AddWithValue("@Ma", ReadProperty(MaProperty) == null ? (object)DBNull.Value : ReadProperty(MaProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@MaDK", ReadProperty(MaDKProperty) == null ? (object)DBNull.Value : ReadProperty(MaDKProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@TieuDe", ReadProperty(TieuDeProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@Ten", ReadProperty(TenProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@IDRefer", ReadProperty(IDReferProperty) == null ? (object)DBNull.Value : ReadProperty(IDReferProperty).Value).DbType = DbType.Int64;
                    cmd.Parameters.AddWithValue("@SuDung", ReadProperty(SuDungProperty) == null ? (object)DBNull.Value : ReadProperty(SuDungProperty).Value).DbType = DbType.Boolean;
                    cmd.Parameters.AddWithValue("@GhiChu", ReadProperty(GhiChuProperty) == null ? (object)DBNull.Value : ReadProperty(GhiChuProperty)).DbType = DbType.String;
                    var args = new DataPortalHookArgs(cmd);
                    OnUpdatePre(args);
                    cmd.ExecuteNonQuery();
                    OnUpdatePost(args);
                    LoadProperty(IDProperty, (long)cmd.Parameters["@ID"].Value);
                }
                // flushes all pending data operations
                FieldManager.UpdateChildren(this);
                ctx.Commit();
            }
        }

        /// <summary>
        /// Self deletes the <see cref="DIC_Tinh"/> object.
        /// </summary>
        protected override void DataPortal_DeleteSelf()
        {
            DataPortal_Delete(ID);
        }

        /// <summary>
        /// Deletes the <see cref="DIC_Tinh"/> object from database.
        /// </summary>
        /// <param name="id">The delete criteria.</param>
        protected void DataPortal_Delete(Int64 id)
        {
            using (var ctx = TransactionManager<SqlConnection, SqlTransaction>.GetManager("Connection"))
            {
                // flushes all pending data operations
                FieldManager.UpdateChildren(this);
                using (var cmd = new SqlCommand("dbo.DIC_Tinh_Info_Delete", ctx.Connection))
                {
                    cmd.Transaction = ctx.Transaction;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@ID", id).DbType = DbType.Int64;
                    var args = new DataPortalHookArgs(cmd, id);
                    OnDeletePre(args);
                    cmd.ExecuteNonQuery();
                    OnDeletePost(args);
                }
                ctx.Commit();
            }
            // removes all previous references to children
            LoadProperty(DIC_TinhChildProperty, DataPortal.CreateChild<DIC_TinhChild_Coll>());
        }

        #endregion

        #region Pseudo Events

        /// <summary>
        /// Occurs after setting all defaults for object creation.
        /// </summary>
        partial void OnCreate(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Delete, after setting query parameters and before the delete operation.
        /// </summary>
        partial void OnDeletePre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Delete, after the delete operation, before Commit().
        /// </summary>
        partial void OnDeletePost(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after setting query parameters and before the fetch operation.
        /// </summary>
        partial void OnFetchPre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after the fetch operation (object or collection is fully loaded and set up).
        /// </summary>
        partial void OnFetchPost(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after the low level fetch operation, before the data reader is destroyed.
        /// </summary>
        partial void OnFetchRead(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after setting query parameters and before the update operation.
        /// </summary>
        partial void OnUpdatePre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Insert, after the update operation, before setting back row identifiers (RowVersion) and Commit().
        /// </summary>
        partial void OnUpdatePost(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Insert, after setting query parameters and before the insert operation.
        /// </summary>
        partial void OnInsertPre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Insert, after the insert operation, before setting back row identifiers (ID and RowVersion) and Commit().
        /// </summary>
        partial void OnInsertPost(DataPortalHookArgs args);

        #endregion

    }
}
