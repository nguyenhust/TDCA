//  This file was generated by CSLA Object Generator - CslaGenFork v4.3.0
//
// Filename:    DT_LienTuc_GiangVien_Info
// ObjectType:  DT_LienTuc_GiangVien_Info
// CSLAType:    EditableChild

using System;
using System.Data;
using System.Data.SqlClient;
using Csla;
using Csla.Data;
using NETLINK.LIB;

namespace ModuleDaoTao.LIB
{

    /// <summary>
    /// DT_LienTuc_GiangVien_Info (editable child object).<br/>
    /// This is a generated base class of <see cref="DT_LienTuc_GiangVien_Info"/> business object.
    /// </summary>
    /// <remarks>
    /// This class is an item of <see cref="DT_LienTuc_GiangVien_Coll"/> collection.
    /// </remarks>
    [Serializable]
    public partial class DT_LienTuc_GiangVien_Info : BusinessBase<DT_LienTuc_GiangVien_Info>
    {

        #region Static Fields

        private static int _lastID;

        #endregion

        #region Business Properties

        /// <summary>
        /// Maintains metadata about <see cref="ID"/> property.
        /// </summary>
        public static readonly PropertyInfo<int> IDProperty = RegisterProperty<int>(p => p.ID, "ID");
        /// <summary>
        /// Gets the ID.
        /// </summary>
        /// <value>The ID.</value>
        public int ID
        {
            get { return GetProperty(IDProperty); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="idGiangVien"/> property.
        /// </summary>
        public static readonly PropertyInfo<Int64?> IdGiangVienProperty = RegisterProperty<Int64?>(p => p.IdGiangVien, "id Giang Vien");
        /// <summary>
        /// Gets or sets the id Giang Vien.
        /// </summary>
        /// <value>The id Giang Vien.</value>
        public Int64? IdGiangVien
        {
            get { return GetProperty(IdGiangVienProperty); }
            set { SetProperty(IdGiangVienProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="SoTietThucTe"/> property.
        /// </summary>
        public static readonly PropertyInfo<int?> SoTietThucTeProperty = RegisterProperty<int?>(p => p.SoTietThucTe, "So Tiet Thuc Te");
        /// <summary>
        /// Gets or sets the So Tiet Thuc Te.
        /// </summary>
        /// <value>The So Tiet Thuc Te.</value>
        public int? SoTietThucTe
        {
            get { return GetProperty(SoTietThucTeProperty); }
            set { SetProperty(SoTietThucTeProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="SoTietDuKien"/> property.
        /// </summary>
        public static readonly PropertyInfo<int?> SoTietDuKienProperty = RegisterProperty<int?>(p => p.SoTietDuKien, "So Tiet Du Kien");
        /// <summary>
        /// Gets or sets the So Tiet Du Kien.
        /// </summary>
        /// <value>The So Tiet Du Kien.</value>
        public int? SoTietDuKien
        {
            get { return GetProperty(SoTietDuKienProperty); }
            set { SetProperty(SoTietDuKienProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="idLopHoc"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> IdLopHocProperty = RegisterProperty<string>(p => p.IdLopHoc, "id Lop Hoc");
        /// <summary>
        /// Gets or sets the id Lop Hoc.
        /// </summary>
        /// <value>The id Lop Hoc.</value>
        public string IdLopHoc
        {
            get { return GetProperty(IdLopHocProperty); }
            set { SetProperty(IdLopHocProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="LastEdited_User"/> property.
        /// </summary>
        public static readonly PropertyInfo<Int64?> LastEdited_UserProperty = RegisterProperty<Int64?>(p => p.LastEdited_User, "Last Edited User");
        /// <summary>
        /// Gets or sets the Last Edited User.
        /// </summary>
        /// <value>The Last Edited User.</value>
        public Int64? LastEdited_User
        {
            get { return GetProperty(LastEdited_UserProperty); }
            set { SetProperty(LastEdited_UserProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="LastEdited_Date"/> property.
        /// </summary>
        public static readonly PropertyInfo<SmartDate> LastEdited_DateProperty = RegisterProperty<SmartDate>(p => p.LastEdited_Date, "Last Edited Date");
        /// <summary>
        /// Gets or sets the Last Edited Date.
        /// </summary>
        /// <value>The Last Edited Date.</value>
        public string LastEdited_Date
        {
            get { return GetPropertyConvert<SmartDate, String>(LastEdited_DateProperty); }
            set { SetPropertyConvert<SmartDate, String>(LastEdited_DateProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="backup01"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> Backup01Property = RegisterProperty<string>(p => p.Backup01, "backup01");
        /// <summary>
        /// Gets or sets the backup01.
        /// </summary>
        /// <value>The backup01.</value>
        public string Backup01
        {
            get { return GetProperty(Backup01Property); }
            set { SetProperty(Backup01Property, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="backup02"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> Backup02Property = RegisterProperty<string>(p => p.Backup02, "backup02");
        /// <summary>
        /// Gets or sets the backup02.
        /// </summary>
        /// <value>The backup02.</value>
        public string Backup02
        {
            get { return GetProperty(Backup02Property); }
            set { SetProperty(Backup02Property, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="backup03"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> Backup03Property = RegisterProperty<string>(p => p.Backup03, "backup03");
        /// <summary>
        /// Gets or sets the backup03.
        /// </summary>
        /// <value>The backup03.</value>
        public string Backup03
        {
            get { return GetProperty(Backup03Property); }
            set { SetProperty(Backup03Property, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="backup04"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> Backup04Property = RegisterProperty<string>(p => p.Backup04, "backup04");
        /// <summary>
        /// Gets or sets the backup04.
        /// </summary>
        /// <value>The backup04.</value>
        public string Backup04
        {
            get { return GetProperty(Backup04Property); }
            set { SetProperty(Backup04Property, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="backup05"/> property.
        /// </summary>
        public static readonly PropertyInfo<int?> Backup05Property = RegisterProperty<int?>(p => p.Backup05, "backup05");
        /// <summary>
        /// Gets or sets the backup05.
        /// </summary>
        /// <value>The backup05.</value>
        public int? Backup05
        {
            get { return GetProperty(Backup05Property); }
            set { SetProperty(Backup05Property, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="backup06"/> property.
        /// </summary>
        public static readonly PropertyInfo<SmartDate> Backup06Property = RegisterProperty<SmartDate>(p => p.Backup06, "backup06");
        /// <summary>
        /// Gets or sets the backup06.
        /// </summary>
        /// <value>The backup06.</value>
        public string Backup06
        {
            get { return GetPropertyConvert<SmartDate, String>(Backup06Property); }
            set { SetPropertyConvert<SmartDate, String>(Backup06Property, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="GiangVien"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> GiangVienProperty = RegisterProperty<string>(p => p.GiangVien, "Giang Vien");
        /// <summary>
        /// Gets or sets the Giang Vien.
        /// </summary>
        /// <value>The Giang Vien.</value>
        public string GiangVien
        {
            get { return GetProperty(GiangVienProperty); }
            set { SetProperty(GiangVienProperty, value); }
        }

        #endregion

        #region Factory Methods

        /// <summary>
        /// Factory method. Creates a new <see cref="DT_LienTuc_GiangVien_Info"/> object.
        /// </summary>
        /// <returns>A reference to the created <see cref="DT_LienTuc_GiangVien_Info"/> object.</returns>
        internal static DT_LienTuc_GiangVien_Info NewDT_LienTuc_GiangVien_Info()
        {
            return DataPortal.CreateChild<DT_LienTuc_GiangVien_Info>();
        }

        /// <summary>
        /// Factory method. Asynchronously creates a new <see cref="DT_LienTuc_GiangVien_Info"/> object.
        /// </summary>
        /// <param name="callback">The completion callback method.</param>
        internal static void NewDT_LienTuc_GiangVien_Info(EventHandler<DataPortalResult<DT_LienTuc_GiangVien_Info>> callback)
        {
            DataPortal.BeginCreate<DT_LienTuc_GiangVien_Info>(callback);
        }

        /// <summary>
        /// Factory method. Loads a <see cref="DT_LienTuc_GiangVien_Info"/> object from the given SafeDataReader.
        /// </summary>
        /// <param name="dr">The SafeDataReader to use.</param>
        /// <returns>A reference to the fetched <see cref="DT_LienTuc_GiangVien_Info"/> object.</returns>
        internal static DT_LienTuc_GiangVien_Info GetDT_LienTuc_GiangVien_Info(SafeDataReader dr, BusinessFunction function)
        {
            DT_LienTuc_GiangVien_Info obj = new DT_LienTuc_GiangVien_Info();
            // show the framework that this is a child object
            obj.MarkAsChild();
            obj.Fetch(dr, function);
            obj.MarkOld();
            // check all object rules and property rules
            obj.BusinessRules.CheckRules();
            return obj;
        }

        #endregion

        #region Constructor

        /// <summary>
        /// Initializes a new instance of the <see cref="DT_LienTuc_GiangVien_Info"/> class.
        /// </summary>
        /// <remarks> Do not use to create a Csla object. Use factory methods instead.</remarks>
        private DT_LienTuc_GiangVien_Info()
        {
            // Prevent direct creation

            // show the framework that this is a child object
            MarkAsChild();
        }

        #endregion

        #region Data Access

        /// <summary>
        /// Loads default values for the <see cref="DT_LienTuc_GiangVien_Info"/> object properties.
        /// </summary>
        [Csla.RunLocal]
        protected override void Child_Create()
        {
            LoadProperty(IDProperty, System.Threading.Interlocked.Decrement(ref _lastID));
            LoadProperty(LastEdited_DateProperty, null);
            LoadProperty(Backup01Property, null);
            LoadProperty(Backup02Property, null);
            LoadProperty(Backup03Property, null);
            LoadProperty(Backup04Property, null);
            LoadProperty(Backup06Property, null);
            var args = new DataPortalHookArgs();
            OnCreate(args);
            base.Child_Create();
        }

        /// <summary>
        /// Loads a <see cref="DT_LienTuc_GiangVien_Info"/> object from the given SafeDataReader.
        /// </summary>
        /// <param name="dr">The SafeDataReader to use.</param>
        private void Fetch(SafeDataReader dr, BusinessFunction function)
        {
            // Value properties
            LoadProperty(IDProperty, dr.GetInt32("ID"));
            LoadProperty(IdGiangVienProperty, dr.GetInt64("IdGiangVien"));
            LoadProperty(SoTietThucTeProperty, dr.GetInt32("SoTietThucTe"));
            LoadProperty(SoTietDuKienProperty, dr.GetInt32("SoTietDuKien"));
            LoadProperty(IdLopHocProperty, dr.GetString("IdLopHoc"));
            LoadProperty(LastEdited_UserProperty, dr.GetInt64("LastEdited_User"));
            LoadProperty(LastEdited_DateProperty, dr.GetSmartDate("LastEdited_Date"));
            LoadProperty(Backup01Property, dr.GetString("Backup01"));
            LoadProperty(Backup02Property, dr.GetString("Backup02"));
            LoadProperty(Backup03Property, dr.GetString("Backup03"));
            LoadProperty(Backup04Property, dr.GetString("Backup04"));
            LoadProperty(Backup05Property, dr.GetInt32("Backup05"));
            LoadProperty(Backup06Property, dr.GetSmartDate("Backup06"));
            if (function.Mode == BusinessFunctionMode.GetDataForGridViewWithCondition)
                LoadProperty(GiangVienProperty, dr.GetString("GiangVien"));

            var args = new DataPortalHookArgs(dr);
            OnFetchRead(args);
        }

        /// <summary>
        /// Inserts a new <see cref="DT_LienTuc_GiangVien_Info"/> object in the database.
        /// </summary>
        private void Child_Insert()
        {
            using (var ctx = TransactionManager<SqlConnection, SqlTransaction>.GetManager("Connection"))
            {
                using (var cmd = new SqlCommand("dbo.DT_LienTuc_GiangVien_Info_add", ctx.Connection))
                {
                    cmd.Transaction = ctx.Transaction;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@ID", ReadProperty(IDProperty)).Direction = ParameterDirection.Output;
                    cmd.Parameters.AddWithValue("@idGiangVien", ReadProperty(IdGiangVienProperty) == null ? (object)DBNull.Value : ReadProperty(IdGiangVienProperty).Value).DbType = DbType.Int64;
                    cmd.Parameters.AddWithValue("@SoTietThucTe", ReadProperty(SoTietThucTeProperty) == null ? (object)DBNull.Value : ReadProperty(SoTietThucTeProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@SoTietDuKien", ReadProperty(SoTietDuKienProperty) == null ? (object)DBNull.Value : ReadProperty(SoTietDuKienProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@idLopHoc", ReadProperty(IdLopHocProperty) == null ? (object)DBNull.Value : ReadProperty(IdLopHocProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@LastEdited_User", ReadProperty(LastEdited_UserProperty) == null ? (object)DBNull.Value : ReadProperty(LastEdited_UserProperty).Value).DbType = DbType.Int64;
                    cmd.Parameters.AddWithValue("@LastEdited_Date", ReadProperty(LastEdited_DateProperty).DBValue).DbType = DbType.DateTime;
                    cmd.Parameters.AddWithValue("@backup01", ReadProperty(Backup01Property) == null ? (object)DBNull.Value : ReadProperty(Backup01Property)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@backup02", ReadProperty(Backup02Property) == null ? (object)DBNull.Value : ReadProperty(Backup02Property)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@backup03", ReadProperty(Backup03Property) == null ? (object)DBNull.Value : ReadProperty(Backup03Property)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@backup04", ReadProperty(Backup04Property) == null ? (object)DBNull.Value : ReadProperty(Backup04Property)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@backup05", ReadProperty(Backup05Property) == null ? (object)DBNull.Value : ReadProperty(Backup05Property).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@backup06", ReadProperty(Backup06Property).DBValue).DbType = DbType.DateTime;
                    var args = new DataPortalHookArgs(cmd);
                    OnInsertPre(args);
                    cmd.ExecuteNonQuery();
                    OnInsertPost(args);
                    LoadProperty(IDProperty, (int) cmd.Parameters["@ID"].Value);
                }
            }
        }

        /// <summary>
        /// Updates in the database all changes made to the <see cref="DT_LienTuc_GiangVien_Info"/> object.
        /// </summary>
        private void Child_Update()
        {
            if (!IsDirty)
                return;

            using (var ctx = TransactionManager<SqlConnection, SqlTransaction>.GetManager("Connection"))
            {
                using (var cmd = new SqlCommand("dbo.DT_LienTuc_GiangVien_Info_update", ctx.Connection))
                {
                    cmd.Transaction = ctx.Transaction;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@ID", ReadProperty(IDProperty)).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@idGiangVien", ReadProperty(IdGiangVienProperty) == null ? (object)DBNull.Value : ReadProperty(IdGiangVienProperty).Value).DbType = DbType.Int64;
                    cmd.Parameters.AddWithValue("@SoTietThucTe", ReadProperty(SoTietThucTeProperty) == null ? (object)DBNull.Value : ReadProperty(SoTietThucTeProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@SoTietDuKien", ReadProperty(SoTietDuKienProperty) == null ? (object)DBNull.Value : ReadProperty(SoTietDuKienProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@idLopHoc", ReadProperty(IdLopHocProperty) == null ? (object)DBNull.Value : ReadProperty(IdLopHocProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@LastEdited_User", ReadProperty(LastEdited_UserProperty) == null ? (object)DBNull.Value : ReadProperty(LastEdited_UserProperty).Value).DbType = DbType.Int64;
                    cmd.Parameters.AddWithValue("@LastEdited_Date", ReadProperty(LastEdited_DateProperty).DBValue).DbType = DbType.DateTime;
                    cmd.Parameters.AddWithValue("@backup01", ReadProperty(Backup01Property) == null ? (object)DBNull.Value : ReadProperty(Backup01Property)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@backup02", ReadProperty(Backup02Property) == null ? (object)DBNull.Value : ReadProperty(Backup02Property)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@backup03", ReadProperty(Backup03Property) == null ? (object)DBNull.Value : ReadProperty(Backup03Property)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@backup04", ReadProperty(Backup04Property) == null ? (object)DBNull.Value : ReadProperty(Backup04Property)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@backup05", ReadProperty(Backup05Property) == null ? (object)DBNull.Value : ReadProperty(Backup05Property).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@backup06", ReadProperty(Backup06Property).DBValue).DbType = DbType.DateTime;
                    var args = new DataPortalHookArgs(cmd);
                    OnUpdatePre(args);
                    cmd.ExecuteNonQuery();
                    OnUpdatePost(args);
                }
            }
        }

        /// <summary>
        /// Self deletes the <see cref="DT_LienTuc_GiangVien_Info"/> object from database.
        /// </summary>
        private void Child_DeleteSelf()
        {
            using (var ctx = TransactionManager<SqlConnection, SqlTransaction>.GetManager("Connection"))
            {
                using (var cmd = new SqlCommand("dbo.DT_LienTuc_GiangVien_Info_delete", ctx.Connection))
                {
                    cmd.Transaction = ctx.Transaction;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@ID", ReadProperty(IDProperty)).DbType = DbType.Int32;
                    var args = new DataPortalHookArgs(cmd);
                    OnDeletePre(args);
                    cmd.ExecuteNonQuery();
                    OnDeletePost(args);
                }
            }
        }

        #endregion

        #region Pseudo Events

        /// <summary>
        /// Occurs after setting all defaults for object creation.
        /// </summary>
        partial void OnCreate(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Delete, after setting query parameters and before the delete operation.
        /// </summary>
        partial void OnDeletePre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Delete, after the delete operation, before Commit().
        /// </summary>
        partial void OnDeletePost(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after setting query parameters and before the fetch operation.
        /// </summary>
        partial void OnFetchPre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after the fetch operation (object or collection is fully loaded and set up).
        /// </summary>
        partial void OnFetchPost(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after the low level fetch operation, before the data reader is destroyed.
        /// </summary>
        partial void OnFetchRead(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after setting query parameters and before the update operation.
        /// </summary>
        partial void OnUpdatePre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Insert, after the update operation, before setting back row identifiers (RowVersion) and Commit().
        /// </summary>
        partial void OnUpdatePost(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Insert, after setting query parameters and before the insert operation.
        /// </summary>
        partial void OnInsertPre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Insert, after the insert operation, before setting back row identifiers (ID and RowVersion) and Commit().
        /// </summary>
        partial void OnInsertPost(DataPortalHookArgs args);

        #endregion

    }
}
