//  This file was generated by CSLA Object Generator - CslaGenFork v4.3.0
//
// Filename:    DIC_CanBo
// ObjectType:  DIC_CanBo
// CSLAType:    EditableRoot

using System;
using System.Data;
using System.Data.SqlClient;
using Csla;
using Csla.Data;

namespace Dictionary
{

    /// <summary>
    /// DIC_CanBo (editable root object).<br/>
    /// This is a generated base class of <see cref="DIC_CanBo"/> business object.
    /// </summary>
    [Serializable]
    public partial class DIC_CanBo : BusinessBase<DIC_CanBo>
    {

        #region Business Properties

        /// <summary>
        /// Maintains metadata about <see cref="ID"/> property.
        /// </summary>
        public static readonly PropertyInfo<Int64> IDProperty = RegisterProperty<Int64>(p => p.ID, "ID");
        /// <summary>
        /// Gets or sets the ID.
        /// </summary>
        /// <value>The ID.</value>
        public Int64 ID
        {
            get { return GetProperty(IDProperty); }
            set { SetProperty(IDProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="HoTen"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> HoTenProperty = RegisterProperty<string>(p => p.HoTen, "Ho Ten");
        /// <summary>
        /// Gets or sets the Ho Ten.
        /// </summary>
        /// <value>The Ho Ten.</value>
        public string HoTen
        {
            get { return GetProperty(HoTenProperty); }
            set { SetProperty(HoTenProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="IDGioiTinh"/> property.
        /// </summary>
        public static readonly PropertyInfo<int> IDGioiTinhProperty = RegisterProperty<int>(p => p.IDGioiTinh, "IDGioi Tinh");
        /// <summary>
        /// Gets or sets the IDGioi Tinh.
        /// </summary>
        /// <value>The IDGioi Tinh.</value>
        public int IDGioiTinh
        {
            get { return GetProperty(IDGioiTinhProperty); }
            set { SetProperty(IDGioiTinhProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="NgaySinh"/> property.
        /// </summary>
        public static readonly PropertyInfo<SmartDate> NgaySinhProperty = RegisterProperty<SmartDate>(p => p.NgaySinh, "Ngay Sinh");
        /// <summary>
        /// Gets or sets the Ngay Sinh.
        /// </summary>
        /// <value>The Ngay Sinh.</value>
        public string NgaySinh
        {
            get { return GetPropertyConvert<SmartDate, String>(NgaySinhProperty); }
            set { SetPropertyConvert<SmartDate, String>(NgaySinhProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="IDTinh"/> property.
        /// </summary>
        public static readonly PropertyInfo<Int64> IDTinhProperty = RegisterProperty<Int64>(p => p.IDTinh, "IDTinh");
        /// <summary>
        /// Gets or sets the IDTinh.
        /// </summary>
        /// <value>The IDTinh.</value>
        public Int64 IDTinh
        {
            get { return GetProperty(IDTinhProperty); }
            set { SetProperty(IDTinhProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="ChoOHiennay"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> ChoOHiennayProperty = RegisterProperty<string>(p => p.ChoOHiennay, "Cho OHiennay");
        /// <summary>
        /// Gets or sets the Cho OHiennay.
        /// </summary>
        /// <value>The Cho OHiennay.</value>
        public string ChoOHiennay
        {
            get { return GetProperty(ChoOHiennayProperty); }
            set { SetProperty(ChoOHiennayProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="IDQuocGia"/> property.
        /// </summary>
        public static readonly PropertyInfo<int?> IDQuocGiaProperty = RegisterProperty<int?>(p => p.IDQuocGia, "IDQuoc Gia");
        /// <summary>
        /// Gets or sets the IDQuoc Gia.
        /// </summary>
        /// <value>The IDQuoc Gia.</value>
        public int? IDQuocGia
        {
            get { return GetProperty(IDQuocGiaProperty); }
            set { SetProperty(IDQuocGiaProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="NgayVaoDang"/> property.
        /// </summary>
        public static readonly PropertyInfo<SmartDate> NgayVaoDangProperty = RegisterProperty<SmartDate>(p => p.NgayVaoDang, "Ngay Vao Dang");
        /// <summary>
        /// Gets or sets the Ngay Vao Dang.
        /// </summary>
        /// <value>The Ngay Vao Dang.</value>
        public string NgayVaoDang
        {
            get { return GetPropertyConvert<SmartDate, String>(NgayVaoDangProperty); }
            set { SetPropertyConvert<SmartDate, String>(NgayVaoDangProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="TrinhDoCM"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> TrinhDoCMProperty = RegisterProperty<string>(p => p.TrinhDoCM, "Trinh Do CM");
        /// <summary>
        /// Gets or sets the Trinh Do CM.
        /// </summary>
        /// <value>The Trinh Do CM.</value>
        public string TrinhDoCM
        {
            get { return GetProperty(TrinhDoCMProperty); }
            set { SetProperty(TrinhDoCMProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="IDCoQuan"/> property.
        /// </summary>
        public static readonly PropertyInfo<int?> IDCoQuanProperty = RegisterProperty<int?>(p => p.IDCoQuan, "IDCo Quan");
        /// <summary>
        /// Gets or sets the IDCo Quan.
        /// </summary>
        /// <value>The IDCo Quan.</value>
        public int? IDCoQuan
        {
            get { return GetProperty(IDCoQuanProperty); }
            set { SetProperty(IDCoQuanProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="IDChucVu"/> property.
        /// </summary>
        public static readonly PropertyInfo<int?> IDChucVuProperty = RegisterProperty<int?>(p => p.IDChucVu, "IDChuc Vu");
        /// <summary>
        /// Gets or sets the IDChuc Vu.
        /// </summary>
        /// <value>The IDChuc Vu.</value>
        public int? IDChucVu
        {
            get { return GetProperty(IDChucVuProperty); }
            set { SetProperty(IDChucVuProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="QTDaoTao"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> QTDaoTaoProperty = RegisterProperty<string>(p => p.QTDaoTao, "QTDao Tao");
        /// <summary>
        /// Gets or sets the QTDao Tao.
        /// </summary>
        /// <value>The QTDao Tao.</value>
        public string QTDaoTao
        {
            get { return GetProperty(QTDaoTaoProperty); }
            set { SetProperty(QTDaoTaoProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="QTCongTac"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> QTCongTacProperty = RegisterProperty<string>(p => p.QTCongTac, "QTCong Tac");
        /// <summary>
        /// Gets or sets the QTCong Tac.
        /// </summary>
        /// <value>The QTCong Tac.</value>
        public string QTCongTac
        {
            get { return GetProperty(QTCongTacProperty); }
            set { SetProperty(QTCongTacProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="KinhNghiemNN"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> KinhNghiemNNProperty = RegisterProperty<string>(p => p.KinhNghiemNN, "Kinh Nghiem NN");
        /// <summary>
        /// Gets or sets the Kinh Nghiem NN.
        /// </summary>
        /// <value>The Kinh Nghiem NN.</value>
        public string KinhNghiemNN
        {
            get { return GetProperty(KinhNghiemNNProperty); }
            set { SetProperty(KinhNghiemNNProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="NghienCuuTGia"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> NghienCuuTGiaProperty = RegisterProperty<string>(p => p.NghienCuuTGia, "Nghien Cuu TGia");
        /// <summary>
        /// Gets or sets the Nghien Cuu TGia.
        /// </summary>
        /// <value>The Nghien Cuu TGia.</value>
        public string NghienCuuTGia
        {
            get { return GetProperty(NghienCuuTGiaProperty); }
            set { SetProperty(NghienCuuTGiaProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="NgoaiNguTinHoc"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> NgoaiNguTinHocProperty = RegisterProperty<string>(p => p.NgoaiNguTinHoc, "Ngoai Ngu Tin Hoc");
        /// <summary>
        /// Gets or sets the Ngoai Ngu Tin Hoc.
        /// </summary>
        /// <value>The Ngoai Ngu Tin Hoc.</value>
        public string NgoaiNguTinHoc
        {
            get { return GetProperty(NgoaiNguTinHocProperty); }
            set { SetProperty(NgoaiNguTinHocProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="KhenThuongKyLuat"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> KhenThuongKyLuatProperty = RegisterProperty<string>(p => p.KhenThuongKyLuat, "Khen Thuong Ky Luat");
        /// <summary>
        /// Gets or sets the Khen Thuong Ky Luat.
        /// </summary>
        /// <value>The Khen Thuong Ky Luat.</value>
        public string KhenThuongKyLuat
        {
            get { return GetProperty(KhenThuongKyLuatProperty); }
            set { SetProperty(KhenThuongKyLuatProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="HTapNCuuNNgoai"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> HTapNCuuNNgoaiProperty = RegisterProperty<string>(p => p.HTapNCuuNNgoai, "HTap NCuu NNgoai");
        /// <summary>
        /// Gets or sets the HTap NCuu NNgoai.
        /// </summary>
        /// <value>The HTap NCuu NNgoai.</value>
        public string HTapNCuuNNgoai
        {
            get { return GetProperty(HTapNCuuNNgoaiProperty); }
            set { SetProperty(HTapNCuuNNgoaiProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="IDBoPhan"/> property.
        /// </summary>
        public static readonly PropertyInfo<int> IDBoPhanProperty = RegisterProperty<int>(p => p.IDBoPhan, "IDBo Phan");
        /// <summary>
        /// Gets or sets the IDBo Phan.
        /// </summary>
        /// <value>The IDBo Phan.</value>
        public int IDBoPhan
        {
            get { return GetProperty(IDBoPhanProperty); }
            set { SetProperty(IDBoPhanProperty, value); }
        }

        #endregion

        #region Factory Methods

        /// <summary>
        /// Factory method. Creates a new <see cref="DIC_CanBo"/> object.
        /// </summary>
        /// <returns>A reference to the created <see cref="DIC_CanBo"/> object.</returns>
        public static DIC_CanBo NewDIC_CanBo()
        {
            return DataPortal.Create<DIC_CanBo>();
        }

        /// <summary>
        /// Factory method. Loads a <see cref="DIC_CanBo"/> object, based on given parameters.
        /// </summary>
        /// <param name="id">The ID parameter of the DIC_CanBo to fetch.</param>
        /// <returns>A reference to the fetched <see cref="DIC_CanBo"/> object.</returns>
        public static DIC_CanBo GetDIC_CanBo(Int64 id)
        {
            return DataPortal.Fetch<DIC_CanBo>(id);
        }

        /// <summary>
        /// Factory method. Deletes a <see cref="DIC_CanBo"/> object, based on given parameters.
        /// </summary>
        /// <param name="id">The ID of the DIC_CanBo to delete.</param>
        public static void DeleteDIC_CanBo(Int64 id)
        {
            DataPortal.Delete<DIC_CanBo>(id);
        }

        /// <summary>
        /// Factory method. Asynchronously creates a new <see cref="DIC_CanBo"/> object.
        /// </summary>
        /// <param name="callback">The completion callback method.</param>
        public static void NewDIC_CanBo(EventHandler<DataPortalResult<DIC_CanBo>> callback)
        {
            DataPortal.BeginCreate<DIC_CanBo>(callback);
        }

        /// <summary>
        /// Factory method. Asynchronously loads a <see cref="DIC_CanBo"/> object, based on given parameters.
        /// </summary>
        /// <param name="id">The ID parameter of the DIC_CanBo to fetch.</param>
        /// <param name="callback">The completion callback method.</param>
        public static void GetDIC_CanBo(Int64 id, EventHandler<DataPortalResult<DIC_CanBo>> callback)
        {
            DataPortal.BeginFetch<DIC_CanBo>(id, callback);
        }

        /// <summary>
        /// Factory method. Asynchronously deletes a <see cref="DIC_CanBo"/> object, based on given parameters.
        /// </summary>
        /// <param name="id">The ID of the DIC_CanBo to delete.</param>
        /// <param name="callback">The completion callback method.</param>
        public static void DeleteDIC_CanBo(Int64 id, EventHandler<DataPortalResult<DIC_CanBo>> callback)
        {
            DataPortal.BeginDelete<DIC_CanBo>(id, callback);
        }

        #endregion

        #region Constructor

        /// <summary>
        /// Initializes a new instance of the <see cref="DIC_CanBo"/> class.
        /// </summary>
        /// <remarks> Do not use to create a Csla object. Use factory methods instead.</remarks>
        private DIC_CanBo()
        {
            // Prevent direct creation
        }

        #endregion

        #region Data Access

        /// <summary>
        /// Loads default values for the <see cref="DIC_CanBo"/> object properties.
        /// </summary>
        [Csla.RunLocal]
        protected override void DataPortal_Create()
        {
            LoadProperty(ChoOHiennayProperty, null);
            LoadProperty(NgayVaoDangProperty, null);
            LoadProperty(TrinhDoCMProperty, null);
            LoadProperty(QTDaoTaoProperty, null);
            LoadProperty(QTCongTacProperty, null);
            LoadProperty(KinhNghiemNNProperty, null);
            LoadProperty(NghienCuuTGiaProperty, null);
            LoadProperty(NgoaiNguTinHocProperty, null);
            LoadProperty(KhenThuongKyLuatProperty, null);
            LoadProperty(HTapNCuuNNgoaiProperty, null);
            var args = new DataPortalHookArgs();
            OnCreate(args);
            base.DataPortal_Create();
        }

        /// <summary>
        /// Loads a <see cref="DIC_CanBo"/> object from the database, based on given criteria.
        /// </summary>
        /// <param name="id">The ID.</param>
        protected void DataPortal_Fetch(Int64 id)
        {
            using (var ctx = ConnectionManager<SqlConnection>.GetManager("Connection"))
            {
                using (var cmd = new SqlCommand("dbo.DIC_CanBo_Get", ctx.Connection))
                {
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@ID", id).DbType = DbType.Int64;
                    var args = new DataPortalHookArgs(cmd, id);
                    OnFetchPre(args);
                    Fetch(cmd);
                    OnFetchPost(args);
                }
            }
            // check all object rules and property rules
            BusinessRules.CheckRules();
        }

        private void Fetch(SqlCommand cmd)
        {
            using (var dr = new SafeDataReader(cmd.ExecuteReader()))
            {
                if (dr.Read())
                {
                    Fetch(dr);
                }
            }
        }

        /// <summary>
        /// Loads a <see cref="DIC_CanBo"/> object from the given SafeDataReader.
        /// </summary>
        /// <param name="dr">The SafeDataReader to use.</param>
        private void Fetch(SafeDataReader dr)
        {
            // Value properties
            LoadProperty(IDProperty, data.ID);
            LoadProperty(HoTenProperty, data.HoTen);
            LoadProperty(IDGioiTinhProperty, data.IDGioiTinh);
            LoadProperty(NgaySinhProperty, data.NgaySinh);
            LoadProperty(IDTinhProperty, data.IDTinh);
            LoadProperty(ChoOHiennayProperty, data.ChoOHiennay);
            LoadProperty(IDQuocGiaProperty, data.IDQuocGia);
            LoadProperty(NgayVaoDangProperty, data.NgayVaoDang);
            LoadProperty(TrinhDoCMProperty, data.TrinhDoCM);
            LoadProperty(IDCoQuanProperty, data.IDCoQuan);
            LoadProperty(IDChucVuProperty, data.IDChucVu);
            LoadProperty(QTDaoTaoProperty, data.QTDaoTao);
            LoadProperty(QTCongTacProperty, data.QTCongTac);
            LoadProperty(KinhNghiemNNProperty, data.KinhNghiemNN);
            LoadProperty(NghienCuuTGiaProperty, data.NghienCuuTGia);
            LoadProperty(NgoaiNguTinHocProperty, data.NgoaiNguTinHoc);
            LoadProperty(KhenThuongKyLuatProperty, data.KhenThuongKyLuat);
            LoadProperty(HTapNCuuNNgoaiProperty, data.HTapNCuuNNgoai);
            LoadProperty(IDBoPhanProperty, data.IDBoPhan);
            var args = new DataPortalHookArgs(dr);
            OnFetchRead(args);
        }

        /// <summary>
        /// Inserts a new <see cref="DIC_CanBo"/> object in the database.
        /// </summary>
        protected override void DataPortal_Insert()
        {
            using (var ctx = TransactionManager<SqlConnection, SqlTransaction>.GetManager("Connection"))
            {
                using (var cmd = new SqlCommand("dbo.DIC_CanBo_Add", ctx.Connection))
                {
                    cmd.Transaction = ctx.Transaction;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@ID", ReadProperty(IDProperty)).DbType = DbType.Int64;
                    cmd.Parameters.AddWithValue("@HoTen", ReadProperty(HoTenProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@IDGioiTinh", ReadProperty(IDGioiTinhProperty)).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@NgaySinh", ReadProperty(NgaySinhProperty).DBValue).DbType = DbType.DateTime;
                    cmd.Parameters.AddWithValue("@IDTinh", ReadProperty(IDTinhProperty)).DbType = DbType.Int64;
                    cmd.Parameters.AddWithValue("@ChoOHiennay", ReadProperty(ChoOHiennayProperty) == null ? (object)DBNull.Value : ReadProperty(ChoOHiennayProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@IDQuocGia", ReadProperty(IDQuocGiaProperty) == null ? (object)DBNull.Value : ReadProperty(IDQuocGiaProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@NgayVaoDang", ReadProperty(NgayVaoDangProperty).DBValue).DbType = DbType.DateTime;
                    cmd.Parameters.AddWithValue("@TrinhDoCM", ReadProperty(TrinhDoCMProperty) == null ? (object)DBNull.Value : ReadProperty(TrinhDoCMProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@IDCoQuan", ReadProperty(IDCoQuanProperty) == null ? (object)DBNull.Value : ReadProperty(IDCoQuanProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@IDChucVu", ReadProperty(IDChucVuProperty) == null ? (object)DBNull.Value : ReadProperty(IDChucVuProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@QTDaoTao", ReadProperty(QTDaoTaoProperty) == null ? (object)DBNull.Value : ReadProperty(QTDaoTaoProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@QTCongTac", ReadProperty(QTCongTacProperty) == null ? (object)DBNull.Value : ReadProperty(QTCongTacProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@KinhNghiemNN", ReadProperty(KinhNghiemNNProperty) == null ? (object)DBNull.Value : ReadProperty(KinhNghiemNNProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@NghienCuuTGia", ReadProperty(NghienCuuTGiaProperty) == null ? (object)DBNull.Value : ReadProperty(NghienCuuTGiaProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@NgoaiNguTinHoc", ReadProperty(NgoaiNguTinHocProperty) == null ? (object)DBNull.Value : ReadProperty(NgoaiNguTinHocProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@KhenThuongKyLuat", ReadProperty(KhenThuongKyLuatProperty) == null ? (object)DBNull.Value : ReadProperty(KhenThuongKyLuatProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@HTapNCuuNNgoai", ReadProperty(HTapNCuuNNgoaiProperty) == null ? (object)DBNull.Value : ReadProperty(HTapNCuuNNgoaiProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@IDBoPhan", ReadProperty(IDBoPhanProperty)).DbType = DbType.Int32;
                    var args = new DataPortalHookArgs(cmd);
                    OnInsertPre(args);
                    cmd.ExecuteNonQuery();
                    OnInsertPost(args);
                }
                ctx.Commit();
            }
        }

        /// <summary>
        /// Updates in the database all changes made to the <see cref="DIC_CanBo"/> object.
        /// </summary>
        protected override void DataPortal_Update()
        {
            using (var ctx = TransactionManager<SqlConnection, SqlTransaction>.GetManager("Connection"))
            {
                using (var cmd = new SqlCommand("dbo.DIC_CanBo_Upd", ctx.Connection))
                {
                    cmd.Transaction = ctx.Transaction;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@ID", ReadProperty(IDProperty)).DbType = DbType.Int64;
                    cmd.Parameters.AddWithValue("@HoTen", ReadProperty(HoTenProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@IDGioiTinh", ReadProperty(IDGioiTinhProperty)).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@NgaySinh", ReadProperty(NgaySinhProperty).DBValue).DbType = DbType.DateTime;
                    cmd.Parameters.AddWithValue("@IDTinh", ReadProperty(IDTinhProperty)).DbType = DbType.Int64;
                    cmd.Parameters.AddWithValue("@ChoOHiennay", ReadProperty(ChoOHiennayProperty) == null ? (object)DBNull.Value : ReadProperty(ChoOHiennayProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@IDQuocGia", ReadProperty(IDQuocGiaProperty) == null ? (object)DBNull.Value : ReadProperty(IDQuocGiaProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@NgayVaoDang", ReadProperty(NgayVaoDangProperty).DBValue).DbType = DbType.DateTime;
                    cmd.Parameters.AddWithValue("@TrinhDoCM", ReadProperty(TrinhDoCMProperty) == null ? (object)DBNull.Value : ReadProperty(TrinhDoCMProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@IDCoQuan", ReadProperty(IDCoQuanProperty) == null ? (object)DBNull.Value : ReadProperty(IDCoQuanProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@IDChucVu", ReadProperty(IDChucVuProperty) == null ? (object)DBNull.Value : ReadProperty(IDChucVuProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@QTDaoTao", ReadProperty(QTDaoTaoProperty) == null ? (object)DBNull.Value : ReadProperty(QTDaoTaoProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@QTCongTac", ReadProperty(QTCongTacProperty) == null ? (object)DBNull.Value : ReadProperty(QTCongTacProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@KinhNghiemNN", ReadProperty(KinhNghiemNNProperty) == null ? (object)DBNull.Value : ReadProperty(KinhNghiemNNProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@NghienCuuTGia", ReadProperty(NghienCuuTGiaProperty) == null ? (object)DBNull.Value : ReadProperty(NghienCuuTGiaProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@NgoaiNguTinHoc", ReadProperty(NgoaiNguTinHocProperty) == null ? (object)DBNull.Value : ReadProperty(NgoaiNguTinHocProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@KhenThuongKyLuat", ReadProperty(KhenThuongKyLuatProperty) == null ? (object)DBNull.Value : ReadProperty(KhenThuongKyLuatProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@HTapNCuuNNgoai", ReadProperty(HTapNCuuNNgoaiProperty) == null ? (object)DBNull.Value : ReadProperty(HTapNCuuNNgoaiProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@IDBoPhan", ReadProperty(IDBoPhanProperty)).DbType = DbType.Int32;
                    var args = new DataPortalHookArgs(cmd);
                    OnUpdatePre(args);
                    cmd.ExecuteNonQuery();
                    OnUpdatePost(args);
                }
                ctx.Commit();
            }
        }

        /// <summary>
        /// Self deletes the <see cref="DIC_CanBo"/> object.
        /// </summary>
        protected override void DataPortal_DeleteSelf()
        {
            DataPortal_Delete(ID);
        }

        /// <summary>
        /// Deletes the <see cref="DIC_CanBo"/> object from database.
        /// </summary>
        /// <param name="id">The delete criteria.</param>
        protected void DataPortal_Delete(Int64 id)
        {
            using (var ctx = TransactionManager<SqlConnection, SqlTransaction>.GetManager("Connection"))
            {
                using (var cmd = new SqlCommand("dbo.DIC_CanBo_Delete", ctx.Connection))
                {
                    cmd.Transaction = ctx.Transaction;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@ID", id).DbType = DbType.Int64;
                    var args = new DataPortalHookArgs(cmd, id);
                    OnDeletePre(args);
                    cmd.ExecuteNonQuery();
                    OnDeletePost(args);
                }
                ctx.Commit();
            }
        }

        #endregion

        #region Pseudo Events

        /// <summary>
        /// Occurs after setting all defaults for object creation.
        /// </summary>
        partial void OnCreate(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Delete, after setting query parameters and before the delete operation.
        /// </summary>
        partial void OnDeletePre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Delete, after the delete operation, before Commit().
        /// </summary>
        partial void OnDeletePost(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after setting query parameters and before the fetch operation.
        /// </summary>
        partial void OnFetchPre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after the fetch operation (object or collection is fully loaded and set up).
        /// </summary>
        partial void OnFetchPost(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after the low level fetch operation, before the data reader is destroyed.
        /// </summary>
        partial void OnFetchRead(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after setting query parameters and before the update operation.
        /// </summary>
        partial void OnUpdatePre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Insert, after the update operation, before setting back row identifiers (RowVersion) and Commit().
        /// </summary>
        partial void OnUpdatePost(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Insert, after setting query parameters and before the insert operation.
        /// </summary>
        partial void OnInsertPre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Insert, after the insert operation, before setting back row identifiers (ID and RowVersion) and Commit().
        /// </summary>
        partial void OnInsertPost(DataPortalHookArgs args);

        #endregion

    }
}
