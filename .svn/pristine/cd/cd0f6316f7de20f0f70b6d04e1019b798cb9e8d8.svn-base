//  This file was generated by CSLA Object Generator - CslaGenFork v4.3.0
//
// Filename:    DT_LienTuc_HocVien_Coll
// ObjectType:  DT_LienTuc_HocVien_Coll
// CSLAType:    EditableRootCollection

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;
using Csla;
using Csla.Data;using NETLINK.LIB;

namespace ModuleDaoTao.LIB
{

    /// <summary>
    /// DT_LienTuc_HocVien_Coll (editable root list).<br/>
    /// This is a generated base class of <see cref="DT_LienTuc_HocVien_Coll"/> business object.
    /// </summary>
    /// <remarks>
    /// The items of the collection are <see cref="DT_LienTuc_HocVien_Info"/> objects.
    /// </remarks>
    [Serializable]
    public partial class DT_LienTuc_HocVien_Coll : BusinessBindingListBase<DT_LienTuc_HocVien_Coll, DT_LienTuc_HocVien_Info>
    {

        #region Collection Business Methods

        /// <summary>
        /// Removes a <see cref="DT_LienTuc_HocVien_Info"/> item from the collection.
        /// </summary>
        /// <param name="id">The Id of the item to be removed.</param>
        public void Remove(int id)
        {
            foreach (var dT_LienTuc_HocVien_Info in this)
            {
                if (dT_LienTuc_HocVien_Info.Id == id)
                {
                    Remove(dT_LienTuc_HocVien_Info);
                    break;
                }
            }
        }

        /// <summary>
        /// Determines whether a <see cref="DT_LienTuc_HocVien_Info"/> item is in the collection.
        /// </summary>
        /// <param name="id">The Id of the item to search for.</param>
        /// <returns><c>true</c> if the DT_LienTuc_HocVien_Info is a collection item; otherwise, <c>false</c>.</returns>
        public bool Contains(int id)
        {
            foreach (var dT_LienTuc_HocVien_Info in this)
            {
                if (dT_LienTuc_HocVien_Info.Id == id)
                {
                    return true;
                }
            }
            return false;
        }

        /// <summary>
        /// Determines whether a <see cref="DT_LienTuc_HocVien_Info"/> item is in the collection's DeletedList.
        /// </summary>
        /// <param name="id">The Id of the item to search for.</param>
        /// <returns><c>true</c> if the DT_LienTuc_HocVien_Info is a deleted collection item; otherwise, <c>false</c>.</returns>
        public bool ContainsDeleted(int id)
        {
            foreach (var dT_LienTuc_HocVien_Info in this.DeletedList)
            {
                if (dT_LienTuc_HocVien_Info.Id == id)
                {
                    return true;
                }
            }
            return false;
        }

        #endregion

        #region Factory Methods

        /// <summary>
        /// Factory method. Creates a new <see cref="DT_LienTuc_HocVien_Coll"/> collection.
        /// </summary>
        /// <returns>A reference to the created <see cref="DT_LienTuc_HocVien_Coll"/> collection.</returns>
        public static DT_LienTuc_HocVien_Coll NewDT_LienTuc_HocVien_Coll()
        {
            return DataPortal.Create<DT_LienTuc_HocVien_Coll>();
        }

        /// <summary>
        /// Factory method. Loads a <see cref="DT_LienTuc_HocVien_Coll"/> collection.
        /// </summary>
        /// <returns>A reference to the fetched <see cref="DT_LienTuc_HocVien_Coll"/> collection.</returns>
        public static DT_LienTuc_HocVien_Coll GetDT_LienTuc_HocVien_Coll()
        {
            return DataPortal.Fetch<DT_LienTuc_HocVien_Coll>(new BusinessFunction(BusinessFunctionMode.GetDataForGridViewWithCondition));
        }

        /// <summary>
        /// Factory method. Loads a <see cref="DT_LienTuc_HocVien_Coll"/> collection.
        /// </summary>
        /// <returns>A reference to the fetched <see cref="DT_LienTuc_HocVien_Coll"/> collection.</returns>
        public static DT_LienTuc_HocVien_Coll GetDT_LienTuc_HocVien_Coll(BusinessFunction function)
        {
            return DataPortal.Fetch<DT_LienTuc_HocVien_Coll>(function);
        }

        /// <summary>
        /// Factory method. Asynchronously creates a new <see cref="DT_LienTuc_HocVien_Coll"/> collection.
        /// </summary>
        /// <param name="callback">The completion callback method.</param>
        public static void NewDT_LienTuc_HocVien_Coll(EventHandler<DataPortalResult<DT_LienTuc_HocVien_Coll>> callback)
        {
            DataPortal.BeginCreate<DT_LienTuc_HocVien_Coll>(callback);
        }

        /// <summary>
        /// Factory method. Asynchronously loads a <see cref="DT_LienTuc_HocVien_Coll"/> collection.
        /// </summary>
        /// <param name="callback">The completion callback method.</param>
        public static void GetDT_LienTuc_HocVien_Coll(EventHandler<DataPortalResult<DT_LienTuc_HocVien_Coll>> callback)
        {
            DataPortal.BeginFetch<DT_LienTuc_HocVien_Coll>(callback);
        }

        #endregion

        #region Constructor

        /// <summary>
        /// Initializes a new instance of the <see cref="DT_LienTuc_HocVien_Coll"/> class.
        /// </summary>
        /// <remarks> Do not use to create a Csla object. Use factory methods instead.</remarks>
        private DT_LienTuc_HocVien_Coll()
        {
            // Prevent direct creation

            var rlce = RaiseListChangedEvents;
            RaiseListChangedEvents = false;
            AllowNew = true;
            AllowEdit = true;
            AllowRemove = true;
            RaiseListChangedEvents = rlce;
        }

        #endregion

        #region Data Access

        /// <summary>
        /// Loads a <see cref="DT_LienTuc_HocVien_Coll"/> collection from the database.
        /// </summary>
        protected void DataPortal_Fetch(BusinessFunction function)
        {
            using (var ctx = ConnectionManager<SqlConnection>.GetManager("Connection"))
            {
                string storedName = string.Empty;
                switch (function.Mode)
                {
                    #region For Grid View DaoTaolientucHocVien
                    case BusinessFunctionMode.GetDataForGridView:
                        storedName = "[dbo].[DT_LienTuc_HocVien_Coll_getByNguoiQuanLyWithGridView]";
                        break;
                    case BusinessFunctionMode.GetDataKemCapDaHocForGridView:
                        storedName = "[dbo].[DT_LienTuc_HocVien_Coll_getKemCapDahocByNguoiQuanLyWithGridView]";
                        break;

                    case BusinessFunctionMode.GetDataKemCapDangHocForGridView:
                        storedName = "[dbo].[DT_LienTuc_HocVien_Coll_getKemCapDanghocByNguoiQuanLyWithGridView]";
                        break;

                    case BusinessFunctionMode.GetDataTheoLopDaHocForGridView:
                        storedName = "[dbo].[DT_LienTuc_HocVien_Coll_getTheoLopDahocByNguoiQuanLyWithGridView]";
                        break;

                    case BusinessFunctionMode.GetDataTheoLopDangHocForGridView:
                        storedName = "[dbo].[DT_LienTuc_HocVien_Coll_getTheoLopDangHocByNguoiQuanLyWithGridView]"; 
                        break;
                    case BusinessFunctionMode.GetDataChoXepLopForGridView:
                        storedName = "[dbo].[DT_LienTuc_HocVien_Coll_getChuaSapxep]"; break;
                    case BusinessFunctionMode.GetDataKemCapChuaHocForGridView:
                        storedName = "[dbo].[DT_LienTuc_HocVien_Coll_getDataKemCapChuaHoc]";
                        break;

                    #endregion

                    case BusinessFunctionMode.GetDataForGridViewWithCondition:
                        storedName = "dbo.DT_LienTuc_HocVien_Coll_getByKhunglop"; 
                        break;
                    case BusinessFunctionMode.GetAllDataWithCondition:
                        storedName = "[dbo].[DT_LienTuc_HocVien_Coll_getByHoTenMaLopMaHocVienDongHoc]"; break;

                  
                    case BusinessFunctionMode.GetDataForGridViewWithCondition3:
                        storedName = "[dbo].[DT_LienTuc_HocVien_Coll_getByKhunglopChuaSapxep]"; break;

                    case BusinessFunctionMode.GetDataForGridViewWithCondition2:

                        storedName = "[dbo].[DT_LienTuc_HocVien_Coll_DangKiTuCTT]"; break;

                    case BusinessFunctionMode.GetDataForGridViewChuaDongHP:
                        storedName = "[dbo].[DT_LienTuc_HocVien_Coll_ChuaDongHocPhi]"; break;

                    case BusinessFunctionMode.GetDataForGridViewDaDongHP:

                        storedName = "[dbo].[DT_LienTuc_HocVien_Coll_DaDongHocPhi]"; break;

                    case BusinessFunctionMode.GetDataForGridViewKemCap:

                        storedName = "[dbo].[DT_LienTuc_HocVien_Coll_DiemKemCap]"; break;

                    case BusinessFunctionMode.GetDataForGridViewTheoLop:

                        storedName = "[dbo].[DT_LienTuc_HocVien_Coll_DiemTheoLop]"; break;

                   
                  
                    case BusinessFunctionMode.GetDataByNhom:
                        storedName = "[dbo].[DT_LienTuc_HocVien_Coll_ByNhomLop]"; break;

                    case BusinessFunctionMode.GetDateByNgayDongHoc:
                        storedName = "[dbo].[DT_LienTuc_HocVien_Coll_ByNgayDongHoc]"; break;

                    case BusinessFunctionMode.GetDataHenChungChiKemCap:
                        storedName = "[dbo].[DT_LienTuc_HocVien_Coll_HenChungChiKemCap]"; break;

                    case BusinessFunctionMode.GetDataHenChungChiTheoLop:
                        storedName = "[dbo].[DT_LienTuc_HocVien_Coll_HenChungChiTheoLop]"; break;

                    case BusinessFunctionMode.GetDataBySoCMT:

                        storedName = "[dbo].[DT_LienTuc_HocVien_Coll_getByCMT]"; break;

                    case BusinessFunctionMode.GetDataForGridViewHoanTienHP:

                        storedName = "[dbo].[DT_LienTuc_HocVien_Coll_HoanTienHocPhi]"; break;

                    case BusinessFunctionMode.GetHocVienLienTucByMaLop:

                        storedName = "[dbo].[DT_LienTuc_HocVien_Coll_HocVienDaXepLopByMaLop]"; break;
                    case BusinessFunctionMode.GetDTLienTuc_HVDaInChungChi:
                        storedName = "[dbo].[DT_LienTuc_HocVien_Coll_get_DaInChungChi]";
                        break;
                    case BusinessFunctionMode.GetDTLienTuc_HVChuaInChungChi:
                        storedName = "[dbo].[DT_LienTuc_HocVien_Coll_get_ChuaInChungChi]";
                        break;
                    case BusinessFunctionMode.GetDTLienTuc_HVChuaUploadAnh:
                        storedName = "[dbo].[DT_LienTuc_HocVien_Coll_get_ChuaUploadAnh]";
                        break;
                    case BusinessFunctionMode.GetDTLienTuc_HVDaInThe:
                        storedName = "[dbo].[DT_LienTuc_HocVien_Coll_get_DaInThe]";
                        break;
                    case BusinessFunctionMode.GetDTLienTuc_HVChuaInThe:
                        storedName = "[dbo].[DT_LienTuc_HocVien_Coll_get_ChuaInThe]";
                        break;
                    case BusinessFunctionMode.GetAllData:
                        storedName = "[dbo].[DT_LienTuc_HocVien_Coll_get]";
                        break;
                    case BusinessFunctionMode.GetDTLienTuc_DiemTheoLop:
                        storedName = "[dbo].[DT_LienTuc_HocVien_Coll_getDiemTheoLop]";
                        break;
                    case BusinessFunctionMode.GetDTLienTuc_DiemKemCap:
                        storedName = "[dbo].[DT_LienTuc_HocVien_Coll_getDiemKemCap]";
                        break;
                    case BusinessFunctionMode.GetHocVienLienTucThongKe:
                        storedName = "[dbo].[DT_LienTuc_HocVien_Coll_get_ThongKe]";
                        break;
                    //case BusinessFunctionMode.GetHocVienLienTucThongKeDaXepLop:
                    //    storedName = "[dbo].[DT_LienTuc_HocVien_Coll_get_ThongKe_DaXepLop]";
                    //    break;
                    //case BusinessFunctionMode.GetHocVienLienTucThongKeTatCa:
                    //    storedName = "[dbo].[DT_LienTuc_HocVien_Coll_get_ThongKe_TatCa]";
                        break;
                    default:
                        storedName = "[dbo].[DT_LienTuc_HocVien_Coll_get]";
                        break;
                }
               

                using (var cmd = new SqlCommand(storedName, ctx.Connection))
                {
                    cmd.CommandType = CommandType.StoredProcedure;
                    if (function.Mode == BusinessFunctionMode.GetDataForGridViewWithCondition)
                    {
                        SqlParameter parameter = new SqlParameter("@idKhungLopHoc", SqlDbType.Int);
                        DT_Lientuc_HocVienSearch objSearch = (DT_Lientuc_HocVienSearch)function.Item;
                        parameter.Value = objSearch.KhungLophoc;
                        cmd.Parameters.Add(parameter);

                        SqlParameter parameter1 = new SqlParameter("@MaLopHoc", SqlDbType.NVarChar, 50);
                        parameter1.Value = objSearch.MaLop;
                        cmd.Parameters.Add(parameter1);
                      
                    }
                    else if (function.Mode == BusinessFunctionMode.GetDTLienTuc_DiemTheoLop)
                    {
                        SqlParameter parameter1 = new SqlParameter("@MaLopHoc", SqlDbType.NVarChar, 50);
                        parameter1.Value = function.Item;
                        cmd.Parameters.Add(parameter1);
                        SqlParameter parameter4 = new SqlParameter("@IdNguoiQuanLy", SqlDbType.BigInt);
                        parameter4.Value = function.ItemID;
                        cmd.Parameters.Add(parameter4);
                    }
                    else if (function.Mode == BusinessFunctionMode.GetDTLienTuc_DiemKemCap)
                    {
                        SqlParameter parameter4 = new SqlParameter("@IdNguoiQuanLy", SqlDbType.BigInt);
                        parameter4.Value = function.ItemID;
                        cmd.Parameters.Add(parameter4);
                        
                            SqlParameter parameterNam = new SqlParameter("@nam", SqlDbType.Int);
                            parameterNam.Value = function.ItemSoNam;
                            cmd.Parameters.Add(parameterNam);
                        
                        //if (!(function.ItemNgayBatDau.Year.ToString() == "1"))
                        //{
                        //    SqlParameter parameterNgayBatDau = new SqlParameter("@ngayhoc", SqlDbType.DateTime);
                        //    parameterNgayBatDau.Value = function.ItemNgayBatDau;
                        //    cmd.Parameters.Add(parameterNgayBatDau);
                        //}
                    }
                    else if (function.Mode == BusinessFunctionMode.GetDataBySoCMT)
                    {
                        SqlParameter parameter = new SqlParameter("@CMT", SqlDbType.NVarChar);
                        parameter.Value = function.Item;
                        cmd.Parameters.Add(parameter);

                    }
                    else if (function.Mode == BusinessFunctionMode.GetDataForGridViewWithCondition3)
                    {
                        SqlParameter parameter = new SqlParameter("@idKhungLopHoc", SqlDbType.Int);
                        DT_Lientuc_HocVienSearch objSearch = (DT_Lientuc_HocVienSearch)function.Item;
                        parameter.Value = objSearch.KhungLophoc;
                        cmd.Parameters.Add(parameter);
                        SqlParameter parameter4 = new SqlParameter("@IdNguoiQuanLy", SqlDbType.BigInt);
                        parameter4.Value = function.ItemID;
                        cmd.Parameters.Add(parameter4);
                    }
                    else if (function.Mode == BusinessFunctionMode.GetDataChoXepLopForGridView)
                    {
                        SqlParameter parameter4 = new SqlParameter("@IdNguoiQuanLy", SqlDbType.BigInt);
                        parameter4.Value = function.ItemID;
                        cmd.Parameters.Add(parameter4);
                    }
                    else if (function.Mode == BusinessFunctionMode.GetAllDataWithCondition)
                    {

                        SqlParameter parameter = new SqlParameter("@HoTen", SqlDbType.NVarChar, 150);
                        DT_Lientuc_HocVienSearch objSearch = (DT_Lientuc_HocVienSearch)function.Item;
                        parameter.Value = (object)objSearch.TenHocVien ?? DBNull.Value;
                        cmd.Parameters.Add(parameter);

                        SqlParameter parameter1 = new SqlParameter("@MaLopHoc", SqlDbType.NVarChar, 50);
                        parameter1.Value = (object)objSearch.MaLop ?? DBNull.Value;
                        cmd.Parameters.Add(parameter1);

                        SqlParameter parameter2 = new SqlParameter("@MaHocVien", SqlDbType.NVarChar, 50);
                        parameter2.Value = (object)objSearch.MaHocVien ?? DBNull.Value;
                        cmd.Parameters.Add(parameter2);

                        SqlParameter parameter3 = new SqlParameter("@DaDongHoc", SqlDbType.Bit);
                        parameter3.Value = (object)objSearch.IsDongHocPhi ?? DBNull.Value;
                        cmd.Parameters.Add(parameter3);

                        SqlParameter parameter5 = new SqlParameter("@HinhThucHoc", SqlDbType.NVarChar, 250);
                        parameter5.Value = (object)objSearch.HinhThucHoc ?? DBNull.Value;
                        cmd.Parameters.Add(parameter5);

                    }
                    else if (function.Mode == BusinessFunctionMode.GetHocVienLienTucByMaLop || function.Mode == BusinessFunctionMode.GetDataForGridViewTheoLop || function.Mode == BusinessFunctionMode.GetDataHenChungChiTheoLop)
                    {
                        SqlParameter parameter1 = new SqlParameter("@MaLopHoc", SqlDbType.NVarChar, 50);
                        parameter1.Value = (object)function.Item ?? DBNull.Value;
                        cmd.Parameters.Add(parameter1);

                    }
                    else if (function.Mode == BusinessFunctionMode.GetDateByNgayDongHoc)
                    {

                        DT_Lientuc_HocVienRangeTime objSearch = (DT_Lientuc_HocVienRangeTime)function.Item;

                        SqlParameter parameter1 = new SqlParameter("@startDate", SqlDbType.DateTime);
                        parameter1.Value = (object)objSearch.StartTime ?? DBNull.Value;
                        cmd.Parameters.Add(parameter1);

                        parameter1 = new SqlParameter("@endDate", SqlDbType.DateTime);
                        parameter1.Value = (object)objSearch.EndTime ?? DBNull.Value;
                        cmd.Parameters.Add(parameter1);

                    }
                    else if (function.Mode == BusinessFunctionMode.GetDataByNhom)
                    {
                        DT_Lientuc_HocVienSearch objSearch = (DT_Lientuc_HocVienSearch)function.Item;

                        SqlParameter parameter1 = new SqlParameter("@MaLopHoc", SqlDbType.NVarChar, 50);
                        parameter1.Value = (object)objSearch.MaLop ?? DBNull.Value;
                        cmd.Parameters.Add(parameter1);

                        parameter1 = new SqlParameter("@Nhom", SqlDbType.VarChar);
                        parameter1.Value = (object)objSearch.ListNhom ?? DBNull.Value;
                        cmd.Parameters.Add(parameter1);

                    }

                    // Dành cho bộ lọc mặc định trên một số form
                    if (function.Mode == BusinessFunctionMode.GetDataChoXepLopForGridView || function.Mode == BusinessFunctionMode.GetDataKemCapChuaHocForGridView || function.Mode == BusinessFunctionMode.GetDataKemCapDaHocForGridView || function.Mode == BusinessFunctionMode.GetDataKemCapDangHocForGridView || function.Mode == BusinessFunctionMode.GetDataTheoLopDaHocForGridView || function.Mode == BusinessFunctionMode.GetDataTheoLopDangHocForGridView)
                    {
                        SqlParameter parameter2 = new SqlParameter("@NamHoc", SqlDbType.Int);
                        parameter2.Value = function.ItemFilterCondition_Int;
                        cmd.Parameters.Add(parameter2);
                        SqlParameter parameter3;
                        parameter3 = new SqlParameter("@PhongQuanLy", SqlDbType.Int);
                        parameter3.Value = function.ItemFilterCondition_Int2;
                        cmd.Parameters.Add(parameter3);
                    }
                    if (function.Mode == BusinessFunctionMode.GetDTLienTuc_HVChuaInChungChi || function.Mode == BusinessFunctionMode.GetDTLienTuc_HVChuaInThe || function.Mode == BusinessFunctionMode.GetDTLienTuc_HVDaInChungChi || function.Mode == BusinessFunctionMode.GetDTLienTuc_HVDaInThe || function.Mode == BusinessFunctionMode.GetDTLienTuc_HVChuaUploadAnh)
                    {
                        SqlParameter parameter1 = new SqlParameter("@NamHoc", SqlDbType.Int);
                        parameter1.Value = function.ItemFilterCondition_Int;
                        cmd.Parameters.Add(parameter1);

                        SqlParameter parameter2 = new SqlParameter("@PhongQuanLy", SqlDbType.Int);
                        parameter2.Value = function.ItemFilterCondition_Int2;
                        cmd.Parameters.Add(parameter2);
                        SqlParameter parameter3;
                        parameter3 = new SqlParameter("@LoaiHinhDaoTao", SqlDbType.NVarChar);
                        parameter3.Value = function.ItemFilterCondition_String;
                        cmd.Parameters.Add(parameter3);
                    }
                    if (function.Mode == BusinessFunctionMode.GetHocVienLienTucThongKe)
                    {
                        SqlParameter parameter2 = new SqlParameter("@PhongQuanLy", SqlDbType.Int);
                        parameter2.Value = function.ItemFilterCondition_Int;
                        cmd.Parameters.Add(parameter2);

                        SqlParameter parameter3;
                        parameter3 = new SqlParameter("@LoaiHinhDaoTao", SqlDbType.NVarChar);
                        parameter3.Value = function.ItemFilterCondition_String;
                        cmd.Parameters.Add(parameter3);

                        SqlParameter parameter4;
                        parameter4 = new SqlParameter("@NgayBatDau", SqlDbType.DateTime);
                        parameter4.Value = function.ItemFilterCondition_Date;
                        cmd.Parameters.Add(parameter4);

                        SqlParameter parameter5;
                        parameter5 = new SqlParameter("@NgayKetThuc", SqlDbType.DateTime);
                        parameter5.Value = function.ItemFilterCondition_Date2;
                        cmd.Parameters.Add(parameter5);

                        SqlParameter parameter6;
                        parameter6 = new SqlParameter("@TrangThai", SqlDbType.NVarChar);
                        parameter6.Value = function.ItemTrangThai;
                        cmd.Parameters.Add(parameter6);
                    }
                    if (function.Mode == BusinessFunctionMode.GetDataForGridView)
                    {
                        SqlParameter parameter = new SqlParameter("@Nam", SqlDbType.Int);
                        parameter.Value = function.ItemFilterCondition_Int;
                        cmd.Parameters.Add(parameter);

                        SqlParameter parameter1 = new SqlParameter("@BoPhan", SqlDbType.NVarChar, 50);
                        parameter1.Value = function.ItemFilterCondition_Int2;
                        cmd.Parameters.Add(parameter1);

                    } 
                    if (function.Mode == BusinessFunctionMode.GetDataForGridViewChuaDongHP)
                    {
                        SqlParameter parameter = new SqlParameter("@Nam", SqlDbType.Int);
                        parameter.Value = function.ItemFilterCondition_Int;
                        cmd.Parameters.Add(parameter);

                        SqlParameter parameter1 = new SqlParameter("@BoPhan", SqlDbType.Int);
                        parameter1.Value = function.ItemFilterCondition_Int2;
                        cmd.Parameters.Add(parameter1);

                    }
                    if (function.Mode == BusinessFunctionMode.GetDataForGridViewDaDongHP)
                    {
                        SqlParameter parameter = new SqlParameter("@Nam", SqlDbType.Int);
                        parameter.Value = function.ItemFilterCondition_Int;
                        cmd.Parameters.Add(parameter);

                        SqlParameter parameter1 = new SqlParameter("@BoPhan", SqlDbType.Int);
                        parameter1.Value = function.ItemFilterCondition_Int2;
                        cmd.Parameters.Add(parameter1);

                    }
                    if (function.Mode == BusinessFunctionMode.GetDataForGridViewHoanTienHP)
                    {
                        SqlParameter parameter = new SqlParameter("@Nam", SqlDbType.Int);
                        parameter.Value = function.ItemFilterCondition_Int;
                        cmd.Parameters.Add(parameter);

                        SqlParameter parameter1 = new SqlParameter("@BoPhan", SqlDbType.Int);
                        parameter1.Value = function.ItemFilterCondition_Int2;
                        cmd.Parameters.Add(parameter1);

                    }
                    if (function.Mode == BusinessFunctionMode.GetAllData)
                    {
                        SqlParameter parameter = new SqlParameter("@Nam", SqlDbType.Int);
                        parameter.Value = function.ItemFilterCondition_Int;
                        cmd.Parameters.Add(parameter);

                        SqlParameter parameter1 = new SqlParameter("@BoPhan", SqlDbType.Int);
                        parameter1.Value = function.ItemFilterCondition_Int2;
                        cmd.Parameters.Add(parameter1);

                    }
                    var args = new DataPortalHookArgs(cmd);
                    OnFetchPre(args);
                    LoadCollection(cmd, function);
                    OnFetchPost(args);


                }
            }
        }

        public static int DataPortal_FetchCount(BusinessFunction function)
        {
            using (var ctx = ConnectionManager<SqlConnection>.GetManager("Connection"))
            {
                using (var cmd = new SqlCommand("dbo.DT_LienTuc_HocVien_Count_getByMaLopHoc", ctx.Connection))
                {
                    cmd.CommandType = CommandType.StoredProcedure;

                    SqlParameter parameter = new SqlParameter("@MaLopHoc", SqlDbType.NVarChar, 50);
                    parameter.Value = function.Item;
                    cmd.Parameters.Add(parameter);

                    return (int)cmd.ExecuteScalar();
                }
            }
        }

        public static int DaTonTaiChungCMT(string CMT)
        {
            using (var ctx = ConnectionManager<SqlConnection>.GetManager("Connection"))
            {
                using (var cmd = new SqlCommand("[dbo].[DT_LienTuc_HocVien_Count_getBySoCMT]", ctx.Connection))
                {
                    cmd.CommandType = CommandType.StoredProcedure;

                    SqlParameter parameter = new SqlParameter("@SoCMT", SqlDbType.NVarChar, 20);
                    parameter.Value = CMT;
                    cmd.Parameters.Add(parameter);

                    return (int)cmd.ExecuteScalar();
                }
            }
        }

        public static int DataPortal_FetchCountHocVienKemCap(DateTime dt)
        {

            using (var ctx = ConnectionManager<SqlConnection>.GetManager("Connection"))
            {
                using (var cmd = new SqlCommand("dbo.DT_LientTuc_HocVien_GetMaxCodeKemCap", ctx.Connection))
                {
                    cmd.CommandType = CommandType.StoredProcedure;

                    SqlParameter parameter = new SqlParameter("@year", SqlDbType.Int);
                    SqlParameter parameter2 = new SqlParameter("@hinhthucHoc", SqlDbType.NVarChar);
                    parameter.Value = dt.Year;//DateTime.Now.Year ;
                    parameter2.Value = TextMessages.Itemvalue.HinhThucHoc_KemCap;
                    cmd.Parameters.Add(parameter);
                    cmd.Parameters.Add(parameter2);
                    object value = cmd.ExecuteScalar();
                    if (value != null)
                    {
                        int result;
                        if (int.TryParse(value.ToString(), out result))
                        {
                            return result;
                        }
                    }
                }
            }

            return 0;
        }

        public static int GetDT_LienTuc_HocVienByMaLopHoc_Coll_Count(BusinessFunction function)
        {
            return DataPortal_FetchCount(function);
        }


        private void LoadCollection(SqlCommand cmd, BusinessFunction function)
        {
            using (var dr = new SafeDataReader(cmd.ExecuteReader()))
            {
                Fetch(dr, function);
            }
        }

        /// <summary>
        /// Loads all <see cref="DT_LienTuc_HocVien_Coll"/> collection items from the given SafeDataReader.
        /// </summary>
        /// <param name="dr">The SafeDataReader to use.</param>
        private void Fetch(SafeDataReader dr, BusinessFunction function)
        {
            var rlce = RaiseListChangedEvents;
            RaiseListChangedEvents = false;
            while (dr.Read())
            {
                Add(DT_LienTuc_HocVien_Info.GetDT_LienTuc_HocVien_Info(dr, function));
            }
            RaiseListChangedEvents = rlce;
        }

        /// <summary>
        /// Updates in the database all changes made to the <see cref="DT_LienTuc_HocVien_Coll"/> object.
        /// </summary>
        protected override void DataPortal_Update()
        {
            using (var ctx = TransactionManager<SqlConnection, SqlTransaction>.GetManager("Connection"))
            {
                base.Child_Update();
                ctx.Commit();
            }
        }

        #endregion

        #region Pseudo Events

        /// <summary>
        /// Occurs after setting query parameters and before the fetch operation.
        /// </summary>
        partial void OnFetchPre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after the fetch operation (object or collection is fully loaded and set up).
        /// </summary>
        partial void OnFetchPost(DataPortalHookArgs args);

        #endregion

    }
}
