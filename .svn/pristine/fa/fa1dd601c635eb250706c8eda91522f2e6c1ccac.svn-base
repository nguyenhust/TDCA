//  This file was generated by CSLA Object Generator - CslaGenFork v4.3.0
//
// Filename:    DT_LienTuc_HocVien
// ObjectType:  DT_LienTuc_HocVien
// CSLAType:    EditableRoot

using System;
using System.Data;
using System.Data.SqlClient;
using Csla;
using Csla.Data;using NETLINK.LIB;

namespace ModuleDaoTao.LIB
{

    /// <summary>
    /// DT_LienTuc_HocVien (editable root object).<br/>
    /// This is a generated base class of <see cref="DT_LienTuc_HocVien"/> business object.
    /// </summary>
    [Serializable]
    public partial class DT_LienTuc_HocVien : BusinessBase<DT_LienTuc_HocVien>
    {

        #region Static Fields

        private static int _lastID;

        #endregion

        #region Business Properties

        /// <summary>
        /// Maintains metadata about <see cref="id"/> property.
        /// </summary>
        public static readonly PropertyInfo<int> IdProperty = RegisterProperty<int>(p => p.Id, "id");
        /// <summary>
        /// Gets or sets the id.
        /// </summary>
        /// <value>The id.</value>
        public int Id
        {
            get { return GetProperty(IdProperty); }
            set { SetProperty(IdProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="HoTen"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> HoTenProperty = RegisterProperty<string>(p => p.HoTen, "Ho Ten");
        /// <summary>
        /// Gets or sets the Ho Ten.
        /// </summary>
        /// <value>The Ho Ten.</value>
        public string HoTen
        {
            get { return GetProperty(HoTenProperty); }
            set { SetProperty(HoTenProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="NgaySinh"/> property.
        /// </summary>
        public static readonly PropertyInfo<SmartDate> NgaySinhProperty = RegisterProperty<SmartDate>(p => p.NgaySinh, "Ngay Sinh");
        /// <summary>
        /// Gets or sets the Ngay Sinh.
        /// </summary>
        /// <value>The Ngay Sinh.</value>
        public string NgaySinh
        {
            get { return GetPropertyConvert<SmartDate, String>(NgaySinhProperty); }
            set { SetPropertyConvert<SmartDate, String>(NgaySinhProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="SoCMT"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> SoCMTProperty = RegisterProperty<string>(p => p.SoCMT, "So CMT");
        /// <summary>
        /// Gets or sets the So CMT.
        /// </summary>
        /// <value>The So CMT.</value>
        public string SoCMT
        {
            get { return GetProperty(SoCMTProperty); }
            set { SetProperty(SoCMTProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="HinhThucHoc"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> HinhThucHocProperty = RegisterProperty<string>(p => p.HinhThucHoc, "Hinh Thuc Hoc");
        /// <summary>
        /// Gets or sets the Hinh Thuc Hoc.
        /// </summary>
        /// <value>The Hinh Thuc Hoc.</value>
        public string HinhThucHoc
        {
            get { return GetProperty(HinhThucHocProperty); }
            set { SetProperty(HinhThucHocProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="MaLopHoc"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> MaLopHocProperty = RegisterProperty<string>(p => p.MaLopHoc, "Ma Lop Hoc");
        /// <summary>
        /// Gets or sets the Ma Lop Hoc.
        /// </summary>
        /// <value>The Ma Lop Hoc.</value>
        public string MaLopHoc
        {
            get { return GetProperty(MaLopHocProperty); }
            set { SetProperty(MaLopHocProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="TrangThai"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> TrangThaiProperty = RegisterProperty<string>(p => p.TrangThai, "Trang Thai");
        /// <summary>
        /// Gets or sets the Trang Thai.
        /// </summary>
        /// <value>The Trang Thai.</value>
        public string TrangThai
        {
            get { return GetProperty(TrangThaiProperty); }
            set { SetProperty(TrangThaiProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="DaDongHocPhi"/> property.
        /// </summary>
        public static readonly PropertyInfo<bool?> DaDongHocPhiProperty = RegisterProperty<bool?>(p => p.DaDongHocPhi, "Da Dong Hoc Phi");
        /// <summary>
        /// Gets or sets the Da Dong Hoc Phi.
        /// </summary>
        /// <value><c>true</c> if Da Dong Hoc Phi; <c>false</c> if not Da Dong Hoc Phi; otherwise, <c>null</c>.</value>
        public bool? DaDongHocPhi
        {
            get { return GetProperty(DaDongHocPhiProperty); }
            set { SetProperty(DaDongHocPhiProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="idNguoiQuanLy"/> property.
        /// </summary>
        public static readonly PropertyInfo<Int64?> IdNguoiQuanLyProperty = RegisterProperty<Int64?>(p => p.IdNguoiQuanLy, "id Nguoi Quan Ly");
        /// <summary>
        /// Gets or sets the id Nguoi Quan Ly.
        /// </summary>
        /// <value>The id Nguoi Quan Ly.</value>
        public Int64? IdNguoiQuanLy
        {
            get { return GetProperty(IdNguoiQuanLyProperty); }
            set { SetProperty(IdNguoiQuanLyProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="MaHocVien"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> MaHocVienProperty = RegisterProperty<string>(p => p.MaHocVien, "Ma Hoc Vien");
        /// <summary>
        /// Gets or sets the Ma Hoc Vien.
        /// </summary>
        /// <value>The Ma Hoc Vien.</value>
        public string MaHocVien
        {
            get { return GetProperty(MaHocVienProperty); }
            set { SetProperty(MaHocVienProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="GioiTinh"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> GioiTinhProperty = RegisterProperty<string>(p => p.GioiTinh, "Gioi Tinh");
        /// <summary>
        /// Gets or sets the Gioi Tinh.
        /// </summary>
        /// <value>The Gioi Tinh.</value>
        public string GioiTinh
        {
            get { return GetProperty(GioiTinhProperty); }
            set { SetProperty(GioiTinhProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="idTrinhDo"/> property.
        /// </summary>
        public static readonly PropertyInfo<int?> IdTrinhDoProperty = RegisterProperty<int?>(p => p.IdTrinhDo, "id Trinh Do");
        /// <summary>
        /// Gets or sets the id Trinh Do.
        /// </summary>
        /// <value>The id Trinh Do.</value>
        public int? IdTrinhDo
        {
            get { return GetProperty(IdTrinhDoProperty); }
            set { SetProperty(IdTrinhDoProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="idChuyenNganh"/> property.
        /// </summary>
        public static readonly PropertyInfo<int?> IdChuyenNganhProperty = RegisterProperty<int?>(p => p.IdChuyenNganh, "id Chuyen Nganh");
        /// <summary>
        /// Gets or sets the id Chuyen Nganh.
        /// </summary>
        /// <value>The id Chuyen Nganh.</value>
        public int? IdChuyenNganh
        {
            get { return GetProperty(IdChuyenNganhProperty); }
            set { SetProperty(IdChuyenNganhProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="TruongTotNghiep"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> TruongTotNghiepProperty = RegisterProperty<string>(p => p.TruongTotNghiep, "Truong Tot Nghiep");
        /// <summary>
        /// Gets or sets the Truong Tot Nghiep.
        /// </summary>
        /// <value>The Truong Tot Nghiep.</value>
        public string TruongTotNghiep
        {
            get { return GetProperty(TruongTotNghiepProperty); }
            set { SetProperty(TruongTotNghiepProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="NamTotNghiep"/> property.
        /// </summary>
        public static readonly PropertyInfo<int?> NamTotNghiepProperty = RegisterProperty<int?>(p => p.NamTotNghiep, "Nam Tot Nghiep");
        /// <summary>
        /// Gets or sets the Nam Tot Nghiep.
        /// </summary>
        /// <value>The Nam Tot Nghiep.</value>
        public int? NamTotNghiep
        {
            get { return GetProperty(NamTotNghiepProperty); }
            set { SetProperty(NamTotNghiepProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="SoBang"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> SoBangProperty = RegisterProperty<string>(p => p.SoBang, "So Bang");
        /// <summary>
        /// Gets or sets the So Bang.
        /// </summary>
        /// <value>The So Bang.</value>
        public string SoBang
        {
            get { return GetProperty(SoBangProperty); }
            set { SetProperty(SoBangProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="NoiCongTac"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> NoiCongTacProperty = RegisterProperty<string>(p => p.NoiCongTac, "Noi Cong Tac");
        /// <summary>
        /// Gets or sets the Noi Cong Tac.
        /// </summary>
        /// <value>The Noi Cong Tac.</value>
        public string NoiCongTac
        {
            get { return GetProperty(NoiCongTacProperty); }
            set { SetProperty(NoiCongTacProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="idTinhThanh"/> property.
        /// </summary>
        public static readonly PropertyInfo<Int64?> IdTinhThanhProperty = RegisterProperty<Int64?>(p => p.IdTinhThanh, "id Tinh Thanh");
        /// <summary>
        /// Gets or sets the id Tinh Thanh.
        /// </summary>
        /// <value>The id Tinh Thanh.</value>
        public Int64? IdTinhThanh
        {
            get { return GetProperty(IdTinhThanhProperty); }
            set { SetProperty(IdTinhThanhProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="DiaChiCoQuan"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> DiaChiCoQuanProperty = RegisterProperty<string>(p => p.DiaChiCoQuan, "Dia Chi Co Quan");
        /// <summary>
        /// Gets or sets the Dia Chi Co Quan.
        /// </summary>
        /// <value>The Dia Chi Co Quan.</value>
        public string DiaChiCoQuan
        {
            get { return GetProperty(DiaChiCoQuanProperty); }
            set { SetProperty(DiaChiCoQuanProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="DiaChiNhaRieng"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> DiaChiNhaRiengProperty = RegisterProperty<string>(p => p.DiaChiNhaRieng, "Dia Chi Nha Rieng");
        /// <summary>
        /// Gets or sets the Dia Chi Nha Rieng.
        /// </summary>
        /// <value>The Dia Chi Nha Rieng.</value>
        public string DiaChiNhaRieng
        {
            get { return GetProperty(DiaChiNhaRiengProperty); }
            set { SetProperty(DiaChiNhaRiengProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="DienThoaiCoQuan"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> DienThoaiCoQuanProperty = RegisterProperty<string>(p => p.DienThoaiCoQuan, "Dien Thoai Co Quan");
        /// <summary>
        /// Gets or sets the Dien Thoai Co Quan.
        /// </summary>
        /// <value>The Dien Thoai Co Quan.</value>
        public string DienThoaiCoQuan
        {
            get { return GetProperty(DienThoaiCoQuanProperty); }
            set { SetProperty(DienThoaiCoQuanProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="DienThoaiNhaRieng"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> DienThoaiNhaRiengProperty = RegisterProperty<string>(p => p.DienThoaiNhaRieng, "Dien Thoai Nha Rieng");
        /// <summary>
        /// Gets or sets the Dien Thoai Nha Rieng.
        /// </summary>
        /// <value>The Dien Thoai Nha Rieng.</value>
        public string DienThoaiNhaRieng
        {
            get { return GetProperty(DienThoaiNhaRiengProperty); }
            set { SetProperty(DienThoaiNhaRiengProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="DiDong"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> DiDongProperty = RegisterProperty<string>(p => p.DiDong, "Di Dong");
        /// <summary>
        /// Gets or sets the Di Dong.
        /// </summary>
        /// <value>The Di Dong.</value>
        public string DiDong
        {
            get { return GetProperty(DiDongProperty); }
            set { SetProperty(DiDongProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="Email"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> EmailProperty = RegisterProperty<string>(p => p.Email, "Email");
        /// <summary>
        /// Gets or sets the Email.
        /// </summary>
        /// <value>The Email.</value>
        public string Email
        {
            get { return GetProperty(EmailProperty); }
            set { SetProperty(EmailProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="NgayCapCMT"/> property.
        /// </summary>
        public static readonly PropertyInfo<SmartDate> NgayCapCMTProperty = RegisterProperty<SmartDate>(p => p.NgayCapCMT, "Ngay Cap CMT");
        /// <summary>
        /// Gets or sets the Ngay Cap CMT.
        /// </summary>
        /// <value>The Ngay Cap CMT.</value>
        public string NgayCapCMT
        {
            get { return GetPropertyConvert<SmartDate, String>(NgayCapCMTProperty); }
            set { SetPropertyConvert<SmartDate, String>(NgayCapCMTProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="NoiCapCMT"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> NoiCapCMTProperty = RegisterProperty<string>(p => p.NoiCapCMT, "Noi Cap CMT");
        /// <summary>
        /// Gets or sets the Noi Cap CMT.
        /// </summary>
        /// <value>The Noi Cap CMT.</value>
        public string NoiCapCMT
        {
            get { return GetProperty(NoiCapCMTProperty); }
            set { SetProperty(NoiCapCMTProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="NgayDangKi"/> property.
        /// </summary>
        public static readonly PropertyInfo<SmartDate> NgayDangKiProperty = RegisterProperty<SmartDate>(p => p.NgayDangKi, "Ngay Dang Ki");
        /// <summary>
        /// Gets or sets the Ngay Dang Ki.
        /// </summary>
        /// <value>The Ngay Dang Ki.</value>
        public string NgayDangKi
        {
            get { return GetPropertyConvert<SmartDate, String>(NgayDangKiProperty); }
            set { SetPropertyConvert<SmartDate, String>(NgayDangKiProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="idChuyenNganhDangKi"/> property.
        /// </summary>
        public static readonly PropertyInfo<int?> IdChuyenNganhDangKiProperty = RegisterProperty<int?>(p => p.IdChuyenNganhDangKi, "id Chuyen Nganh Dang Ki");
        /// <summary>
        /// Gets or sets the id Chuyen Nganh Dang Ki.
        /// </summary>
        /// <value>The id Chuyen Nganh Dang Ki.</value>
        public int? IdChuyenNganhDangKi
        {
            get { return GetProperty(IdChuyenNganhDangKiProperty); }
            set { SetProperty(IdChuyenNganhDangKiProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="NoiDungDaoTao"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> NoiDungDaoTaoProperty = RegisterProperty<string>(p => p.NoiDungDaoTao, "Noi Dung Dao Tao");
        /// <summary>
        /// Gets or sets the Noi Dung Dao Tao.
        /// </summary>
        /// <value>The Noi Dung Dao Tao.</value>
        public string NoiDungDaoTao
        {
            get { return GetProperty(NoiDungDaoTaoProperty); }
            set { SetProperty(NoiDungDaoTaoProperty, value); }
        }

        public string StrLastEdited_Date
        {
            get { return GetPropertyConvert<SmartDate, String>(LastEdited_DateProperty); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="NgayBatDau"/> property.
        /// </summary>
        public static readonly PropertyInfo<SmartDate> NgayBatDauProperty = RegisterProperty<SmartDate>(p => p.NgayBatDau, "Ngay Bat Dau");
        /// <summary>
        /// Gets or sets the Ngay Bat Dau.
        /// </summary>
        /// <value>The Ngay Bat Dau.</value>
        public string NgayBatDau
        {
            get { return GetPropertyConvert<SmartDate, String>(NgayBatDauProperty); }
            set { SetPropertyConvert<SmartDate, String>(NgayBatDauProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="NgayKetThuc"/> property.
        /// </summary>
        public static readonly PropertyInfo<SmartDate> NgayKetThucProperty = RegisterProperty<SmartDate>(p => p.NgayKetThuc, "Ngay Ket Thuc");
        /// <summary>
        /// Gets or sets the Ngay Ket Thuc.
        /// </summary>
        /// <value>The Ngay Ket Thuc.</value>
        public string NgayKetThuc
        {
            get { return GetPropertyConvert<SmartDate, String>(NgayKetThucProperty); }
            set { SetPropertyConvert<SmartDate, String>(NgayKetThucProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="Anh"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> AnhProperty = RegisterProperty<string>(p => p.Anh, "Anh");
        /// <summary>
        /// Gets or sets the Anh.
        /// </summary>
        /// <value>The Anh.</value>
        public string Anh
        {
            get { return GetProperty(AnhProperty); }
            set { SetProperty(AnhProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="idKhungLopHoc"/> property.
        /// </summary>
        public static readonly PropertyInfo<int?> IdKhungLopHocProperty = RegisterProperty<int?>(p => p.IdKhungLopHoc, "id Khung Lop Hoc");
        /// <summary>
        /// Gets or sets the id Khung Lop Hoc.
        /// </summary>
        /// <value>The id Khung Lop Hoc.</value>
        public int? IdKhungLopHoc
        {
            get { return GetProperty(IdKhungLopHocProperty); }
            set { SetProperty(IdKhungLopHocProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="TongHocPhi"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> TongHocPhiProperty = RegisterProperty<string>(p => p.TongHocPhi, "Tong Hoc Phi");
        /// <summary>
        /// Gets or sets the Tong Hoc Phi.
        /// </summary>
        /// <value>The Tong Hoc Phi.</value>
        public string TongHocPhi
        {
            get { return GetProperty(TongHocPhiProperty); }
            set { SetProperty(TongHocPhiProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="DiemThi"/> property.
        /// </summary>
        public static readonly PropertyInfo<Double?> DiemThiProperty = RegisterProperty<Double?>(p => p.DiemThi, "Diem Thi");
        /// <summary>
        /// Gets or sets the Diem Thi.
        /// </summary>
        /// <value>The Diem Thi.</value>
        public Double? DiemThi
        {
            get { return GetProperty(DiemThiProperty); }
            set { SetProperty(DiemThiProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="XepLoai"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> XepLoaiProperty = RegisterProperty<string>(p => p.XepLoai, "Xep Loai");
        /// <summary>
        /// Gets or sets the Xep Loai.
        /// </summary>
        /// <value>The Xep Loai.</value>
        public string XepLoai
        {
            get { return GetProperty(XepLoaiProperty); }
            set { SetProperty(XepLoaiProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="Lan1"/> property.
        /// </summary>
        public static readonly PropertyInfo<Double?> Lan1Property = RegisterProperty<Double?>(p => p.Lan1, "Lan1");
        /// <summary>
        /// Gets or sets the Lan1.
        /// </summary>
        /// <value>The Lan1.</value>
        public Double? Lan1
        {
            get { return GetProperty(Lan1Property); }
            set { SetProperty(Lan1Property, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="Lan2"/> property.
        /// </summary>
        public static readonly PropertyInfo<Double?> Lan2Property = RegisterProperty<Double?>(p => p.Lan2, "Lan2");
        /// <summary>
        /// Gets or sets the Lan2.
        /// </summary>
        /// <value>The Lan2.</value>
        public Double? Lan2
        {
            get { return GetProperty(Lan2Property); }
            set { SetProperty(Lan2Property, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="Lan3"/> property.
        /// </summary>
        public static readonly PropertyInfo<Double?> Lan3Property = RegisterProperty<Double?>(p => p.Lan3, "Lan3");
        /// <summary>
        /// Gets or sets the Lan3.
        /// </summary>
        /// <value>The Lan3.</value>
        public Double? Lan3
        {
            get { return GetProperty(Lan3Property); }
            set { SetProperty(Lan3Property, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="Lan4"/> property.
        /// </summary>
        public static readonly PropertyInfo<Double?> Lan4Property = RegisterProperty<Double?>(p => p.Lan4, "Lan4");
        /// <summary>
        /// Gets or sets the Lan4.
        /// </summary>
        /// <value>The Lan4.</value>
        public Double? Lan4
        {
            get { return GetProperty(Lan4Property); }
            set { SetProperty(Lan4Property, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="DangKiTuCTT"/> property.
        /// </summary>
        public static readonly PropertyInfo<bool?> DangKiTuCTTProperty = RegisterProperty<bool?>(p => p.DangKiTuCTT, "Dang Ki Tu CTT");
        /// <summary>
        /// Gets or sets the Dang Ki Tu CTT.
        /// </summary>
        /// <value><c>true</c> if Dang Ki Tu CTT; <c>false</c> if not Dang Ki Tu CTT; otherwise, <c>null</c>.</value>
        public bool? DangKiTuCTT
        {
            get { return GetProperty(DangKiTuCTTProperty); }
            set { SetProperty(DangKiTuCTTProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="idBenhVienCongTac"/> property.
        /// </summary>
        public static readonly PropertyInfo<Int64?> IdBenhVienCongTacProperty = RegisterProperty<Int64?>(p => p.IdBenhVienCongTac, "id Benh Vien Cong Tac");
        /// <summary>
        /// Gets or sets the id Benh Vien Cong Tac.
        /// </summary>
        /// <value>The id Benh Vien Cong Tac.</value>
        public Int64? IdBenhVienCongTac
        {
            get { return GetProperty(IdBenhVienCongTacProperty); }
            set { SetProperty(IdBenhVienCongTacProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="TongSoLanInThe"/> property.
        /// </summary>
        public static readonly PropertyInfo<int?> TongSoLanInTheProperty = RegisterProperty<int?>(p => p.TongSoLanInThe, "Tong So Lan In The");
        /// <summary>
        /// Gets or sets the Tong So Lan In The.
        /// </summary>
        /// <value>The Tong So Lan In The.</value>
        public int? TongSoLanInThe
        {
            get { return GetProperty(TongSoLanInTheProperty); }
            set { SetProperty(TongSoLanInTheProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="TongSoLanInGiayChungNhan"/> property.
        /// </summary>
        public static readonly PropertyInfo<int?> TongSoLanInGiayChungNhanProperty = RegisterProperty<int?>(p => p.TongSoLanInGiayChungNhan, "Tong So Lan In Giay Chung Nhan");
        /// <summary>
        /// Gets or sets the Tong So Lan In Giay Chung Nhan.
        /// </summary>
        /// <value>The Tong So Lan In Giay Chung Nhan.</value>
        public int? TongSoLanInGiayChungNhan
        {
            get { return GetProperty(TongSoLanInGiayChungNhanProperty); }
            set { SetProperty(TongSoLanInGiayChungNhanProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="TongSoLanInBangTotNghiep"/> property.
        /// </summary>
        public static readonly PropertyInfo<int?> TongSoLanInBangTotNghiepProperty = RegisterProperty<int?>(p => p.TongSoLanInBangTotNghiep, "Tong So Lan In Bang Tot Nghiep");
        /// <summary>
        /// Gets or sets the Tong So Lan In Bang Tot Nghiep.
        /// </summary>
        /// <value>The Tong So Lan In Bang Tot Nghiep.</value>
        public int? TongSoLanInBangTotNghiep
        {
            get { return GetProperty(TongSoLanInBangTotNghiepProperty); }
            set { SetProperty(TongSoLanInBangTotNghiepProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="TongSoLanInHoaDon"/> property.
        /// </summary>
        public static readonly PropertyInfo<int?> TongSoLanInHoaDonProperty = RegisterProperty<int?>(p => p.TongSoLanInHoaDon, "Tong So Lan In Hoa Don");
        /// <summary>
        /// Gets or sets the Tong So Lan In Hoa Don.
        /// </summary>
        /// <value>The Tong So Lan In Hoa Don.</value>
        public int? TongSoLanInHoaDon
        {
            get { return GetProperty(TongSoLanInHoaDonProperty); }
            set { SetProperty(TongSoLanInHoaDonProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="GhiChu"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> GhiChuProperty = RegisterProperty<string>(p => p.GhiChu, "Ghi Chu");
        /// <summary>
        /// Gets or sets the Ghi Chu.
        /// </summary>
        /// <value>The Ghi Chu.</value>
        public string GhiChu
        {
            get { return GetProperty(GhiChuProperty); }
            set { SetProperty(GhiChuProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="LastEdited_User"/> property.
        /// </summary>
        public static readonly PropertyInfo<Int64?> LastEdited_UserProperty = RegisterProperty<Int64?>(p => p.LastEdited_User, "Last Edited User");
        /// <summary>
        /// Gets or sets the Last Edited User.
        /// </summary>
        /// <value>The Last Edited User.</value>
        public Int64? LastEdited_User
        {
            get { return GetProperty(LastEdited_UserProperty); }
            set { SetProperty(LastEdited_UserProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="LastEdited_Date"/> property.
        /// </summary>
        public static readonly PropertyInfo<SmartDate> LastEdited_DateProperty = RegisterProperty<SmartDate>(p => p.LastEdited_Date, "Last Edited Date");
        /// <summary>
        /// Gets or sets the Last Edited Date.
        /// </summary>
        /// <value>The Last Edited Date.</value>
        public SmartDate LastEdited_Date
        {
            get { return GetProperty(LastEdited_DateProperty); }
            set { SetProperty(LastEdited_DateProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="TongTienHoc"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> TongTienHocProperty = RegisterProperty<string>(p => p.TongTienHoc, "Tong Tien Hoc");
        /// <summary>
        /// Gets or sets the Tong Tien Hoc.
        /// </summary>
        /// <value>The Tong Tien Hoc.</value>
        public string TongTienHoc
        {
            get { return GetProperty(TongTienHocProperty); }
            set { SetProperty(TongTienHocProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="TongChiPhiKhac"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> TongChiPhiKhacProperty = RegisterProperty<string>(p => p.TongChiPhiKhac, "Tong Chi Phi Khac");
        /// <summary>
        /// Gets or sets the Tong Chi Phi Khac.
        /// </summary>
        /// <value>The Tong Chi Phi Khac.</value>
        public string TongChiPhiKhac
        {
            get { return GetProperty(TongChiPhiKhacProperty); }
            set { SetProperty(TongChiPhiKhacProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="Nhom"/> property.
        /// </summary>
        public static readonly PropertyInfo<int?> NhomProperty = RegisterProperty<int?>(p => p.Nhom, "Nhom");
        /// <summary>
        /// Gets or sets the Nhom.
        /// </summary>
        /// <value>The Nhom.</value>
        public int? Nhom
        {
            get { return GetProperty(NhomProperty); }
            set { SetProperty(NhomProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="Lan5"/> property.
        /// </summary>
        public static readonly PropertyInfo<Double?> Lan5Property = RegisterProperty<Double?>(p => p.Lan5, "Lan5");
        /// <summary>
        /// Gets or sets the Lan5.
        /// </summary>
        /// <value>The Lan5.</value>
        public Double? Lan5
        {
            get { return GetProperty(Lan5Property); }
            set { SetProperty(Lan5Property, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="HoaDonHocPhi"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> HoaDonHocPhiProperty = RegisterProperty<string>(p => p.HoaDonHocPhi, "Hoa Don Hoc Phi");
        /// <summary>
        /// Gets or sets the Hoa Don Hoc Phi.
        /// </summary>
        /// <value>The Hoa Don Hoc Phi.</value>
        public string HoaDonHocPhi
        {
            get { return GetProperty(HoaDonHocPhiProperty); }
            set { SetProperty(HoaDonHocPhiProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="NgayDong"/> property.
        /// </summary>
        public static readonly PropertyInfo<SmartDate> NgayDongProperty = RegisterProperty<SmartDate>(p => p.NgayDong, "Ngay Dong");
        /// <summary>
        /// Gets or sets the Ngay Dong.
        /// </summary>
        /// <value>The Ngay Dong.</value>
        public string NgayDong
        {
            get { return GetPropertyConvert<SmartDate, String>(NgayDongProperty); }
            set { SetPropertyConvert<SmartDate, String>(NgayDongProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="SoTienHoan"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> SoTienHoanProperty = RegisterProperty<string>(p => p.SoTienHoan, "So Tien Hoan");
        /// <summary>
        /// Gets or sets the So Tien Hoan.
        /// </summary>
        /// <value>The So Tien Hoan.</value>
        public string SoTienHoan
        {
            get { return GetProperty(SoTienHoanProperty); }
            set { SetProperty(SoTienHoanProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="LyDoHoanTien"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> LyDoHoanTienProperty = RegisterProperty<string>(p => p.LyDoHoanTien, "Ly Do Hoan Tien");
        /// <summary>
        /// Gets or sets the Ly Do Hoan Tien.
        /// </summary>
        /// <value>The Ly Do Hoan Tien.</value>
        public string LyDoHoanTien
        {
            get { return GetProperty(LyDoHoanTienProperty); }
            set { SetProperty(LyDoHoanTienProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="IdBoPhan"/> property.
        /// </summary>
        public static readonly PropertyInfo<int?> IdBoPhanProperty = RegisterProperty<int?>(p => p.IdBoPhan, "Id Bo Phan");
        /// <summary>
        /// Gets or sets the Id Bo Phan.
        /// </summary>
        /// <value>The Id Bo Phan.</value>
        public int? IdBoPhan
        {
            get { return GetProperty(IdBoPhanProperty); }
            set { SetProperty(IdBoPhanProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="NgayDongDetail"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> NgayDongDetailProperty = RegisterProperty<string>(p => p.NgayDongDetail, "Ngay Dong Detail");
        /// <summary>
        /// Gets or sets the Ngay Dong Detail.
        /// </summary>
        /// <value>The Ngay Dong Detail.</value>
        public string NgayDongDetail
        {
            get { return GetProperty(NgayDongDetailProperty); }
            set { SetProperty(NgayDongDetailProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="backup01"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> Backup01Property = RegisterProperty<string>(p => p.Backup01, "backup01");
        /// <summary>
        /// Gets or sets the backup01.
        /// </summary>
        /// <value>The backup01.</value>
        public string Backup01
        {
            get { return GetProperty(Backup01Property); }
            set { SetProperty(Backup01Property, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="backup02"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> Backup02Property = RegisterProperty<string>(p => p.STTHocVienKemCap, "backup02");
        /// <summary>
        /// Gets or sets the backup02.
        /// </summary>
        /// <value>The backup02.</value>
        public string STTHocVienKemCap
        {
            get { return GetProperty(Backup02Property); }
            set { SetProperty(Backup02Property, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="backup03"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> Backup03Property = RegisterProperty<string>(p => p.Backup03, "backup03");
        /// <summary>
        /// Gets or sets the backup03.
        /// </summary>
        /// <value>The backup03.</value>
        public string Backup03
        {
            get { return GetProperty(Backup03Property); }
            set { SetProperty(Backup03Property, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="backup04"/> property.
        /// </summary>
        public static readonly PropertyInfo<SmartDate> Backup04Property = RegisterProperty<SmartDate>(p => p.Backup04, "backup04");
        /// <summary>
        /// Gets or sets the backup04.
        /// </summary>
        /// <value>The backup04.</value>
        public string Backup04
        {
            get { return GetPropertyConvert<SmartDate, String>(Backup04Property); }
            set { SetPropertyConvert<SmartDate, String>(Backup04Property, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="backup05"/> property.
        /// </summary>
        public static readonly PropertyInfo<int?> Backup05Property = RegisterProperty<int?>(p => p.SoTiet, "backup05");
        /// <summary>
        /// Gets or sets the backup05.
        /// </summary>
        /// <value>The backup05.</value>
        public int? SoTiet
        {
            get { return GetProperty(Backup05Property); }
            set { SetProperty(Backup05Property, value); }
        }

        public static readonly PropertyInfo<int?> SoTietHocProperty = RegisterProperty<int?>(p => p.SoTietHoc, "TongSoTiet");
        /// <summary>
        /// Gets or sets the backup05.
        /// </summary>
        /// <value>The backup05.</value>
        public int? SoTietHoc
        {
            get { return GetProperty(SoTietHocProperty); }
            set { SetProperty(SoTietHocProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="SoTienDongDetail"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> SoTienDongDetailProperty = RegisterProperty<string>(p => p.SoTienDongDetail, "So Tien Dong Detail");
        /// <summary>
        /// Gets or sets the So Tien Dong Detail.
        /// </summary>
        /// <value>The So Tien Dong Detail.</value>
        public string SoTienDongDetail
        {
            get { return GetProperty(SoTienDongDetailProperty); }
            set { SetProperty(SoTienDongDetailProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="idLopHoc"/> property.
        /// </summary>
        public static readonly PropertyInfo<int?> IdLopHocProperty = RegisterProperty<int?>(p => p.IdLopHoc, "id Lop Hoc");
        /// <summary>
        /// Gets or sets the id Lop Hoc.
        /// </summary>
        /// <value>The id Lop Hoc.</value>
        public int? IdLopHoc
        {
            get { return GetProperty(IdLopHocProperty); }
            set { SetProperty(IdLopHocProperty, value); }
        }
        public static readonly PropertyInfo<string> TenBenhVienProperty = RegisterProperty<string>(p => p.TenBenhVien, "TenBenhVien");
        /// <summary>
        /// Gets or sets the So Tien Dong Detail.
        /// </summary>
        /// <value>The So Tien Dong Detail.</value>
        public string TenBenhVien
        {
            get { return GetProperty(TenBenhVienProperty); }
            set { SetProperty(TenBenhVienProperty, value); }
        }
        public static readonly PropertyInfo<string> TenNguoiQuanLyProperty = RegisterProperty<string>(p => p.TenNguoiQuanLy, "TenNguoiQuanLyProp");
        /// <summary>
        /// Gets or sets the So Tien Dong Detail.
        /// </summary>
        /// <value>The So Tien Dong Detail.</value>
        public string TenNguoiQuanLy
        {
            get { return GetProperty(TenNguoiQuanLyProperty); }
            set { SetProperty(TenNguoiQuanLyProperty, value); }
        }
        public static readonly PropertyInfo<string> TenLastEdited_UserNameProperty = RegisterProperty<string>(p => p.TenLastEdited_UserName, "TenLastEdited_UserNamePr");
        /// <summary>
        /// Gets or sets the So Tien Dong Detail.
        /// </summary>
        /// <value>The So Tien Dong Detail.</value>
        public string TenLastEdited_UserName
        {
            get { return GetProperty(TenLastEdited_UserNameProperty); }
            set { SetProperty(TenLastEdited_UserNameProperty, value); }
        }
        public static readonly PropertyInfo<string> TenTinhThanhProperty = RegisterProperty<string>(p => p.TenTinhThanh, "TenTinhThanh");
        /// <summary>
        /// Gets or sets the So Tien Dong Detail.
        /// </summary>
        /// <value>The So Tien Dong Detail.</value>
        public string TenTinhThanh
        {
            get { return GetProperty(TenTinhThanhProperty); }
            set { SetProperty(TenTinhThanhProperty, value); }
        }
        public static readonly PropertyInfo<string> TenChuyenNganhProperty = RegisterProperty<string>(p => p.TenChuyenNganh, "TenChuyenNganh");
        /// <summary>
        /// Gets or sets the So Tien Dong Detail.
        /// </summary>
        /// <value>The So Tien Dong Detail.</value>
        public string TenChuyenNganh
        {
            get { return GetProperty(TenChuyenNganhProperty); }
            set { SetProperty(TenChuyenNganhProperty, value); }
        }
        public static readonly PropertyInfo<string> TenTrinhDoProperty = RegisterProperty<string>(p => p.TenTrinhDo, "TenTrinhDoProperty");
        /// <summary>
        /// Gets or sets the So Tien Dong Detail.
        /// </summary>
        /// <value>The So Tien Dong Detail.</value>
        public string TenTrinhDo
        {
            get { return GetProperty(TenTrinhDoProperty); }
            set { SetProperty(TenTrinhDoProperty, value); }
        }
        public static readonly PropertyInfo<string> TenPhongQuanLyProperty = RegisterProperty<string>(p => p.TenPhongQuanLy, "TenPhongQuanLy");
        /// <summary>
        /// Gets or sets the So Tien Dong Detail.
        /// </summary>
        /// <value>The So Tien Dong Detail.</value>
        public string TenPhongQuanLy
        {
            get { return GetProperty(TenPhongQuanLyProperty); }
            set { SetProperty(TenPhongQuanLyProperty, value); }
        }
        public static readonly PropertyInfo<string> TenLopHocProperty = RegisterProperty<string>(p => p.TenLopHoc, "TenLopHoc");
        /// <summary>
        /// Gets or sets the So Tien Dong Detail.
        /// </summary>
        /// <value>The So Tien Dong Detail.</value>
        public string TenLopHoc
        {
            get { return GetProperty(TenLopHocProperty); }
            set { SetProperty(TenLopHocProperty, value); }
        }
        public static readonly PropertyInfo<string> TenKhoaHocProperty = RegisterProperty<string>(p => p.TenKhoaHoc, "TenKhoaHoc");
        /// <summary>
        /// Gets or sets the So Tien Dong Detail.
        /// </summary>
        /// <value>The So Tien Dong Detail.</value>
        public string TenKhoaHoc
        {
            get { return GetProperty(TenKhoaHocProperty); }
            set { SetProperty(TenKhoaHocProperty, value); }
        }
        public static readonly PropertyInfo<string> TenChuyenKhoaLopHocProperty = RegisterProperty<string>(p => p.TenChuyenKhoaLopHoc, "TenChuyenKhoaLopHoc");
        /// <summary>
        /// Gets or sets the So Tien Dong Detail.
        /// </summary>
        /// <value>The So Tien Dong Detail.</value>
        public string TenChuyenKhoaLopHoc
        {
            get { return GetProperty(TenChuyenKhoaLopHocProperty); }
            set { SetProperty(TenChuyenKhoaLopHocProperty, value); }
        }

        public static readonly PropertyInfo<string> MaSoThueProperty = RegisterProperty<string>(p => p.MaSoThue, "MaSoThue");
        /// <summary>
        /// Gets or sets the So Tien Dong Detail.
        /// </summary>
        /// <value>The So Tien Dong Detail.</value>
        public string MaSoThue
        {
            get { return GetProperty(MaSoThueProperty); }
            set { SetProperty(MaSoThueProperty, value); }
        }

        public static readonly PropertyInfo<Int64> SoTienProperty = RegisterProperty<Int64>(p => p.SoTien, "MaSoThue");
        /// <summary>
        /// Gets or sets the So Tien Dong Detail.
        /// </summary>
        /// <value>The So Tien Dong Detail.</value>
        public Int64 SoTien
        {
            get { return GetProperty(SoTienProperty); }
            set { SetProperty(SoTienProperty, value); }
        }



        ///////////////////////////////////////////
        public static readonly PropertyInfo<Int32> IDTinhProperty = RegisterProperty<Int32>(p => p.IDTinh, "MaSoThue");
        /// <summary>
        /// Gets or sets the So Tien Dong Detail.
        /// </summary>
        /// <value>The So Tien Dong Detail.</value>
        public Int32 IDTinh
        {
            get { return GetProperty(IDTinhProperty); }
            set { SetProperty(IDTinhProperty, value); }
        }
        public static readonly PropertyInfo<Int32> IDHuyenProperty = RegisterProperty<Int32>(p => p.IDHuyen, "MaSoThue");
        /// <summary>
        /// Gets or sets the So Tien Dong Detail.
        /// </summary>
        /// <value>The So Tien Dong Detail.</value>
        public Int32 IDHuyen
        {
            get { return GetProperty(IDHuyenProperty); }
            set { SetProperty(IDHuyenProperty, value); }
        }
        public static readonly PropertyInfo<Int32> IDXaProperty = RegisterProperty<Int32>(p => p.IDXa, "MaSoThue");
        /// <summary>
        /// Gets or sets the So Tien Dong Detail.
        /// </summary>
        /// <value>The So Tien Dong Detail.</value>
        public Int32 IDXa
        {
            get { return GetProperty(IDXaProperty); }
            set { SetProperty(IDXaProperty, value); }
        }

        public static readonly PropertyInfo<string> ThoiGianHocProperty = RegisterProperty<string>(p => p.ThoiGianHoc, "ThoiGianHoc");
        /// <summary>
        /// Gets or sets the So Tien Dong Detail.
        /// </summary>
        /// <value>The So Tien Dong Detail.</value>
        public string ThoiGianHoc
        {
            get { return GetProperty(ThoiGianHocProperty); }
            set { SetProperty(ThoiGianHocProperty, value); }
        }

        public static readonly PropertyInfo<string> FileDinhKemProperty = RegisterProperty<string>(p => p.FileDinhKem, "FileDinhKem");
        /// <summary>
        /// Gets or sets the Truong Tot Nghiep.
        /// </summary>
        /// <value>The Truong Tot Nghiep.</value>
        public string FileDinhKem
        {
            get { return GetProperty(FileDinhKemProperty); }
            set { SetProperty(FileDinhKemProperty, value); }
        }

        #endregion

        #region Factory Methods

        /// <summary>
        /// Factory method. Creates a new <see cref="DT_LienTuc_HocVien"/> object.
        /// </summary>
        /// <returns>A reference to the created <see cref="DT_LienTuc_HocVien"/> object.</returns>
        public static DT_LienTuc_HocVien NewDT_LienTuc_HocVien()
        {
            return DataPortal.Create<DT_LienTuc_HocVien>();
        }

        /// <summary>
        /// Factory method. Loads a <see cref="DT_LienTuc_HocVien"/> object, based on given parameters.
        /// </summary>
        /// <param name="id">The Id parameter of the DT_LienTuc_HocVien to fetch.</param>
        /// <returns>A reference to the fetched <see cref="DT_LienTuc_HocVien"/> object.</returns>
        public static DT_LienTuc_HocVien GetDT_LienTuc_HocVien(int id)
        {
            return DataPortal.Fetch<DT_LienTuc_HocVien>(id);
        }

        /// <summary>
        /// Factory method. Deletes a <see cref="DT_LienTuc_HocVien"/> object, based on given parameters.
        /// </summary>
        /// <param name="id">The Id of the DT_LienTuc_HocVien to delete.</param>
        public static void DeleteDT_LienTuc_HocVien(int id)
        {
            DataPortal.Delete<DT_LienTuc_HocVien>(id);
        }

        /// <summary>
        /// Factory method. Asynchronously creates a new <see cref="DT_LienTuc_HocVien"/> object.
        /// </summary>
        /// <param name="callback">The completion callback method.</param>
        public static void NewDT_LienTuc_HocVien(EventHandler<DataPortalResult<DT_LienTuc_HocVien>> callback)
        {
            DataPortal.BeginCreate<DT_LienTuc_HocVien>(callback);
        }

        /// <summary>
        /// Factory method. Asynchronously loads a <see cref="DT_LienTuc_HocVien"/> object, based on given parameters.
        /// </summary>
        /// <param name="id">The Id parameter of the DT_LienTuc_HocVien to fetch.</param>
        /// <param name="callback">The completion callback method.</param>
        public static void GetDT_LienTuc_HocVien(int id, EventHandler<DataPortalResult<DT_LienTuc_HocVien>> callback)
        {
            DataPortal.BeginFetch<DT_LienTuc_HocVien>(id, callback);
        }

        /// <summary>
        /// Factory method. Asynchronously deletes a <see cref="DT_LienTuc_HocVien"/> object, based on given parameters.
        /// </summary>
        /// <param name="id">The Id of the DT_LienTuc_HocVien to delete.</param>
        /// <param name="callback">The completion callback method.</param>
        public static void DeleteDT_LienTuc_HocVien(int id, EventHandler<DataPortalResult<DT_LienTuc_HocVien>> callback)
        {
            DataPortal.BeginDelete<DT_LienTuc_HocVien>(id, callback);
        }

        #endregion

        #region Constructor

        /// <summary>
        /// Initializes a new instance of the <see cref="DT_LienTuc_HocVien"/> class.
        /// </summary>
        /// <remarks> Do not use to create a Csla object. Use factory methods instead.</remarks>
        private DT_LienTuc_HocVien()
        {
            // Prevent direct creation
        }

        #endregion

        #region Data Access

        /// <summary>
        /// Loads default values for the <see cref="DT_LienTuc_HocVien"/> object properties.
        /// </summary>
        [Csla.RunLocal]
        protected override void DataPortal_Create()
        {
            LoadProperty(IdProperty, System.Threading.Interlocked.Decrement(ref _lastID));
            LoadProperty(HoTenProperty, null);
            LoadProperty(NgaySinhProperty, null);
            LoadProperty(SoCMTProperty, null);
            LoadProperty(HinhThucHocProperty, null);
            LoadProperty(MaLopHocProperty, null);
            LoadProperty(TrangThaiProperty, null);
            LoadProperty(MaHocVienProperty, null);
            LoadProperty(GioiTinhProperty, null);
            LoadProperty(TruongTotNghiepProperty, null);
            LoadProperty(SoBangProperty, null);
            LoadProperty(NoiCongTacProperty, null);
            LoadProperty(DiaChiCoQuanProperty, null);
            LoadProperty(DiaChiNhaRiengProperty, null);
            LoadProperty(DienThoaiCoQuanProperty, null);
            LoadProperty(DienThoaiNhaRiengProperty, null);
            LoadProperty(DiDongProperty, null);
            LoadProperty(EmailProperty, null);
            LoadProperty(NgayCapCMTProperty, null);
            LoadProperty(NoiCapCMTProperty, null);
            LoadProperty(NgayDangKiProperty, null);
            LoadProperty(NoiDungDaoTaoProperty, null);
            LoadProperty(NgayBatDauProperty, null);
            LoadProperty(NgayKetThucProperty, null);
            LoadProperty(AnhProperty, null);
            LoadProperty(TongHocPhiProperty, null);
            LoadProperty(XepLoaiProperty, null);
            LoadProperty(GhiChuProperty, null);
            LoadProperty(LastEdited_DateProperty, null);
            LoadProperty(TongTienHocProperty, null);
            LoadProperty(TongChiPhiKhacProperty, null);
            LoadProperty(HoaDonHocPhiProperty, null);
            LoadProperty(NgayDongProperty, null);
            LoadProperty(SoTienHoanProperty, null);
            LoadProperty(LyDoHoanTienProperty, null);
            LoadProperty(NgayDongDetailProperty, null);
            LoadProperty(Backup01Property, null);
            LoadProperty(Backup02Property, null);
            LoadProperty(Backup03Property, null);
            LoadProperty(Backup04Property, null);
            LoadProperty(Backup05Property, null);
            LoadProperty(SoTienDongDetailProperty, null);
            LoadProperty(TenBenhVienProperty, null);
            LoadProperty(TenTinhThanhProperty, null);
            LoadProperty(TenChuyenNganhProperty, null);
            LoadProperty(TenTrinhDoProperty, null);
            LoadProperty(TenPhongQuanLyProperty, null);
            LoadProperty(TenLopHocProperty, null);
            LoadProperty(TenChuyenKhoaLopHocProperty, null);
            LoadProperty(TenKhoaHocProperty, null);
            LoadProperty(TenLastEdited_UserNameProperty, null);
            LoadProperty(TenNguoiQuanLyProperty, null);
            LoadProperty(SoTietHocProperty, null);
            LoadProperty(MaSoThueProperty, null);
            LoadProperty(SoTienProperty, null);
            LoadProperty(IDTinhProperty, null);
            LoadProperty(IDHuyenProperty, null);
            LoadProperty(IDXaProperty, null);
            LoadProperty(ThoiGianHocProperty, null);
            LoadProperty(FileDinhKemProperty, null);
            var args = new DataPortalHookArgs();
            OnCreate(args);
            base.DataPortal_Create();
        }

        /// <summary>
        /// Loads a <see cref="DT_LienTuc_HocVien"/> object from the database, based on given criteria.
        /// </summary>
        /// <param name="id">The id.</param>
        protected void DataPortal_Fetch(int id)
        {
            using (var ctx = ConnectionManager<SqlConnection>.GetManager("Connection"))
            {
                using (var cmd = new SqlCommand("dbo.DT_LienTuc_HocVien_get", ctx.Connection))
                {
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@id", id).DbType = DbType.Int32;
                    var args = new DataPortalHookArgs(cmd, id);
                    OnFetchPre(args);
                    Fetch(cmd);
                    OnFetchPost(args);
                }
            }
            // check all object rules and property rules
            BusinessRules.CheckRules();
        }

        private void Fetch(SqlCommand cmd)
        {
            using (var dr = new SafeDataReader(cmd.ExecuteReader()))
            {
                if (dr.Read())
                {
                    Fetch(dr);
                }
            }
        }

        /// <summary>
        /// Loads a <see cref="DT_LienTuc_HocVien"/> object from the given SafeDataReader.
        /// </summary>
        /// <param name="dr">The SafeDataReader to use.</param>
        private void Fetch(SafeDataReader dr)
        {
            // Value properties
            LoadProperty(IdProperty, dr.GetInt32("Id"));
            LoadProperty(HoTenProperty, dr.GetString("HoTen"));

            //object time = dr.GetValue("NgaySinh");
            //if (time == null )
            //    LoadProperty(NgaySinhProperty, null);
            //else
            LoadProperty(NgaySinhProperty, dr.GetSmartDate("NgaySinh"));

            LoadProperty(SoCMTProperty, dr.GetString("SoCMT"));
            LoadProperty(HinhThucHocProperty, dr.GetString("HinhThucHoc"));
            LoadProperty(MaLopHocProperty, dr.GetString("MaLopHoc"));
            LoadProperty(TrangThaiProperty, dr.GetString("TrangThai"));
            LoadProperty(DaDongHocPhiProperty, dr.GetBoolean("DaDongHocPhi"));
            LoadProperty(IdNguoiQuanLyProperty, dr.GetInt64("IdNguoiQuanLy"));
            LoadProperty(MaHocVienProperty, dr.GetString("MaHocVien"));

            LoadProperty(IdTrinhDoProperty, dr.GetInt32("IdTrinhDo"));
            LoadProperty(IdChuyenNganhProperty, dr.GetInt32("IdChuyenNganh"));
            LoadProperty(TruongTotNghiepProperty, dr.GetString("TruongTotNghiep"));
            LoadProperty(NamTotNghiepProperty, dr.GetInt32("NamTotNghiep"));
            LoadProperty(SoBangProperty, dr.GetString("SoBang"));
            LoadProperty(NoiCongTacProperty, dr.GetString("NoiCongTac"));
            LoadProperty(IdTinhThanhProperty, dr.GetInt64("IdTinhThanh"));
            LoadProperty(DiaChiCoQuanProperty, dr.GetString("DiaChiCoQuan"));
            LoadProperty(DiaChiNhaRiengProperty, dr.GetString("DiaChiNhaRieng"));
            LoadProperty(DienThoaiCoQuanProperty, dr.GetString("DienThoaiCoQuan"));
            LoadProperty(DienThoaiNhaRiengProperty, dr.GetString("DienThoaiNhaRieng"));
            LoadProperty(DiDongProperty, dr.GetString("DiDong"));
            LoadProperty(EmailProperty, dr.GetString("Email"));
            LoadProperty(NgayCapCMTProperty, dr.GetSmartDate("NgayCapCMT"));
            LoadProperty(NoiCapCMTProperty, dr.GetString("NoiCapCMT"));

            LoadProperty(IdBenhVienCongTacProperty, dr.GetInt64("idBenhVienCongTac"));
            LoadProperty(TongSoLanInTheProperty, dr.GetInt32("TongSoLanInThe"));
            LoadProperty(TongSoLanInGiayChungNhanProperty, dr.GetInt32("TongSoLanInGiayChungNhan"));
            LoadProperty(TongSoLanInBangTotNghiepProperty, dr.GetInt32("TongSoLanInBangTotNghiep"));
            LoadProperty(TongSoLanInHoaDonProperty, dr.GetInt32("TongSoLanInHoaDon"));
            LoadProperty(TongTienHocProperty, dr.GetString("TongTienHoc"));
            LoadProperty(TongChiPhiKhacProperty, dr.GetString("TongChiPhiKhac"));

            LoadProperty(NhomProperty, dr.GetInt32("Nhom"));
            LoadProperty(Lan5Property, dr.GetDouble("Lan5"));
            LoadProperty(HoaDonHocPhiProperty, dr.GetString("HoaDonHocPhi"));

            //time = dr.GetValue("NgayDong");
            //if (time == null)
            //    LoadProperty(NgayDongProperty, null);
            //else
            LoadProperty(NgayDongProperty, dr.GetDateTime("NgayDong"));

            //time = dr.GetValue("NgayDangKi");
            //if (time == null)
            //    LoadProperty(NgayDangKiProperty, null);
            //else
            LoadProperty(NgayDangKiProperty, dr.GetSmartDate("NgayDangKi"));

            LoadProperty(IdChuyenNganhDangKiProperty, dr.GetInt32("IdChuyenNganhDangKi"));
            LoadProperty(NoiDungDaoTaoProperty, dr.GetString("NoiDungDaoTao"));

            //time = dr.GetValue("NgayBatDau");
            //if (time == null)
            //    LoadProperty(NgayBatDauProperty, null);
            //else
            LoadProperty(NgayBatDauProperty, dr.GetSmartDate("NgayBatDau"));

            //time = dr.GetValue("NgayKetThuc");
            //if (time == null)
            //    LoadProperty(NgayKetThucProperty, null);
            //else
            LoadProperty(NgayKetThucProperty, dr.GetSmartDate("NgayKetThuc"));
            LoadProperty(AnhProperty, dr.GetString("Anh"));
            LoadProperty(IdKhungLopHocProperty, dr.GetInt32("IdKhungLopHoc"));
            LoadProperty(GioiTinhProperty, dr.GetString("GioiTinh"));
            LoadProperty(TongHocPhiProperty, dr.GetString("TongHocPhi"));
            LoadProperty(DiemThiProperty, dr.GetDouble("DiemThi"));
            LoadProperty(XepLoaiProperty, dr.GetString("XepLoai"));
            LoadProperty(Lan1Property, dr.GetDouble("Lan1"));
            LoadProperty(Lan2Property, dr.GetDouble("Lan2"));
            LoadProperty(Lan3Property, dr.GetDouble("Lan3"));
            LoadProperty(Lan4Property, dr.GetDouble("Lan4"));
            LoadProperty(SoTienHoanProperty, dr.GetString("SoTienHoan"));
            LoadProperty(LyDoHoanTienProperty, dr.GetString("LyDoHoanTien"));
            LoadProperty(IdBoPhanProperty, dr.GetInt32("IdBoPhan"));
            LoadProperty(NgayDongDetailProperty, dr.GetString("NgayDongDetail"));
            LoadProperty(Backup01Property, dr.GetString("Backup01"));
            LoadProperty(Backup02Property, dr.GetString("Backup02"));
            LoadProperty(Backup03Property, dr.GetString("Backup03"));
            LoadProperty(Backup04Property, dr.GetSmartDate("Backup04"));
            LoadProperty(Backup05Property, dr.GetInt32("Backup05"));
            LoadProperty(SoTietHocProperty, dr.GetInt32("TongSoTiet"));
            //LoadProperty(SoTietHocProperty, dr.GetInt32("Backup05"));
            LoadProperty(SoTienDongDetailProperty, dr.GetString("SoTienDongDetail"));
            LoadProperty(IdLopHocProperty, dr.GetInt32("IdLopHoc"));
            LoadProperty(TenTinhThanhProperty, dr.GetString("TenTinhThanh"));
            LoadProperty(TenChuyenKhoaLopHocProperty, dr.GetString("TenChuyenKhoaLopHoc"));
            LoadProperty(TenTrinhDoProperty, dr.GetString("TenTrinhDo"));
            LoadProperty(TenPhongQuanLyProperty, dr.GetString("TenBoPhan"));
            LoadProperty(TenKhoaHocProperty, dr.GetString("TenKhoaHoc"));
            LoadProperty(TenLopHocProperty, dr.GetString("TenLopHoc"));
            LoadProperty(TenNguoiQuanLyProperty, dr.GetString("TenNguoiQuanLy"));
            LoadProperty(TenLastEdited_UserNameProperty, dr.GetString("TenLastEdited_UserName"));
            LoadProperty(LastEdited_DateProperty, dr.GetSmartDate("LastEdited_Date"));
            LoadProperty(MaSoThueProperty, dr.GetString("MaSoThue"));
            LoadProperty(SoTienProperty, dr.GetInt64("TongSoTienDaDong"));
            LoadProperty(ThoiGianHocProperty, dr.GetString("ThoiGianHoc"));
            LoadProperty(FileDinhKemProperty, dr.GetString("FileDinhKem"));
            var args = new DataPortalHookArgs(dr);
            OnFetchRead(args);
        }

        /// <summary>
        /// Inserts a new <see cref="DT_LienTuc_HocVien"/> object in the database.
        /// </summary>
        protected override void DataPortal_Insert()
        {
            using (var ctx = TransactionManager<SqlConnection, SqlTransaction>.GetManager("Connection"))
            {
                using (var cmd = new SqlCommand("dbo.DT_LienTuc_HocVien_add", ctx.Connection))
                {
                    cmd.Transaction = ctx.Transaction;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@id", ReadProperty(IdProperty)).Direction = ParameterDirection.Output;
                    cmd.Parameters.AddWithValue("@HoTen", ReadProperty(HoTenProperty) == null ? (object)DBNull.Value : ReadProperty(HoTenProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@NgaySinh", ReadProperty(NgaySinhProperty).DBValue).DbType = DbType.DateTime;
                    cmd.Parameters.AddWithValue("@SoCMT", ReadProperty(SoCMTProperty) == null ? (object)DBNull.Value : ReadProperty(SoCMTProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@HinhThucHoc", ReadProperty(HinhThucHocProperty) == null ? (object)DBNull.Value : ReadProperty(HinhThucHocProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@MaLopHoc", ReadProperty(MaLopHocProperty) == null ? (object)DBNull.Value : ReadProperty(MaLopHocProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@TrangThai", ReadProperty(TrangThaiProperty) == null ? (object)DBNull.Value : ReadProperty(TrangThaiProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@DaDongHocPhi", ReadProperty(DaDongHocPhiProperty) == null ? (object)DBNull.Value : ReadProperty(DaDongHocPhiProperty).Value).DbType = DbType.Boolean;
                    cmd.Parameters.AddWithValue("@idNguoiQuanLy", ReadProperty(IdNguoiQuanLyProperty) == null ? (object)DBNull.Value : ReadProperty(IdNguoiQuanLyProperty).Value).DbType = DbType.Int64;
                    cmd.Parameters.AddWithValue("@MaHocVien", ReadProperty(MaHocVienProperty) == null ? (object)DBNull.Value : ReadProperty(MaHocVienProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@GioiTinh", ReadProperty(GioiTinhProperty) == null ? (object)DBNull.Value : ReadProperty(GioiTinhProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@idTrinhDo", ReadProperty(IdTrinhDoProperty) == null ? (object)DBNull.Value : ReadProperty(IdTrinhDoProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@idChuyenNganh", ReadProperty(IdChuyenNganhProperty) == null ? (object)DBNull.Value : ReadProperty(IdChuyenNganhProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@TruongTotNghiep", ReadProperty(TruongTotNghiepProperty) == null ? (object)DBNull.Value : ReadProperty(TruongTotNghiepProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@NamTotNghiep", ReadProperty(NamTotNghiepProperty) == null ? (object)DBNull.Value : ReadProperty(NamTotNghiepProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@SoBang", ReadProperty(SoBangProperty) == null ? (object)DBNull.Value : ReadProperty(SoBangProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@NoiCongTac", ReadProperty(NoiCongTacProperty) == null ? (object)DBNull.Value : ReadProperty(NoiCongTacProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@idTinhThanh", ReadProperty(IdTinhThanhProperty) == null ? (object)DBNull.Value : ReadProperty(IdTinhThanhProperty).Value).DbType = DbType.Int64;
                    cmd.Parameters.AddWithValue("@DiaChiCoQuan", ReadProperty(DiaChiCoQuanProperty) == null ? (object)DBNull.Value : ReadProperty(DiaChiCoQuanProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@DiaChiNhaRieng", ReadProperty(DiaChiNhaRiengProperty) == null ? (object)DBNull.Value : ReadProperty(DiaChiNhaRiengProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@DienThoaiCoQuan", ReadProperty(DienThoaiCoQuanProperty) == null ? (object)DBNull.Value : ReadProperty(DienThoaiCoQuanProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@DienThoaiNhaRieng", ReadProperty(DienThoaiNhaRiengProperty) == null ? (object)DBNull.Value : ReadProperty(DienThoaiNhaRiengProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@DiDong", ReadProperty(DiDongProperty) == null ? (object)DBNull.Value : ReadProperty(DiDongProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@Email", ReadProperty(EmailProperty) == null ? (object)DBNull.Value : ReadProperty(EmailProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@NgayCapCMT", ReadProperty(NgayCapCMTProperty).DBValue).DbType = DbType.DateTime;
                    cmd.Parameters.AddWithValue("@NoiCapCMT", ReadProperty(NoiCapCMTProperty) == null ? (object)DBNull.Value : ReadProperty(NoiCapCMTProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@NgayDangKi", ReadProperty(NgayDangKiProperty).DBValue).DbType = DbType.DateTime;
                    cmd.Parameters.AddWithValue("@idChuyenNganhDangKi", ReadProperty(IdChuyenNganhDangKiProperty) == null ? (object)DBNull.Value : ReadProperty(IdChuyenNganhDangKiProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@NoiDungDaoTao", ReadProperty(NoiDungDaoTaoProperty) == null ? (object)DBNull.Value : ReadProperty(NoiDungDaoTaoProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@NgayBatDau", ReadProperty(NgayBatDauProperty).DBValue).DbType = DbType.DateTime;
                    cmd.Parameters.AddWithValue("@NgayKetThuc", ReadProperty(NgayKetThucProperty).DBValue).DbType = DbType.DateTime;
                    cmd.Parameters.AddWithValue("@Anh", ReadProperty(AnhProperty) == null ? (object)DBNull.Value : ReadProperty(AnhProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@idKhungLopHoc", ReadProperty(IdKhungLopHocProperty) == null ? (object)DBNull.Value : ReadProperty(IdKhungLopHocProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@TongHocPhi", ReadProperty(TongHocPhiProperty) == null ? (object)DBNull.Value : ReadProperty(TongHocPhiProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@DiemThi", ReadProperty(DiemThiProperty) == null ? (object)DBNull.Value : ReadProperty(DiemThiProperty).Value).DbType = DbType.Double;
                    cmd.Parameters.AddWithValue("@XepLoai", ReadProperty(XepLoaiProperty) == null ? (object)DBNull.Value : ReadProperty(XepLoaiProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@Lan1", ReadProperty(Lan1Property) == null ? (object)DBNull.Value : ReadProperty(Lan1Property).Value).DbType = DbType.Double;
                    cmd.Parameters.AddWithValue("@Lan2", ReadProperty(Lan2Property) == null ? (object)DBNull.Value : ReadProperty(Lan2Property).Value).DbType = DbType.Double;
                    cmd.Parameters.AddWithValue("@Lan3", ReadProperty(Lan3Property) == null ? (object)DBNull.Value : ReadProperty(Lan3Property).Value).DbType = DbType.Double;
                    cmd.Parameters.AddWithValue("@Lan4", ReadProperty(Lan4Property) == null ? (object)DBNull.Value : ReadProperty(Lan4Property).Value).DbType = DbType.Double;
                    cmd.Parameters.AddWithValue("@DangKiTuCTT", ReadProperty(DangKiTuCTTProperty) == null ? (object)DBNull.Value : ReadProperty(DangKiTuCTTProperty).Value).DbType = DbType.Boolean;
                    cmd.Parameters.AddWithValue("@idBenhVienCongTac", ReadProperty(IdBenhVienCongTacProperty) == null ? (object)DBNull.Value : ReadProperty(IdBenhVienCongTacProperty).Value).DbType = DbType.Int64;
                    cmd.Parameters.AddWithValue("@TongSoLanInThe", ReadProperty(TongSoLanInTheProperty) == null ? (object)DBNull.Value : ReadProperty(TongSoLanInTheProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@TongSoLanInGiayChungNhan", ReadProperty(TongSoLanInGiayChungNhanProperty) == null ? (object)DBNull.Value : ReadProperty(TongSoLanInGiayChungNhanProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@TongSoLanInBangTotNghiep", ReadProperty(TongSoLanInBangTotNghiepProperty) == null ? (object)DBNull.Value : ReadProperty(TongSoLanInBangTotNghiepProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@TongSoLanInHoaDon", ReadProperty(TongSoLanInHoaDonProperty) == null ? (object)DBNull.Value : ReadProperty(TongSoLanInHoaDonProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@GhiChu", ReadProperty(GhiChuProperty) == null ? (object)DBNull.Value : ReadProperty(GhiChuProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@LastEdited_User", ReadProperty(LastEdited_UserProperty) == null ? (object)DBNull.Value : ReadProperty(LastEdited_UserProperty).Value).DbType = DbType.Int64;
                    cmd.Parameters.AddWithValue("@LastEdited_Date", ReadProperty(LastEdited_DateProperty).DBValue).DbType = DbType.DateTime;
                    cmd.Parameters.AddWithValue("@TongTienHoc", ReadProperty(TongTienHocProperty) == null ? (object)DBNull.Value : ReadProperty(TongTienHocProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@TongChiPhiKhac", ReadProperty(TongChiPhiKhacProperty) == null ? (object)DBNull.Value : ReadProperty(TongChiPhiKhacProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@Nhom", ReadProperty(NhomProperty) == null ? (object)DBNull.Value : ReadProperty(NhomProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@Lan5", ReadProperty(Lan5Property) == null ? (object)DBNull.Value : ReadProperty(Lan5Property).Value).DbType = DbType.Double;
                    cmd.Parameters.AddWithValue("@HoaDonHocPhi", ReadProperty(HoaDonHocPhiProperty) == null ? (object)DBNull.Value : ReadProperty(HoaDonHocPhiProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@NgayDong", ReadProperty(NgayDongProperty).DBValue).DbType = DbType.DateTime;
                    cmd.Parameters.AddWithValue("@SoTienHoan", ReadProperty(SoTienHoanProperty) == null ? (object)DBNull.Value : ReadProperty(SoTienHoanProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@LyDoHoanTien", ReadProperty(LyDoHoanTienProperty) == null ? (object)DBNull.Value : ReadProperty(LyDoHoanTienProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@IdBoPhan", ReadProperty(IdBoPhanProperty) == null ? (object)DBNull.Value : ReadProperty(IdBoPhanProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@NgayDongDetail", ReadProperty(NgayDongDetailProperty) == null ? (object)DBNull.Value : ReadProperty(NgayDongDetailProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@backup01", ReadProperty(Backup01Property) == null ? (object)DBNull.Value : ReadProperty(Backup01Property)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@backup02", ReadProperty(Backup02Property) == null ? (object)DBNull.Value : ReadProperty(Backup02Property)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@backup03", ReadProperty(Backup03Property) == null ? (object)DBNull.Value : ReadProperty(Backup03Property)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@backup04", ReadProperty(Backup04Property).DBValue).DbType = DbType.DateTime;
                    cmd.Parameters.AddWithValue("@backup05", ReadProperty(Backup05Property) == null ? (object)DBNull.Value : ReadProperty(Backup05Property).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@SoTienDongDetail", ReadProperty(SoTienDongDetailProperty) == null ? (object)DBNull.Value : ReadProperty(SoTienDongDetailProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@idLopHoc", ReadProperty(IdLopHocProperty) == null ? (object)DBNull.Value : ReadProperty(IdLopHocProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@MaSoThue", ReadProperty(MaSoThueProperty) == null ? (object)DBNull.Value : ReadProperty(MaSoThueProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@IDTinh", ReadProperty(IDTinhProperty) == null ? (object)DBNull.Value : ReadProperty(IDTinhProperty)).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@IDHuyen", ReadProperty(IDHuyenProperty) == null ? (object)DBNull.Value : ReadProperty(IDHuyenProperty)).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@IDXa", ReadProperty(IDXaProperty) == null ? (object)DBNull.Value : ReadProperty(IDXaProperty)).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@ThoiGianHoc", ReadProperty(ThoiGianHocProperty) == null ? (object)DBNull.Value : ReadProperty(ThoiGianHocProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@FileDinhKem", ReadProperty(FileDinhKemProperty) == null ? (object)DBNull.Value : ReadProperty(FileDinhKemProperty)).DbType = DbType.String;
                    var args = new DataPortalHookArgs(cmd);
                    OnInsertPre(args);
                    cmd.ExecuteNonQuery();
                    OnInsertPost(args);
                    LoadProperty(IdProperty, (int) cmd.Parameters["@id"].Value);
                }
                ctx.Commit();
            }
        }

        /// <summary>
        /// Updates in the database all changes made to the <see cref="DT_LienTuc_HocVien"/> object.
        /// </summary>
        protected override void DataPortal_Update()
        {
            using (var ctx = TransactionManager<SqlConnection, SqlTransaction>.GetManager("Connection"))
            {
                using (var cmd = new SqlCommand("dbo.DT_LienTuc_HocVien_update", ctx.Connection))
                {
                    cmd.Transaction = ctx.Transaction;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@id", ReadProperty(IdProperty)).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@HoTen", ReadProperty(HoTenProperty) == null ? (object)DBNull.Value : ReadProperty(HoTenProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@NgaySinh", ReadProperty(NgaySinhProperty).DBValue).DbType = DbType.DateTime;
                    cmd.Parameters.AddWithValue("@SoCMT", ReadProperty(SoCMTProperty) == null ? (object)DBNull.Value : ReadProperty(SoCMTProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@HinhThucHoc", ReadProperty(HinhThucHocProperty) == null ? (object)DBNull.Value : ReadProperty(HinhThucHocProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@MaLopHoc", ReadProperty(MaLopHocProperty) == null ? (object)DBNull.Value : ReadProperty(MaLopHocProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@TrangThai", ReadProperty(TrangThaiProperty) == null ? (object)DBNull.Value : ReadProperty(TrangThaiProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@DaDongHocPhi", ReadProperty(DaDongHocPhiProperty) == null ? (object)DBNull.Value : ReadProperty(DaDongHocPhiProperty).Value).DbType = DbType.Boolean;
                    cmd.Parameters.AddWithValue("@idNguoiQuanLy", ReadProperty(IdNguoiQuanLyProperty) == null ? (object)DBNull.Value : ReadProperty(IdNguoiQuanLyProperty).Value).DbType = DbType.Int64;
                    cmd.Parameters.AddWithValue("@MaHocVien", ReadProperty(MaHocVienProperty) == null ? (object)DBNull.Value : ReadProperty(MaHocVienProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@GioiTinh", ReadProperty(GioiTinhProperty) == null ? (object)DBNull.Value : ReadProperty(GioiTinhProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@idTrinhDo", ReadProperty(IdTrinhDoProperty) == null ? (object)DBNull.Value : ReadProperty(IdTrinhDoProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@idChuyenNganh", ReadProperty(IdChuyenNganhProperty) == null ? (object)DBNull.Value : ReadProperty(IdChuyenNganhProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@TruongTotNghiep", ReadProperty(TruongTotNghiepProperty) == null ? (object)DBNull.Value : ReadProperty(TruongTotNghiepProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@NamTotNghiep", ReadProperty(NamTotNghiepProperty) == null ? (object)DBNull.Value : ReadProperty(NamTotNghiepProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@SoBang", ReadProperty(SoBangProperty) == null ? (object)DBNull.Value : ReadProperty(SoBangProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@NoiCongTac", ReadProperty(NoiCongTacProperty) == null ? (object)DBNull.Value : ReadProperty(NoiCongTacProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@idTinhThanh", ReadProperty(IdTinhThanhProperty) == null ? (object)DBNull.Value : ReadProperty(IdTinhThanhProperty).Value).DbType = DbType.Int64;
                    cmd.Parameters.AddWithValue("@DiaChiCoQuan", ReadProperty(DiaChiCoQuanProperty) == null ? (object)DBNull.Value : ReadProperty(DiaChiCoQuanProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@DiaChiNhaRieng", ReadProperty(DiaChiNhaRiengProperty) == null ? (object)DBNull.Value : ReadProperty(DiaChiNhaRiengProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@DienThoaiCoQuan", ReadProperty(DienThoaiCoQuanProperty) == null ? (object)DBNull.Value : ReadProperty(DienThoaiCoQuanProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@DienThoaiNhaRieng", ReadProperty(DienThoaiNhaRiengProperty) == null ? (object)DBNull.Value : ReadProperty(DienThoaiNhaRiengProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@DiDong", ReadProperty(DiDongProperty) == null ? (object)DBNull.Value : ReadProperty(DiDongProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@Email", ReadProperty(EmailProperty) == null ? (object)DBNull.Value : ReadProperty(EmailProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@NgayCapCMT", ReadProperty(NgayCapCMTProperty).DBValue).DbType = DbType.DateTime;
                    cmd.Parameters.AddWithValue("@NoiCapCMT", ReadProperty(NoiCapCMTProperty) == null ? (object)DBNull.Value : ReadProperty(NoiCapCMTProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@NgayDangKi", ReadProperty(NgayDangKiProperty).DBValue).DbType = DbType.DateTime;
                    cmd.Parameters.AddWithValue("@idChuyenNganhDangKi", ReadProperty(IdChuyenNganhDangKiProperty) == null ? (object)DBNull.Value : ReadProperty(IdChuyenNganhDangKiProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@NoiDungDaoTao", ReadProperty(NoiDungDaoTaoProperty) == null ? (object)DBNull.Value : ReadProperty(NoiDungDaoTaoProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@NgayBatDau", ReadProperty(NgayBatDauProperty).DBValue).DbType = DbType.DateTime;
                    cmd.Parameters.AddWithValue("@NgayKetThuc", ReadProperty(NgayKetThucProperty).DBValue).DbType = DbType.DateTime;
                    cmd.Parameters.AddWithValue("@Anh", ReadProperty(AnhProperty) == null ? (object)DBNull.Value : ReadProperty(AnhProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@idKhungLopHoc", ReadProperty(IdKhungLopHocProperty) == null ? (object)DBNull.Value : ReadProperty(IdKhungLopHocProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@TongHocPhi", ReadProperty(TongHocPhiProperty) == null ? (object)DBNull.Value : ReadProperty(TongHocPhiProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@DiemThi", ReadProperty(DiemThiProperty) == null ? (object)DBNull.Value : ReadProperty(DiemThiProperty).Value).DbType = DbType.Double;
                    cmd.Parameters.AddWithValue("@XepLoai", ReadProperty(XepLoaiProperty) == null ? (object)DBNull.Value : ReadProperty(XepLoaiProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@Lan1", ReadProperty(Lan1Property) == null ? (object)DBNull.Value : ReadProperty(Lan1Property).Value).DbType = DbType.Double;
                    cmd.Parameters.AddWithValue("@Lan2", ReadProperty(Lan2Property) == null ? (object)DBNull.Value : ReadProperty(Lan2Property).Value).DbType = DbType.Double;
                    cmd.Parameters.AddWithValue("@Lan3", ReadProperty(Lan3Property) == null ? (object)DBNull.Value : ReadProperty(Lan3Property).Value).DbType = DbType.Double;
                    cmd.Parameters.AddWithValue("@Lan4", ReadProperty(Lan4Property) == null ? (object)DBNull.Value : ReadProperty(Lan4Property).Value).DbType = DbType.Double;
                    cmd.Parameters.AddWithValue("@DangKiTuCTT", ReadProperty(DangKiTuCTTProperty) == null ? (object)DBNull.Value : ReadProperty(DangKiTuCTTProperty).Value).DbType = DbType.Boolean;
                    cmd.Parameters.AddWithValue("@idBenhVienCongTac", ReadProperty(IdBenhVienCongTacProperty) == null ? (object)DBNull.Value : ReadProperty(IdBenhVienCongTacProperty).Value).DbType = DbType.Int64;
                    cmd.Parameters.AddWithValue("@TongSoLanInThe", ReadProperty(TongSoLanInTheProperty) == null ? (object)DBNull.Value : ReadProperty(TongSoLanInTheProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@TongSoLanInGiayChungNhan", ReadProperty(TongSoLanInGiayChungNhanProperty) == null ? (object)DBNull.Value : ReadProperty(TongSoLanInGiayChungNhanProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@TongSoLanInBangTotNghiep", ReadProperty(TongSoLanInBangTotNghiepProperty) == null ? (object)DBNull.Value : ReadProperty(TongSoLanInBangTotNghiepProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@TongSoLanInHoaDon", ReadProperty(TongSoLanInHoaDonProperty) == null ? (object)DBNull.Value : ReadProperty(TongSoLanInHoaDonProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@GhiChu", ReadProperty(GhiChuProperty) == null ? (object)DBNull.Value : ReadProperty(GhiChuProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@LastEdited_User", ReadProperty(LastEdited_UserProperty) == null ? (object)DBNull.Value : ReadProperty(LastEdited_UserProperty).Value).DbType = DbType.Int64;
                    cmd.Parameters.AddWithValue("@LastEdited_Date", ReadProperty(LastEdited_DateProperty).DBValue).DbType = DbType.DateTime;
                    cmd.Parameters.AddWithValue("@TongTienHoc", ReadProperty(TongTienHocProperty) == null ? (object)DBNull.Value : ReadProperty(TongTienHocProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@TongChiPhiKhac", ReadProperty(TongChiPhiKhacProperty) == null ? (object)DBNull.Value : ReadProperty(TongChiPhiKhacProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@Nhom", ReadProperty(NhomProperty) == null ? (object)DBNull.Value : ReadProperty(NhomProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@Lan5", ReadProperty(Lan5Property) == null ? (object)DBNull.Value : ReadProperty(Lan5Property).Value).DbType = DbType.Double;
                    cmd.Parameters.AddWithValue("@HoaDonHocPhi", ReadProperty(HoaDonHocPhiProperty) == null ? (object)DBNull.Value : ReadProperty(HoaDonHocPhiProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@NgayDong", ReadProperty(NgayDongProperty).DBValue).DbType = DbType.DateTime;
                    cmd.Parameters.AddWithValue("@SoTienHoan", ReadProperty(SoTienHoanProperty) == null ? (object)DBNull.Value : ReadProperty(SoTienHoanProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@LyDoHoanTien", ReadProperty(LyDoHoanTienProperty) == null ? (object)DBNull.Value : ReadProperty(LyDoHoanTienProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@IdBoPhan", ReadProperty(IdBoPhanProperty) == null ? (object)DBNull.Value : ReadProperty(IdBoPhanProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@NgayDongDetail", ReadProperty(NgayDongDetailProperty) == null ? (object)DBNull.Value : ReadProperty(NgayDongDetailProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@backup01", ReadProperty(Backup01Property) == null ? (object)DBNull.Value : ReadProperty(Backup01Property)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@backup02", ReadProperty(Backup02Property) == null ? (object)DBNull.Value : ReadProperty(Backup02Property)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@backup03", ReadProperty(Backup03Property) == null ? (object)DBNull.Value : ReadProperty(Backup03Property)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@backup04", ReadProperty(Backup04Property).DBValue).DbType = DbType.DateTime;
                    cmd.Parameters.AddWithValue("@backup05", ReadProperty(Backup05Property) == null ? (object)DBNull.Value : ReadProperty(Backup05Property).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@SoTienDongDetail", ReadProperty(SoTienDongDetailProperty) == null ? (object)DBNull.Value : ReadProperty(SoTienDongDetailProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@idLopHoc", ReadProperty(IdLopHocProperty) == null ? (object)DBNull.Value : ReadProperty(IdLopHocProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@MaSoThue", ReadProperty(MaSoThueProperty) == null ? (object)DBNull.Value : ReadProperty(MaSoThueProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@ThoiGianHoc", ReadProperty(ThoiGianHocProperty) == null ? (object)DBNull.Value : ReadProperty(ThoiGianHocProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@FileDinhKem", ReadProperty(FileDinhKemProperty) == null ? (object)DBNull.Value : ReadProperty(FileDinhKemProperty)).DbType = DbType.String;
                //    cmd.Parameters.AddWithValue("@SoTienDongMoiDot", ReadProperty(SoTienDongMoiDotProperty) == null ? (object)DBNull.Value : ReadProperty(SoTienDongMoiDotProperty)).DbType = DbType.Int32;
                    var args = new DataPortalHookArgs(cmd);
                    OnUpdatePre(args);
                    cmd.ExecuteNonQuery();
                    OnUpdatePost(args);
                }
                ctx.Commit();
            }
        }

        /// <summary>
        /// Self deletes the <see cref="DT_LienTuc_HocVien"/> object.
        /// </summary>
        protected override void DataPortal_DeleteSelf()
        {
            DataPortal_Delete(Id);
        }

        /// <summary>
        /// Deletes the <see cref="DT_LienTuc_HocVien"/> object from database.
        /// </summary>
        /// <param name="id">The delete criteria.</param>
        protected void DataPortal_Delete(int id)
        {
            using (var ctx = TransactionManager<SqlConnection, SqlTransaction>.GetManager("Connection"))
            {
                using (var cmd = new SqlCommand("dbo.DT_LienTuc_HocVien_delete", ctx.Connection))
                {
                    cmd.Transaction = ctx.Transaction;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@id", id).DbType = DbType.Int32;
                    var args = new DataPortalHookArgs(cmd, id);
                    OnDeletePre(args);
                    cmd.ExecuteNonQuery();
                    OnDeletePost(args);
                }
                ctx.Commit();
            }
        }

        #endregion

        #region Pseudo Events

        /// <summary>
        /// Occurs after setting all defaults for object creation.
        /// </summary>
        partial void OnCreate(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Delete, after setting query parameters and before the delete operation.
        /// </summary>
        partial void OnDeletePre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Delete, after the delete operation, before Commit().
        /// </summary>
        partial void OnDeletePost(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after setting query parameters and before the fetch operation.
        /// </summary>
        partial void OnFetchPre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after the fetch operation (object or collection is fully loaded and set up).
        /// </summary>
        partial void OnFetchPost(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after the low level fetch operation, before the data reader is destroyed.
        /// </summary>
        partial void OnFetchRead(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after setting query parameters and before the update operation.
        /// </summary>
        partial void OnUpdatePre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Insert, after the update operation, before setting back row identifiers (RowVersion) and Commit().
        /// </summary>
        partial void OnUpdatePost(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Insert, after setting query parameters and before the insert operation.
        /// </summary>
        partial void OnInsertPre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Insert, after the insert operation, before setting back row identifiers (ID and RowVersion) and Commit().
        /// </summary>
        partial void OnInsertPost(DataPortalHookArgs args);

        #endregion

    }
}
