//  This file was generated by CSLA Object Generator - CslaGenFork v4.3.0
//
// Filename:    HC_SachTaiLieu_Info
// ObjectType:  HC_SachTaiLieu_Info
// CSLAType:    EditableChild

using System;
using System.Data;
using System.Data.SqlClient;
using Csla;
using Csla.Data;
using NETLINK.LIB;
namespace ModuleHanhChinh.LIB
{

    /// <summary>
    /// HC_SachTaiLieu_Info (editable child object).<br/>
    /// This is a generated base class of <see cref="HC_SachTaiLieu_Info"/> business object.
    /// </summary>
    /// <remarks>
    /// This class is an item of <see cref="HC_SachTaiLieu_Coll"/> collection.
    /// </remarks>
    [Serializable]
    public partial class HC_SachTaiLieu_Info : BusinessBase<HC_SachTaiLieu_Info>
    {

        #region Static Fields

        private static int _lastID;

        #endregion

        #region Business Properties

        /// <summary>
        /// Maintains metadata about <see cref="ID"/> property.
        /// </summary>
        public static readonly PropertyInfo<int> IDProperty = RegisterProperty<int>(p => p.ID, "ID");
        /// <summary>
        /// Gets the ID.
        /// </summary>
        /// <value>The ID.</value>
        public int ID
        {
            get { return GetProperty(IDProperty); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="TenSach"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> TenSachProperty = RegisterProperty<string>(p => p.TenSach, "Ten Sach");
        /// <summary>
        /// Gets or sets the Ten Sach.
        /// </summary>
        /// <value>The Ten Sach.</value>
        public string TenSach
        {
            get { return GetProperty(TenSachProperty); }
            set { SetProperty(TenSachProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="NhapSoLuong"/> property.
        /// </summary>
        public static readonly PropertyInfo<int?> NhapSoLuongProperty = RegisterProperty<int?>(p => p.NhapSoLuong, "Nhap So Luong");
        /// <summary>
        /// Gets or sets the Nhap So Luong.
        /// </summary>
        /// <value>The Nhap So Luong.</value>
        public int? NhapSoLuong
        {
            get { return GetProperty(NhapSoLuongProperty); }
            set { SetProperty(NhapSoLuongProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="TinhTrang"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> TinhTrangProperty = RegisterProperty<string>(p => p.TinhTrang, "Tinh Trang");
        /// <summary>
        /// Gets or sets the Tinh Trang.
        /// </summary>
        /// <value>The Tinh Trang.</value>
        public string TinhTrang
        {
            get { return GetProperty(TinhTrangProperty); }
            set { SetProperty(TinhTrangProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="NhapNgay"/> property.
        /// </summary>
        public static readonly PropertyInfo<SmartDate> NhapNgayProperty = RegisterProperty<SmartDate>(p => p.NhapNgay, "Nhap Ngay");
        /// <summary>
        /// Gets or sets the Nhap Ngay.
        /// </summary>
        /// <value>The Nhap Ngay.</value>
        public string NhapNgay
        {
            get { return GetPropertyConvert<SmartDate, String>(NhapNgayProperty); }
            set { SetPropertyConvert<SmartDate, String>(NhapNgayProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="XuatNgay"/> property.
        /// </summary>
        public static readonly PropertyInfo<SmartDate> XuatNgayProperty = RegisterProperty<SmartDate>(p => p.XuatNgay, "Xuat Ngay");
        /// <summary>
        /// Gets or sets the Xuat Ngay.
        /// </summary>
        /// <value>The Xuat Ngay.</value>
        public string XuatNgay
        {
            get { return GetPropertyConvert<SmartDate, String>(XuatNgayProperty); }
            set { SetPropertyConvert<SmartDate, String>(XuatNgayProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="NhapNguonKinhPhi"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> NhapNguonKinhPhiProperty = RegisterProperty<string>(p => p.NhapNguonKinhPhi, "Nhap Nguon Kinh Phi");
        /// <summary>
        /// Gets or sets the Nhap Nguon Kinh Phi.
        /// </summary>
        /// <value>The Nhap Nguon Kinh Phi.</value>
        public string NhapNguonKinhPhi
        {
            get { return GetProperty(NhapNguonKinhPhiProperty); }
            set { SetProperty(NhapNguonKinhPhiProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="NhapNoiCungCap"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> NhapNoiCungCapProperty = RegisterProperty<string>(p => p.NhapNoiCungCap, "Nhap Noi Cung Cap");
        /// <summary>
        /// Gets or sets the Nhap Noi Cung Cap.
        /// </summary>
        /// <value>The Nhap Noi Cung Cap.</value>
        public string NhapNoiCungCap
        {
            get { return GetProperty(NhapNoiCungCapProperty); }
            set { SetProperty(NhapNoiCungCapProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="NhapDonGia"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> NhapDonGiaProperty = RegisterProperty<string>(p => p.NhapDonGia, "Nhap Don Gia");
        /// <summary>
        /// Gets or sets the Nhap Don Gia.
        /// </summary>
        /// <value>The Nhap Don Gia.</value>
        public string NhapDonGia
        {
            get { return GetProperty(NhapDonGiaProperty); }
            set { SetProperty(NhapDonGiaProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="XuatSoLuong"/> property.
        /// </summary>
        public static readonly PropertyInfo<int?> XuatSoLuongProperty = RegisterProperty<int?>(p => p.XuatSoLuong, "Xuat So Luong");
        /// <summary>
        /// Gets or sets the Xuat So Luong.
        /// </summary>
        /// <value>The Xuat So Luong.</value>
        public int? XuatSoLuong
        {
            get { return GetProperty(XuatSoLuongProperty); }
            set { SetProperty(XuatSoLuongProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="XuatLyDo"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> XuatLyDoProperty = RegisterProperty<string>(p => p.XuatLyDo, "Xuat Ly Do");
        /// <summary>
        /// Gets or sets the Xuat Ly Do.
        /// </summary>
        /// <value>The Xuat Ly Do.</value>
        public string XuatLyDo
        {
            get { return GetProperty(XuatLyDoProperty); }
            set { SetProperty(XuatLyDoProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="XuatDoiTuong"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> XuatDoiTuongProperty = RegisterProperty<string>(p => p.XuatDoiTuong, "Xuat Doi Tuong");
        /// <summary>
        /// Gets or sets the Xuat Doi Tuong.
        /// </summary>
        /// <value>The Xuat Doi Tuong.</value>
        public string XuatDoiTuong
        {
            get { return GetProperty(XuatDoiTuongProperty); }
            set { SetProperty(XuatDoiTuongProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="XuatDonGia"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> XuatDonGiaProperty = RegisterProperty<string>(p => p.XuatDonGia, "Xuat Don Gia");
        /// <summary>
        /// Gets or sets the Xuat Don Gia.
        /// </summary>
        /// <value>The Xuat Don Gia.</value>
        public string XuatDonGia
        {
            get { return GetProperty(XuatDonGiaProperty); }
            set { SetProperty(XuatDonGiaProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="MaSach"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> MaSachProperty = RegisterProperty<string>(p => p.MaSach, "Ma Sach");
        /// <summary>
        /// Gets or sets the Ma Sach.
        /// </summary>
        /// <value>The Ma Sach.</value>
        public string MaSach
        {
            get { return GetProperty(MaSachProperty); }
            set { SetProperty(MaSachProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="TacGia"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> TacGiaProperty = RegisterProperty<string>(p => p.TacGia, "Tac Gia");
        /// <summary>
        /// Gets or sets the Tac Gia.
        /// </summary>
        /// <value>The Tac Gia.</value>
        public string TacGia
        {
            get { return GetProperty(TacGiaProperty); }
            set { SetProperty(TacGiaProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="ChuBien"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> ChuBienProperty = RegisterProperty<string>(p => p.ChuBien, "Chu Bien");
        /// <summary>
        /// Gets or sets the Chu Bien.
        /// </summary>
        /// <value>The Chu Bien.</value>
        public string ChuBien
        {
            get { return GetProperty(ChuBienProperty); }
            set { SetProperty(ChuBienProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="NhaXuatBan"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> NhaXuatBanProperty = RegisterProperty<string>(p => p.NhaXuatBan, "Nha Xuat Ban");
        /// <summary>
        /// Gets or sets the Nha Xuat Ban.
        /// </summary>
        /// <value>The Nha Xuat Ban.</value>
        public string NhaXuatBan
        {
            get { return GetProperty(NhaXuatBanProperty); }
            set { SetProperty(NhaXuatBanProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="Nam"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> NamProperty = RegisterProperty<string>(p => p.Nam, "Nam");
        /// <summary>
        /// Gets or sets the Nam.
        /// </summary>
        /// <value>The Nam.</value>
        public string Nam
        {
            get { return GetProperty(NamProperty); }
            set { SetProperty(NamProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="GhiChu"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> GhiChuProperty = RegisterProperty<string>(p => p.GhiChu, "Ghi Chu");
        /// <summary>
        /// Gets or sets the Ghi Chu.
        /// </summary>
        /// <value>The Ghi Chu.</value>
        public string GhiChu
        {
            get { return GetProperty(GhiChuProperty); }
            set { SetProperty(GhiChuProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="idChuyenNganh"/> property.
        /// </summary>
        public static readonly PropertyInfo<Int64?> IdChuyenNganhProperty = RegisterProperty<Int64?>(p => p.IdChuyenNganh, "id Chuyen Nganh");
        /// <summary>
        /// Gets or sets the id Chuyen Nganh.
        /// </summary>
        /// <value>The id Chuyen Nganh.</value>
        public Int64? IdChuyenNganh
        {
            get { return GetProperty(IdChuyenNganhProperty); }
            set { SetProperty(IdChuyenNganhProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="idNguonKinhPhi"/> property.
        /// </summary>
        public static readonly PropertyInfo<int?> IdNguonKinhPhiProperty = RegisterProperty<int?>(p => p.IdNguonKinhPhi, "id Nguon Kinh Phi");
        /// <summary>
        /// Gets or sets the id Nguon Kinh Phi.
        /// </summary>
        /// <value>The id Nguon Kinh Phi.</value>
        public int? IdNguonKinhPhi
        {
            get { return GetProperty(IdNguonKinhPhiProperty); }
            set { SetProperty(IdNguonKinhPhiProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="LastEdited_UserID"/> property.
        /// </summary>
        public static readonly PropertyInfo<Int64?> LastEdited_UserIDProperty = RegisterProperty<Int64?>(p => p.LastEdited_UserID, "Last Edited User ID");
        /// <summary>
        /// Gets or sets the Last Edited User ID.
        /// </summary>
        /// <value>The Last Edited User ID.</value>
        public Int64? LastEdited_UserID
        {
            get { return GetProperty(LastEdited_UserIDProperty); }
            set { SetProperty(LastEdited_UserIDProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="LastEdited_Date"/> property.
        /// </summary>
        public static readonly PropertyInfo<SmartDate> LastEdited_DateProperty = RegisterProperty<SmartDate>(p => p.LastEdited_Date, "Last Edited Date");
        /// <summary>
        /// Gets or sets the Last Edited Date.
        /// </summary>
        /// <value>The Last Edited Date.</value>
        public string LastEdited_Date
        {
            get { return GetPropertyConvert<SmartDate, String>(LastEdited_DateProperty); }
            set { SetPropertyConvert<SmartDate, String>(LastEdited_DateProperty, value); }
        }

        #endregion

        #region Factory Methods

        /// <summary>
        /// Factory method. Creates a new <see cref="HC_SachTaiLieu_Info"/> object.
        /// </summary>
        /// <returns>A reference to the created <see cref="HC_SachTaiLieu_Info"/> object.</returns>
        internal static HC_SachTaiLieu_Info NewHC_SachTaiLieu_Info()
        {
            return DataPortal.CreateChild<HC_SachTaiLieu_Info>();
        }

        /// <summary>
        /// Factory method. Asynchronously creates a new <see cref="HC_SachTaiLieu_Info"/> object.
        /// </summary>
        /// <param name="callback">The completion callback method.</param>
        internal static void NewHC_SachTaiLieu_Info(EventHandler<DataPortalResult<HC_SachTaiLieu_Info>> callback)
        {
            DataPortal.BeginCreate<HC_SachTaiLieu_Info>(callback);
        }

        /// <summary>
        /// Factory method. Loads a <see cref="HC_SachTaiLieu_Info"/> object from the given SafeDataReader.
        /// </summary>
        /// <param name="dr">The SafeDataReader to use.</param>
        /// <returns>A reference to the fetched <see cref="HC_SachTaiLieu_Info"/> object.</returns>
        internal static HC_SachTaiLieu_Info GetHC_SachTaiLieu_Info(SafeDataReader dr)
        {
            HC_SachTaiLieu_Info obj = new HC_SachTaiLieu_Info();
            // show the framework that this is a child object
            obj.MarkAsChild();
            obj.Fetch(dr);
            obj.MarkOld();
            // check all object rules and property rules
            obj.BusinessRules.CheckRules();
            return obj;
        }

        #endregion

        #region Constructor

        /// <summary>
        /// Initializes a new instance of the <see cref="HC_SachTaiLieu_Info"/> class.
        /// </summary>
        /// <remarks> Do not use to create a Csla object. Use factory methods instead.</remarks>
        private HC_SachTaiLieu_Info()
        {
            // Prevent direct creation

            // show the framework that this is a child object
            MarkAsChild();
        }

        #endregion

        #region Data Access

        /// <summary>
        /// Loads default values for the <see cref="HC_SachTaiLieu_Info"/> object properties.
        /// </summary>
        [Csla.RunLocal]
        protected override void Child_Create()
        {
            LoadProperty(IDProperty, System.Threading.Interlocked.Decrement(ref _lastID));
            LoadProperty(TenSachProperty, null);
            LoadProperty(TinhTrangProperty, null);
            LoadProperty(NhapNgayProperty, null);
            LoadProperty(XuatNgayProperty, null);
            LoadProperty(NhapNguonKinhPhiProperty, null);
            LoadProperty(NhapNoiCungCapProperty, null);
            LoadProperty(NhapDonGiaProperty, null);
            LoadProperty(XuatLyDoProperty, null);
            LoadProperty(XuatDoiTuongProperty, null);
            LoadProperty(XuatDonGiaProperty, null);
            LoadProperty(MaSachProperty, null);
            LoadProperty(TacGiaProperty, null);
            LoadProperty(ChuBienProperty, null);
            LoadProperty(NhaXuatBanProperty, null);
            LoadProperty(NamProperty, null);
            LoadProperty(GhiChuProperty, null);
            LoadProperty(LastEdited_DateProperty, null);
            var args = new DataPortalHookArgs();
            OnCreate(args);
            base.Child_Create();
        }

        /// <summary>
        /// Loads a <see cref="HC_SachTaiLieu_Info"/> object from the given SafeDataReader.
        /// </summary>
        /// <param name="dr">The SafeDataReader to use.</param>
        private void Fetch(SafeDataReader dr)
        {
            // Value properties
            LoadProperty(IDProperty, dr.GetInt32("ID"));
            LoadProperty(TenSachProperty, dr.GetString("TenSach"));
            LoadProperty(NhapSoLuongProperty, dr.GetInt32("NhapSoLuong"));
            LoadProperty(TinhTrangProperty, dr.GetString("TinhTrang"));
            LoadProperty(NhapNgayProperty, dr.GetDateTime("NhapNgay"));
            LoadProperty(XuatNgayProperty, dr.GetDateTime("XuatNgay"));
            LoadProperty(NhapNguonKinhPhiProperty, dr.GetString("NhapNguonKinhPhi"));
            LoadProperty(NhapNoiCungCapProperty, dr.GetString("NhapNoiCungCap"));
            LoadProperty(NhapDonGiaProperty, dr.GetString("NhapDonGia"));
            LoadProperty(XuatSoLuongProperty, dr.GetInt32("XuatSoLuong"));
            LoadProperty(XuatLyDoProperty, dr.GetString("XuatLyDo"));
            LoadProperty(XuatDoiTuongProperty, dr.GetString("XuatDoiTuong"));
            LoadProperty(XuatDonGiaProperty, dr.GetString("XuatDonGia"));
            LoadProperty(MaSachProperty, dr.GetString("MaSach"));
            LoadProperty(TacGiaProperty, dr.GetString("TacGia"));
            LoadProperty(ChuBienProperty, dr.GetString("ChuBien"));
            LoadProperty(NhaXuatBanProperty, dr.GetString("NhaXuatBan"));
            LoadProperty(NamProperty, dr.GetString("Nam"));
            LoadProperty(GhiChuProperty, dr.GetString("GhiChu"));
            LoadProperty(IdChuyenNganhProperty, dr.GetInt32("IdChuyenNganh"));
            LoadProperty(IdNguonKinhPhiProperty, dr.GetInt32("IdNguonKinhPhi"));
    LoadProperty(LastEdited_UserIDProperty, dr.GetInt64("LastEdited_UserID"));
            LoadProperty(LastEdited_DateProperty, dr.GetDateTime("LastEdited_Date"));
            var args = new DataPortalHookArgs(dr);
            OnFetchRead(args);
        }

        /// <summary>
        /// Inserts a new <see cref="HC_SachTaiLieu_Info"/> object in the database.
        /// </summary>
        private void Child_Insert()
        {
            using (var ctx = TransactionManager<SqlConnection, SqlTransaction>.GetManager("Connection"))
            {
                using (var cmd = new SqlCommand("dbo.HC_SachTaiLieu_Info_add", ctx.Connection))
                {
                    cmd.Transaction = ctx.Transaction;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@ID", ReadProperty(IDProperty)).Direction = ParameterDirection.Output;
                    cmd.Parameters.AddWithValue("@TenSach", ReadProperty(TenSachProperty) == null ? (object)DBNull.Value : ReadProperty(TenSachProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@NhapSoLuong", ReadProperty(NhapSoLuongProperty) == null ? (object)DBNull.Value : ReadProperty(NhapSoLuongProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@TinhTrang", ReadProperty(TinhTrangProperty) == null ? (object)DBNull.Value : ReadProperty(TinhTrangProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@NhapNgay", ReadProperty(NhapNgayProperty).DBValue).DbType = DbType.DateTime;
                    cmd.Parameters.AddWithValue("@XuatNgay", ReadProperty(XuatNgayProperty).DBValue).DbType = DbType.DateTime;
                    cmd.Parameters.AddWithValue("@NhapNguonKinhPhi", ReadProperty(NhapNguonKinhPhiProperty) == null ? (object)DBNull.Value : ReadProperty(NhapNguonKinhPhiProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@NhapNoiCungCap", ReadProperty(NhapNoiCungCapProperty) == null ? (object)DBNull.Value : ReadProperty(NhapNoiCungCapProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@NhapDonGia", ReadProperty(NhapDonGiaProperty) == null ? (object)DBNull.Value : ReadProperty(NhapDonGiaProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@XuatSoLuong", ReadProperty(XuatSoLuongProperty) == null ? (object)DBNull.Value : ReadProperty(XuatSoLuongProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@XuatLyDo", ReadProperty(XuatLyDoProperty) == null ? (object)DBNull.Value : ReadProperty(XuatLyDoProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@XuatDoiTuong", ReadProperty(XuatDoiTuongProperty) == null ? (object)DBNull.Value : ReadProperty(XuatDoiTuongProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@XuatDonGia", ReadProperty(XuatDonGiaProperty) == null ? (object)DBNull.Value : ReadProperty(XuatDonGiaProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@MaSach", ReadProperty(MaSachProperty) == null ? (object)DBNull.Value : ReadProperty(MaSachProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@TacGia", ReadProperty(TacGiaProperty) == null ? (object)DBNull.Value : ReadProperty(TacGiaProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@ChuBien", ReadProperty(ChuBienProperty) == null ? (object)DBNull.Value : ReadProperty(ChuBienProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@NhaXuatBan", ReadProperty(NhaXuatBanProperty) == null ? (object)DBNull.Value : ReadProperty(NhaXuatBanProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@Nam", ReadProperty(NamProperty) == null ? (object)DBNull.Value : ReadProperty(NamProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@GhiChu", ReadProperty(GhiChuProperty) == null ? (object)DBNull.Value : ReadProperty(GhiChuProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@idChuyenNganh", ReadProperty(IdChuyenNganhProperty) == null ? (object)DBNull.Value : ReadProperty(IdChuyenNganhProperty).Value).DbType = DbType.Int64;
                    cmd.Parameters.AddWithValue("@idNguonKinhPhi", ReadProperty(IdNguonKinhPhiProperty) == null ? (object)DBNull.Value : ReadProperty(IdNguonKinhPhiProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@LastEdited_UserID", ReadProperty(LastEdited_UserIDProperty) == null ? (object)DBNull.Value : ReadProperty(LastEdited_UserIDProperty).Value).DbType = DbType.Int64;
                    cmd.Parameters.AddWithValue("@LastEdited_Date", ReadProperty(LastEdited_DateProperty).DBValue).DbType = DbType.DateTime;
                    var args = new DataPortalHookArgs(cmd);
                    OnInsertPre(args);
                    cmd.ExecuteNonQuery();
                    OnInsertPost(args);
                    LoadProperty(IDProperty, (int) cmd.Parameters["@ID"].Value);
                }
            }
        }

        /// <summary>
        /// Updates in the database all changes made to the <see cref="HC_SachTaiLieu_Info"/> object.
        /// </summary>
        private void Child_Update()
        {
            if (!IsDirty)
                return;

            using (var ctx = TransactionManager<SqlConnection, SqlTransaction>.GetManager("Connection"))
            {
                using (var cmd = new SqlCommand("dbo.HC_SachTaiLieu_Info_update", ctx.Connection))
                {
                    cmd.Transaction = ctx.Transaction;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@ID", ReadProperty(IDProperty)).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@TenSach", ReadProperty(TenSachProperty) == null ? (object)DBNull.Value : ReadProperty(TenSachProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@NhapSoLuong", ReadProperty(NhapSoLuongProperty) == null ? (object)DBNull.Value : ReadProperty(NhapSoLuongProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@TinhTrang", ReadProperty(TinhTrangProperty) == null ? (object)DBNull.Value : ReadProperty(TinhTrangProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@NhapNgay", ReadProperty(NhapNgayProperty).DBValue).DbType = DbType.DateTime;
                    cmd.Parameters.AddWithValue("@XuatNgay", ReadProperty(XuatNgayProperty).DBValue).DbType = DbType.DateTime;
                    cmd.Parameters.AddWithValue("@NhapNguonKinhPhi", ReadProperty(NhapNguonKinhPhiProperty) == null ? (object)DBNull.Value : ReadProperty(NhapNguonKinhPhiProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@NhapNoiCungCap", ReadProperty(NhapNoiCungCapProperty) == null ? (object)DBNull.Value : ReadProperty(NhapNoiCungCapProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@NhapDonGia", ReadProperty(NhapDonGiaProperty) == null ? (object)DBNull.Value : ReadProperty(NhapDonGiaProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@XuatSoLuong", ReadProperty(XuatSoLuongProperty) == null ? (object)DBNull.Value : ReadProperty(XuatSoLuongProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@XuatLyDo", ReadProperty(XuatLyDoProperty) == null ? (object)DBNull.Value : ReadProperty(XuatLyDoProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@XuatDoiTuong", ReadProperty(XuatDoiTuongProperty) == null ? (object)DBNull.Value : ReadProperty(XuatDoiTuongProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@XuatDonGia", ReadProperty(XuatDonGiaProperty) == null ? (object)DBNull.Value : ReadProperty(XuatDonGiaProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@MaSach", ReadProperty(MaSachProperty) == null ? (object)DBNull.Value : ReadProperty(MaSachProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@TacGia", ReadProperty(TacGiaProperty) == null ? (object)DBNull.Value : ReadProperty(TacGiaProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@ChuBien", ReadProperty(ChuBienProperty) == null ? (object)DBNull.Value : ReadProperty(ChuBienProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@NhaXuatBan", ReadProperty(NhaXuatBanProperty) == null ? (object)DBNull.Value : ReadProperty(NhaXuatBanProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@Nam", ReadProperty(NamProperty) == null ? (object)DBNull.Value : ReadProperty(NamProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@GhiChu", ReadProperty(GhiChuProperty) == null ? (object)DBNull.Value : ReadProperty(GhiChuProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@idChuyenNganh", ReadProperty(IdChuyenNganhProperty) == null ? (object)DBNull.Value : ReadProperty(IdChuyenNganhProperty).Value).DbType = DbType.Int64;
                    cmd.Parameters.AddWithValue("@idNguonKinhPhi", ReadProperty(IdNguonKinhPhiProperty) == null ? (object)DBNull.Value : ReadProperty(IdNguonKinhPhiProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@LastEdited_UserID", ReadProperty(LastEdited_UserIDProperty) == null ? (object)DBNull.Value : ReadProperty(LastEdited_UserIDProperty).Value).DbType = DbType.Int64;
                    cmd.Parameters.AddWithValue("@LastEdited_Date", ReadProperty(LastEdited_DateProperty).DBValue).DbType = DbType.DateTime;
                    var args = new DataPortalHookArgs(cmd);
                    OnUpdatePre(args);
                    cmd.ExecuteNonQuery();
                    OnUpdatePost(args);
                }
            }
        }

        /// <summary>
        /// Self deletes the <see cref="HC_SachTaiLieu_Info"/> object from database.
        /// </summary>
        private void Child_DeleteSelf()
        {
            using (var ctx = TransactionManager<SqlConnection, SqlTransaction>.GetManager("Connection"))
            {
                using (var cmd = new SqlCommand("dbo.HC_SachTaiLieu_Info_delete", ctx.Connection))
                {
                    cmd.Transaction = ctx.Transaction;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@ID", ReadProperty(IDProperty)).DbType = DbType.Int32;
                    var args = new DataPortalHookArgs(cmd);
                    OnDeletePre(args);
                    cmd.ExecuteNonQuery();
                    OnDeletePost(args);
                }
            }
        }

        #endregion

        #region Pseudo Events

        /// <summary>
        /// Occurs after setting all defaults for object creation.
        /// </summary>
        partial void OnCreate(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Delete, after setting query parameters and before the delete operation.
        /// </summary>
        partial void OnDeletePre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Delete, after the delete operation, before Commit().
        /// </summary>
        partial void OnDeletePost(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after setting query parameters and before the fetch operation.
        /// </summary>
        partial void OnFetchPre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after the fetch operation (object or collection is fully loaded and set up).
        /// </summary>
        partial void OnFetchPost(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after the low level fetch operation, before the data reader is destroyed.
        /// </summary>
        partial void OnFetchRead(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after setting query parameters and before the update operation.
        /// </summary>
        partial void OnUpdatePre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Insert, after the update operation, before setting back row identifiers (RowVersion) and Commit().
        /// </summary>
        partial void OnUpdatePost(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Insert, after setting query parameters and before the insert operation.
        /// </summary>
        partial void OnInsertPre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Insert, after the insert operation, before setting back row identifiers (ID and RowVersion) and Commit().
        /// </summary>
        partial void OnInsertPost(DataPortalHookArgs args);

        #endregion

    }
}
