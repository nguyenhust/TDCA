//  This file was generated by CSLA Object Generator - CslaGenFork v4.3.0
//
// Filename:    DT_ChinhQuy_DiemThi_Info
// ObjectType:  DT_ChinhQuy_DiemThi_Info
// CSLAType:    EditableChild

using System;
using System.Data;
using System.Data.SqlClient;
using Csla;
using Csla.Data;

using NETLINK.LIB;

namespace ModuleDaoTao.LIB
{

    /// <summary>
    /// DT_ChinhQuy_DiemThi_Info (editable child object).<br/>
    /// This is a generated base class of <see cref="DT_ChinhQuy_DiemThi_Info"/> business object.
    /// </summary>
    /// <remarks>
    /// This class is an item of <see cref="DT_ChinhQuy_DiemThi_Coll"/> collection.
    /// </remarks>
    [Serializable]
    public partial class DT_ChinhQuy_DiemThi_Info : BusinessBase<DT_ChinhQuy_DiemThi_Info>
    {

        #region Static Fields

        private static int _lastID;

        #endregion

        #region Business Properties

        /// <summary>
        /// Maintains metadata about <see cref="id"/> property.
        /// </summary>
        public static readonly PropertyInfo<int> IdProperty = RegisterProperty<int>(p => p.Id, "id");
        /// <summary>
        /// Gets the id.
        /// </summary>
        /// <value>The id.</value>
        public int Id
        {
            get { return GetProperty(IdProperty); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="idHocVien"/> property.
        /// </summary>
        public static readonly PropertyInfo<int?> IdHocVienProperty = RegisterProperty<int?>(p => p.IdHocVien, "id Hoc Vien");
        /// <summary>
        /// Gets or sets the id Hoc Vien.
        /// </summary>
        /// <value>The id Hoc Vien.</value>
        public int? IdHocVien
        {
            get { return GetProperty(IdHocVienProperty); }
            set { SetProperty(IdHocVienProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="idMonHoc"/> property.
        /// </summary>
        public static readonly PropertyInfo<int?> IdMonHocProperty = RegisterProperty<int?>(p => p.IdMonHoc, "id Mon Hoc");
        /// <summary>
        /// Gets or sets the id Mon Hoc.
        /// </summary>
        /// <value>The id Mon Hoc.</value>
        public int? IdMonHoc
        {
            get { return GetProperty(IdMonHocProperty); }
            set { SetProperty(IdMonHocProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="LT1"/> property.
        /// </summary>
        public static readonly PropertyInfo<Double?> LT1Property = RegisterProperty<Double?>(p => p.LT1, "LT1");
        /// <summary>
        /// Gets or sets the LT1.
        /// </summary>
        /// <value>The LT1.</value>
        public Double? LT1
        {
            get { return GetProperty(LT1Property); }
            set { SetProperty(LT1Property, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="LT2"/> property.
        /// </summary>
        public static readonly PropertyInfo<Double?> LT2Property = RegisterProperty<Double?>(p => p.LT2, "LT2");
        /// <summary>
        /// Gets or sets the LT2.
        /// </summary>
        /// <value>The LT2.</value>
        public Double? LT2
        {
            get { return GetProperty(LT2Property); }
            set { SetProperty(LT2Property, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="LT3"/> property.
        /// </summary>
        public static readonly PropertyInfo<Double?> LT3Property = RegisterProperty<Double?>(p => p.LT3, "LT3");
        /// <summary>
        /// Gets or sets the LT3.
        /// </summary>
        /// <value>The LT3.</value>
        public Double? LT3
        {
            get { return GetProperty(LT3Property); }
            set { SetProperty(LT3Property, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="TH2"/> property.
        /// </summary>
        public static readonly PropertyInfo<Double?> TH2Property = RegisterProperty<Double?>(p => p.TH2, "TH2");
        /// <summary>
        /// Gets or sets the TH2.
        /// </summary>
        /// <value>The TH2.</value>
        public Double? TH2
        {
            get { return GetProperty(TH2Property); }
            set { SetProperty(TH2Property, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="TH1"/> property.
        /// </summary>
        public static readonly PropertyInfo<Double?> TH1Property = RegisterProperty<Double?>(p => p.TH1, "TH1");
        /// <summary>
        /// Gets or sets the TH1.
        /// </summary>
        /// <value>The TH1.</value>
        public Double? TH1
        {
            get { return GetProperty(TH1Property); }
            set { SetProperty(TH1Property, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="LastEdited_User"/> property.
        /// </summary>
        public static readonly PropertyInfo<Int64?> LastEdited_UserProperty = RegisterProperty<Int64?>(p => p.LastEdited_User, "Last Edited User");
        /// <summary>
        /// Gets or sets the Last Edited User.
        /// </summary>
        /// <value>The Last Edited User.</value>
        public Int64? LastEdited_User
        {
            get { return GetProperty(LastEdited_UserProperty); }
            set { SetProperty(LastEdited_UserProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="LastEdited_Date"/> property.
        /// </summary>
        public static readonly PropertyInfo<SmartDate> LastEdited_DateProperty = RegisterProperty<SmartDate>(p => p.LastEdited_Date, "Last Edited Date");
        /// <summary>
        /// Gets or sets the Last Edited Date.
        /// </summary>
        /// <value>The Last Edited Date.</value>
        public string LastEdited_Date
        {
            get { return GetPropertyConvert<SmartDate, String>(LastEdited_DateProperty); }
            set { SetPropertyConvert<SmartDate, String>(LastEdited_DateProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="backup01"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> Backup01Property = RegisterProperty<string>(p => p.Backup01, "backup01");
        /// <summary>
        /// Gets or sets the backup01.
        /// </summary>
        /// <value>The backup01.</value>
        public string Backup01
        {
            get { return GetProperty(Backup01Property); }
            set { SetProperty(Backup01Property, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="backup02"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> Backup02Property = RegisterProperty<string>(p => p.Backup02, "backup02");
        /// <summary>
        /// Gets or sets the backup02.
        /// </summary>
        /// <value>The backup02.</value>
        public string Backup02
        {
            get { return GetProperty(Backup02Property); }
            set { SetProperty(Backup02Property, value); }
        }
        /// <summary>
        /// Maintains metadata about <see cref="backup02"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> TenMonHocProperty = RegisterProperty<string>(p => p.TenMonHoc, "TenMonHoc");
        /// <summary>
        /// Gets or sets the backup02.
        /// </summary>
        /// <value>The backup02.</value>
        public string TenMonHoc
        {
            get { return GetProperty(TenMonHocProperty); }
            set { SetProperty(TenMonHocProperty, value); }
        }
        /// <summary>
        /// Maintains metadata about <see cref="backup02"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> TenHocVienProperty = RegisterProperty<string>(p => p.TenHocVien, "TenHocVien");
        /// <summary>
        /// Gets or sets the backup02.
        /// </summary>
        /// <value>The backup02.</value>
        public string TenHocVien
        {
            get { return GetProperty(TenHocVienProperty); }
            set { SetProperty(TenHocVienProperty, value); }
        }
		   public static readonly PropertyInfo<Double?> TH3Property = RegisterProperty<Double?>(p => p.TH3, "TH3");
        /// <summary>
        /// Gets or sets the TH3.
        /// </summary>
        /// <value>The TH3.</value>
        public Double? TH3
        {
            get { return GetProperty(TH3Property); }
            set { SetProperty(TH3Property, value); }
        }
        /// <summary>
        /// Maintains metadata about <see cref="backup02"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> TenLopHocProperty = RegisterProperty<string>(p => p.TenLopHoc, "TenLopHoc");
        /// <summary>
        /// Gets or sets the backup02.
        /// </summary>
        /// <value>The backup02.</value>
        public string TenLopHoc
        {
            get { return GetProperty(TenLopHocProperty); }
            set { SetProperty(TenLopHocProperty, value); }
        }
        /// <summary>
        /// Maintains metadata about <see cref="backup02"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> TenKhoaHocProperty = RegisterProperty<string>(p => p.TenKhoaHoc, "TenKhoaHoc");
        /// <summary>
        /// Gets or sets the backup02.
        /// </summary>
        /// <value>The backup02.</value>
        public string TenKhoaHoc
        {
            get { return GetProperty(TenKhoaHocProperty); }
            set { SetProperty(TenKhoaHocProperty, value); }
        }
        /// <summary>
        /// Maintains metadata about <see cref="idHocVien"/> property.
        /// </summary>
        public static readonly PropertyInfo<int?> IdLopHocProperty = RegisterProperty<int?>(p => p.IdLopHoc, "id Hoc IdLopHoc");
        /// <summary>
        /// Gets or sets the id Hoc Vien.
        /// </summary>
        /// <value>The id Hoc Vien.</value>
        public int? IdLopHoc
        {
            get { return GetProperty(IdLopHocProperty); }
            set { SetProperty(IdLopHocProperty, value); }
        }
        /// <summary>
        /// Maintains metadata about <see cref="SoCMT"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> SoCMTProperty = RegisterProperty<string>(p => p.SoCMT, "So CMT");
        /// <summary>
        /// Gets or sets the So CMT.
        /// </summary>
        /// <value>The So CMT.</value>
        public string SoCMT
        {
            get { return GetProperty(SoCMTProperty); }
            set { SetProperty(SoCMTProperty, value); }
        }
        /// <summary>
        /// Maintains metadata about <see cref="NgaySinh"/> property.
        /// </summary>
        public static readonly PropertyInfo<SmartDate> NgaySinhProperty = RegisterProperty<SmartDate>(p => p.NgaySinh, "Ngay Sinh");
        /// <summary>
        /// Gets or sets the Ngay Sinh.
        /// </summary>
        /// <value>The Ngay Sinh.</value>
        public string NgaySinh
        {
            get { return GetPropertyConvert<SmartDate, String>(NgaySinhProperty); }
            set { SetPropertyConvert<SmartDate, String>(NgaySinhProperty, value); }
        }
        public DateTime DateNgaySinh
        {
            get { return GetProperty(NgaySinhProperty); }
        }
        public double DiemTrungBinh
        {
            get
            {
                double tongdiem =0;
                double diem = 0;
                if (LT1 != null && LT1 > 0)
                    diem = Convert.ToDouble(LT1);
                if (LT2 != null && LT2 > 0)
                    diem = Convert.ToDouble(LT2);
                if (LT3 != null && LT3 > 0)
                    diem = Convert.ToDouble(LT3);
                tongdiem += diem;
                diem = 0;
                if (TH1 != null && TH1 > 0)
                    diem = Convert.ToDouble(TH1);
                if (TH2 != null && TH2 > 0)
                    diem = Convert.ToDouble(TH2);
                if (TH3 != null && TH3 > 0)
                    diem = Convert.ToDouble(TH3);
                tongdiem += diem;
                return tongdiem / 2;
            }
        }
        #endregion

        #region Factory Methods

        /// <summary>
        /// Factory method. Creates a new <see cref="DT_ChinhQuy_DiemThi_Info"/> object.
        /// </summary>
        /// <returns>A reference to the created <see cref="DT_ChinhQuy_DiemThi_Info"/> object.</returns>
        internal static DT_ChinhQuy_DiemThi_Info NewDT_ChinhQuy_DiemThi_Info()
        {
            return DataPortal.CreateChild<DT_ChinhQuy_DiemThi_Info>();
        }

        /// <summary>
        /// Factory method. Asynchronously creates a new <see cref="DT_ChinhQuy_DiemThi_Info"/> object.
        /// </summary>
        /// <param name="callback">The completion callback method.</param>
        internal static void NewDT_ChinhQuy_DiemThi_Info(EventHandler<DataPortalResult<DT_ChinhQuy_DiemThi_Info>> callback)
        {
            DataPortal.BeginCreate<DT_ChinhQuy_DiemThi_Info>(callback);
        }

        /// <summary>
        /// Factory method. Loads a <see cref="DT_ChinhQuy_DiemThi_Info"/> object from the given SafeDataReader.
        /// </summary>
        /// <param name="dr">The SafeDataReader to use.</param>
        /// <returns>A reference to the fetched <see cref="DT_ChinhQuy_DiemThi_Info"/> object.</returns>
        internal static DT_ChinhQuy_DiemThi_Info GetDT_ChinhQuy_DiemThi_Info(SafeDataReader dr)
        {
            DT_ChinhQuy_DiemThi_Info obj = new DT_ChinhQuy_DiemThi_Info();
            // show the framework that this is a child object
            obj.MarkAsChild();
            obj.Fetch(dr);
            obj.MarkOld();
            // check all object rules and property rules
            obj.BusinessRules.CheckRules();
            return obj;
        }

        #endregion

        #region Constructor

        /// <summary>
        /// Initializes a new instance of the <see cref="DT_ChinhQuy_DiemThi_Info"/> class.
        /// </summary>
        /// <remarks> Do not use to create a Csla object. Use factory methods instead.</remarks>
        private DT_ChinhQuy_DiemThi_Info()
        {
            // Prevent direct creation

            // show the framework that this is a child object
            MarkAsChild();
        }

        #endregion

        #region Data Access

        /// <summary>
        /// Loads default values for the <see cref="DT_ChinhQuy_DiemThi_Info"/> object properties.
        /// </summary>
        [Csla.RunLocal]
        protected override void Child_Create()
        {
            LoadProperty(IdProperty, System.Threading.Interlocked.Decrement(ref _lastID));
            LoadProperty(LastEdited_DateProperty, null);
            LoadProperty(Backup01Property, null);
            LoadProperty(Backup02Property, null);
            LoadProperty(TenMonHocProperty, null);
            LoadProperty(TenLopHocProperty, null);
            LoadProperty(TenHocVienProperty, null);
            LoadProperty(TenKhoaHocProperty, null);

            LoadProperty(NgaySinhProperty, null);
            LoadProperty(SoCMTProperty, null);
            var args = new DataPortalHookArgs();
            OnCreate(args);
            base.Child_Create();
        }

        /// <summary>
        /// Loads a <see cref="DT_ChinhQuy_DiemThi_Info"/> object from the given SafeDataReader.
        /// </summary>
        /// <param name="dr">The SafeDataReader to use.</param>
        private void Fetch(SafeDataReader dr)
        {
            // Value properties
            LoadProperty(IdProperty, dr.GetInt32("Id"));
            LoadProperty(IdHocVienProperty, dr.GetInt32("IdHocVien"));
            LoadProperty(IdMonHocProperty, dr.GetInt32("IdMonHoc"));
              LoadProperty(LT1Property, dr.GetDouble("LT1"));
            LoadProperty(LT2Property, dr.GetDouble("LT2"));
            LoadProperty(LT3Property, dr.GetDouble("LT3"));
            LoadProperty(TH1Property, dr.GetDouble("TH1"));
            LoadProperty(TH2Property, dr.GetDouble("TH2"));
			 LoadProperty(TH3Property, dr.GetDouble("TH3"));
            LoadProperty(LastEdited_UserProperty, dr.GetInt64("LastEdited_User"));
            LoadProperty(LastEdited_DateProperty, dr.GetSmartDate("LastEdited_Date"));
            LoadProperty(Backup01Property, dr.GetString("Backup01"));
            LoadProperty(Backup02Property, dr.GetString("Backup02"));
            LoadProperty(TenMonHocProperty, dr.GetString("TenMonHoc"));
            LoadProperty(TenLopHocProperty, dr.GetString("TenLopHoc"));
            LoadProperty(TenHocVienProperty, dr.GetString("TenHocVien"));
            LoadProperty(TenKhoaHocProperty, dr.GetString("TenKhoaHoc"));
            LoadProperty(IdLopHocProperty, dr.GetInt32("IdLopHoc"));

            LoadProperty(NgaySinhProperty, dr.GetSmartDate("NgaySinh"));
            LoadProperty(SoCMTProperty, dr.GetString("SoCMT"));
            var args = new DataPortalHookArgs(dr);
            OnFetchRead(args);
        }

        /// <summary>
        /// Inserts a new <see cref="DT_ChinhQuy_DiemThi_Info"/> object in the database.
        /// </summary>
        private void Child_Insert()
        {
            using (var ctx = TransactionManager<SqlConnection, SqlTransaction>.GetManager("Connection"))
            {
                using (var cmd = new SqlCommand("dbo.DT_ChinhQuy_DiemThi_Info_add", ctx.Connection))
                {
                    cmd.Transaction = ctx.Transaction;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@id", ReadProperty(IdProperty)).Direction = ParameterDirection.Output;
                    cmd.Parameters.AddWithValue("@idHocVien", ReadProperty(IdHocVienProperty) == null ? (object)DBNull.Value : ReadProperty(IdHocVienProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@idMonHoc", ReadProperty(IdMonHocProperty) == null ? (object)DBNull.Value : ReadProperty(IdMonHocProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@LT1", ReadProperty(LT1Property) == null ? (object)DBNull.Value : ReadProperty(LT1Property).Value).DbType = DbType.Double;
                    cmd.Parameters.AddWithValue("@LT2", ReadProperty(LT2Property) == null ? (object)DBNull.Value : ReadProperty(LT2Property).Value).DbType = DbType.Double;
                    cmd.Parameters.AddWithValue("@LT3", ReadProperty(LT3Property) == null ? (object)DBNull.Value : ReadProperty(LT3Property).Value).DbType = DbType.Double;
                    cmd.Parameters.AddWithValue("@TH2", ReadProperty(TH2Property) == null ? (object)DBNull.Value : ReadProperty(TH2Property).Value).DbType = DbType.Double;
                    cmd.Parameters.AddWithValue("@TH1", ReadProperty(TH1Property) == null ? (object)DBNull.Value : ReadProperty(TH1Property).Value).DbType = DbType.Double;
                    cmd.Parameters.AddWithValue("@LastEdited_User", ReadProperty(LastEdited_UserProperty) == null ? (object)DBNull.Value : ReadProperty(LastEdited_UserProperty).Value).DbType = DbType.Int64;
                    cmd.Parameters.AddWithValue("@LastEdited_Date", ReadProperty(LastEdited_DateProperty).DBValue).DbType = DbType.DateTime;
                    cmd.Parameters.AddWithValue("@backup01", ReadProperty(Backup01Property) == null ? (object)DBNull.Value : ReadProperty(Backup01Property)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@backup02", ReadProperty(Backup02Property) == null ? (object)DBNull.Value : ReadProperty(Backup02Property)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@TH3", ReadProperty(TH3Property) == null ? (object)DBNull.Value : ReadProperty(TH3Property).Value).DbType = DbType.Double;
                    var args = new DataPortalHookArgs(cmd);
                    OnInsertPre(args);
                    cmd.ExecuteNonQuery();
                    OnInsertPost(args);
                    LoadProperty(IdProperty, (int) cmd.Parameters["@id"].Value);
                }
            }
        }

        /// <summary>
        /// Updates in the database all changes made to the <see cref="DT_ChinhQuy_DiemThi_Info"/> object.
        /// </summary>
        private void Child_Update()
        {
            if (!IsDirty)
                return;

            using (var ctx = TransactionManager<SqlConnection, SqlTransaction>.GetManager("Connection"))
            {
                using (var cmd = new SqlCommand("dbo.DT_ChinhQuy_DiemThi_Info_update", ctx.Connection))
                {
                    cmd.Transaction = ctx.Transaction;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@id", ReadProperty(IdProperty)).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@idHocVien", ReadProperty(IdHocVienProperty) == null ? (object)DBNull.Value : ReadProperty(IdHocVienProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@idMonHoc", ReadProperty(IdMonHocProperty) == null ? (object)DBNull.Value : ReadProperty(IdMonHocProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@LT1", ReadProperty(LT1Property) == null ? (object)DBNull.Value : ReadProperty(LT1Property).Value).DbType = DbType.Double;
                    cmd.Parameters.AddWithValue("@LT2", ReadProperty(LT2Property) == null ? (object)DBNull.Value : ReadProperty(LT2Property).Value).DbType = DbType.Double;
                    cmd.Parameters.AddWithValue("@LT3", ReadProperty(LT3Property) == null ? (object)DBNull.Value : ReadProperty(LT3Property).Value).DbType = DbType.Double;
                    cmd.Parameters.AddWithValue("@TH2", ReadProperty(TH2Property) == null ? (object)DBNull.Value : ReadProperty(TH2Property).Value).DbType = DbType.Double;
                    cmd.Parameters.AddWithValue("@TH1", ReadProperty(TH1Property) == null ? (object)DBNull.Value : ReadProperty(TH1Property).Value).DbType = DbType.Double;
                    cmd.Parameters.AddWithValue("@LastEdited_User", ReadProperty(LastEdited_UserProperty) == null ? (object)DBNull.Value : ReadProperty(LastEdited_UserProperty).Value).DbType = DbType.Int64;
                    cmd.Parameters.AddWithValue("@LastEdited_Date", ReadProperty(LastEdited_DateProperty).DBValue).DbType = DbType.DateTime;
                    cmd.Parameters.AddWithValue("@backup01", ReadProperty(Backup01Property) == null ? (object)DBNull.Value : ReadProperty(Backup01Property)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@backup02", ReadProperty(Backup02Property) == null ? (object)DBNull.Value : ReadProperty(Backup02Property)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@TH3", ReadProperty(TH3Property) == null ? (object)DBNull.Value : ReadProperty(TH3Property).Value).DbType = DbType.Double;
                    var args = new DataPortalHookArgs(cmd);
                    OnUpdatePre(args);
                    cmd.ExecuteNonQuery();
                    OnUpdatePost(args);
                }
            }
        }

        /// <summary>
        /// Self deletes the <see cref="DT_ChinhQuy_DiemThi_Info"/> object from database.
        /// </summary>
        private void Child_DeleteSelf()
        {
            using (var ctx = TransactionManager<SqlConnection, SqlTransaction>.GetManager("Connection"))
            {
                using (var cmd = new SqlCommand("dbo.DT_ChinhQuy_DiemThi_Info_delete", ctx.Connection))
                {
                    cmd.Transaction = ctx.Transaction;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@id", ReadProperty(IdProperty)).DbType = DbType.Int32;
                    var args = new DataPortalHookArgs(cmd);
                    OnDeletePre(args);
                    cmd.ExecuteNonQuery();
                    OnDeletePost(args);
                }
            }
        }

        #endregion

        #region Pseudo Events

        /// <summary>
        /// Occurs after setting all defaults for object creation.
        /// </summary>
        partial void OnCreate(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Delete, after setting query parameters and before the delete operation.
        /// </summary>
        partial void OnDeletePre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Delete, after the delete operation, before Commit().
        /// </summary>
        partial void OnDeletePost(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after setting query parameters and before the fetch operation.
        /// </summary>
        partial void OnFetchPre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after the fetch operation (object or collection is fully loaded and set up).
        /// </summary>
        partial void OnFetchPost(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after the low level fetch operation, before the data reader is destroyed.
        /// </summary>
        partial void OnFetchRead(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after setting query parameters and before the update operation.
        /// </summary>
        partial void OnUpdatePre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Insert, after the update operation, before setting back row identifiers (RowVersion) and Commit().
        /// </summary>
        partial void OnUpdatePost(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Insert, after setting query parameters and before the insert operation.
        /// </summary>
        partial void OnInsertPre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Insert, after the insert operation, before setting back row identifiers (ID and RowVersion) and Commit().
        /// </summary>
        partial void OnInsertPost(DataPortalHookArgs args);

        #endregion

    }
}
