//  This file was generated by CSLA Object Generator - CslaGenFork v4.3.0
//
// Filename:    CDT_ThietBiCGKT_Info
// ObjectType:  CDT_ThietBiCGKT_Info
// CSLAType:    EditableChild

using System;
using System.Data;
using System.Data.SqlClient;
using Csla;
using Csla.Data;
using NETLINK.LIB;

namespace ModuleChiDaoTuyen.LIB
{

    /// <summary>
    /// CDT_ThietBiCGKT_Info (editable child object).<br/>
    /// This is a generated base class of <see cref="CDT_ThietBiCGKT_Info"/> business object.
    /// </summary>
    /// <remarks>
    /// This class is an item of <see cref="CDT_ThietBiCGKT_Coll"/> collection.
    /// </remarks>
    [Serializable]
    public partial class CDT_ThietBiCGKT_Info : BusinessBase<CDT_ThietBiCGKT_Info>
    {

        #region Static Fields

        private static int _lastID;

        #endregion

        #region Business Properties

        /// <summary>
        /// Maintains metadata about <see cref="Id"/> property.
        /// </summary>
        public static readonly PropertyInfo<int> IdProperty = RegisterProperty<int>(p => p.Id, "Id");
        /// <summary>
        /// Gets the Id.
        /// </summary>
        /// <value>The Id.</value>
        public int Id
        {
            get { return GetProperty(IdProperty); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="NgayBanGiao"/> property.
        /// </summary>
        public static readonly PropertyInfo<Object> NgayBanGiaoProperty = RegisterProperty<Object>(p => p.NgayBanGiao, "Ngay Ban Giao");
        /// <summary>
        /// Gets or sets the Ngay Ban Giao.
        /// </summary>
        /// <value>The Ngay Ban Giao.</value>
        public Object NgayBanGiao
        {
            get { return GetProperty(NgayBanGiaoProperty); }
            set { SetProperty(NgayBanGiaoProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="NgayDuaVaoSuDung"/> property.
        /// </summary>
        public static readonly PropertyInfo<Object> NgayDuaVaoSuDungProperty = RegisterProperty<Object>(p => p.NgayDuaVaoSuDung, "Ngay Dua Vao Su Dung");
        /// <summary>
        /// Gets or sets the Ngay Dua Vao Su Dung.
        /// </summary>
        /// <value>The Ngay Dua Vao Su Dung.</value>
        public Object NgayDuaVaoSuDung
        {
            get { return GetProperty(NgayDuaVaoSuDungProperty); }
            set { SetProperty(NgayDuaVaoSuDungProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="NgayThuHoi"/> property.
        /// </summary>
        public static readonly PropertyInfo<Object> NgayThuHoiProperty = RegisterProperty<Object>(p => p.NgayThuHoi, "Ngay Thu Hoi");
        /// <summary>
        /// Gets or sets the Ngay Thu Hoi.
        /// </summary>
        /// <value>The Ngay Thu Hoi.</value>
        public Object NgayThuHoi
        {
            get { return GetProperty(NgayThuHoiProperty); }
            set { SetProperty(NgayThuHoiProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="TenCanBoQuanLy"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> TenCanBoQuanLyProperty = RegisterProperty<string>(p => p.TenCanBoQuanLy, "Ten Can Bo Quan Ly");
        /// <summary>
        /// Gets or sets the Ten Can Bo Quan Ly.
        /// </summary>
        /// <value>The Ten Can Bo Quan Ly.</value>
        public string TenCanBoQuanLy
        {
            get { return GetProperty(TenCanBoQuanLyProperty); }
            set { SetProperty(TenCanBoQuanLyProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="IdCanBoQuanLy"/> property.
        /// </summary>
        public static readonly PropertyInfo<Int64?> IdCanBoQuanLyProperty = RegisterProperty<Int64?>(p => p.IdCanBoQuanLy, "Id Can Bo Quan Ly");
        /// <summary>
        /// Gets or sets the Id Can Bo Quan Ly.
        /// </summary>
        /// <value>The Id Can Bo Quan Ly.</value>
        public Int64? IdCanBoQuanLy
        {
            get { return GetProperty(IdCanBoQuanLyProperty); }
            set { SetProperty(IdCanBoQuanLyProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="TenCanBoNhanBanGiao"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> TenCanBoNhanBanGiaoProperty = RegisterProperty<string>(p => p.TenCanBoNhanBanGiao, "Ten Can Bo Nhan Ban Giao");
        /// <summary>
        /// Gets or sets the Ten Can Bo Nhan Ban Giao.
        /// </summary>
        /// <value>The Ten Can Bo Nhan Ban Giao.</value>
        public string TenCanBoNhanBanGiao
        {
            get { return GetProperty(TenCanBoNhanBanGiaoProperty); }
            set { SetProperty(TenCanBoNhanBanGiaoProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="IdCanBoNhanBanGiao"/> property.
        /// </summary>
        public static readonly PropertyInfo<Int64?> IdCanBoNhanBanGiaoProperty = RegisterProperty<Int64?>(p => p.IdCanBoNhanBanGiao, "Id Can Bo Nhan Ban Giao");
        /// <summary>
        /// Gets or sets the Id Can Bo Nhan Ban Giao.
        /// </summary>
        /// <value>The Id Can Bo Nhan Ban Giao.</value>
        public Int64? IdCanBoNhanBanGiao
        {
            get { return GetProperty(IdCanBoNhanBanGiaoProperty); }
            set { SetProperty(IdCanBoNhanBanGiaoProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="DiaDiemBanGiao"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> DiaDiemBanGiaoProperty = RegisterProperty<string>(p => p.DiaDiemBanGiao, "Dia Diem Ban Giao");
        /// <summary>
        /// Gets or sets the Dia Diem Ban Giao.
        /// </summary>
        /// <value>The Dia Diem Ban Giao.</value>
        public string DiaDiemBanGiao
        {
            get { return GetProperty(DiaDiemBanGiaoProperty); }
            set { SetProperty(DiaDiemBanGiaoProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="TenThietBi"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> TenThietBiProperty = RegisterProperty<string>(p => p.TenThietBi, "Ten Thiet Bi");
        /// <summary>
        /// Gets or sets the Ten Thiet Bi.
        /// </summary>
        /// <value>The Ten Thiet Bi.</value>
        public string TenThietBi
        {
            get { return GetProperty(TenThietBiProperty); }
            set { SetProperty(TenThietBiProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="NuocSanXuat"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> NuocSanXuatProperty = RegisterProperty<string>(p => p.NuocSanXuat, "Nuoc San Xuat");
        /// <summary>
        /// Gets or sets the Nuoc San Xuat.
        /// </summary>
        /// <value>The Nuoc San Xuat.</value>
        public string NuocSanXuat
        {
            get { return GetProperty(NuocSanXuatProperty); }
            set { SetProperty(NuocSanXuatProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="DonVi"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> DonViProperty = RegisterProperty<string>(p => p.DonVi, "Don Vi");
        /// <summary>
        /// Gets or sets the Don Vi.
        /// </summary>
        /// <value>The Don Vi.</value>
        public string DonVi
        {
            get { return GetProperty(DonViProperty); }
            set { SetProperty(DonViProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="SoLuong"/> property.
        /// </summary>
        public static readonly PropertyInfo<int?> SoLuongProperty = RegisterProperty<int?>(p => p.SoLuong, "So Luong");
        /// <summary>
        /// Gets or sets the So Luong.
        /// </summary>
        /// <value>The So Luong.</value>
        public int? SoLuong
        {
            get { return GetProperty(SoLuongProperty); }
            set { SetProperty(SoLuongProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="GhiChu"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> GhiChuProperty = RegisterProperty<string>(p => p.GhiChu, "Ghi Chu");
        /// <summary>
        /// Gets or sets the Ghi Chu.
        /// </summary>
        /// <value>The Ghi Chu.</value>
        public string GhiChu
        {
            get { return GetProperty(GhiChuProperty); }
            set { SetProperty(GhiChuProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="IDHopDong_GoiKT"/> property.
        /// </summary>
        public static readonly PropertyInfo<int> IDHopDong_GoiKTProperty = RegisterProperty<int>(p => p.IDHopDong_GoiKT, "IDHop Dong Goi KT");
        /// <summary>
        /// Gets or sets the IDHop Dong Goi KT.
        /// </summary>
        /// <value>The IDHop Dong Goi KT.</value>
        public int IDHopDong_GoiKT
        {
            get { return GetProperty(IDHopDong_GoiKTProperty); }
            set { SetProperty(IDHopDong_GoiKTProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="IDHopDong_GoiKT"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> HopDong_GoiKTProperty = RegisterProperty<string>(p => p.HopDong_GoiKT, "Hop Dong Goi KT");
        /// <summary>
        /// Gets or sets the IDHop Dong Goi KT.
        /// </summary>
        /// <value>The IDHop Dong Goi KT.</value>
        public string HopDong_GoiKT
        {
            get { return GetProperty(HopDong_GoiKTProperty); }
            set { SetProperty(HopDong_GoiKTProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="NguonCungCap"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> NguonCungCapProperty = RegisterProperty<string>(p => p.NguonCungCap, "Nguon Cung Cap");
        /// <summary>
        /// Gets or sets the Nguon Cung Cap.
        /// </summary>
        /// <value>The Nguon Cung Cap.</value>
        public string NguonCungCap
        {
            get { return GetProperty(NguonCungCapProperty); }
            set { SetProperty(NguonCungCapProperty, value); }
        }

        #endregion

        #region Factory Methods

        /// <summary>
        /// Factory method. Creates a new <see cref="CDT_ThietBiCGKT_Info"/> object.
        /// </summary>
        /// <returns>A reference to the created <see cref="CDT_ThietBiCGKT_Info"/> object.</returns>
        internal static CDT_ThietBiCGKT_Info NewCDT_ThietBiCGKT_Info()
        {
            return DataPortal.CreateChild<CDT_ThietBiCGKT_Info>();
        }

        /// <summary>
        /// Factory method. Asynchronously creates a new <see cref="CDT_ThietBiCGKT_Info"/> object.
        /// </summary>
        /// <param name="callback">The completion callback method.</param>
        internal static void NewCDT_ThietBiCGKT_Info(EventHandler<DataPortalResult<CDT_ThietBiCGKT_Info>> callback)
        {
            DataPortal.BeginCreate<CDT_ThietBiCGKT_Info>(callback);
        }

        /// <summary>
        /// Factory method. Loads a <see cref="CDT_ThietBiCGKT_Info"/> object from the given SafeDataReader.
        /// </summary>
        /// <param name="dr">The SafeDataReader to use.</param>
        /// <returns>A reference to the fetched <see cref="CDT_ThietBiCGKT_Info"/> object.</returns>
        internal static CDT_ThietBiCGKT_Info GetCDT_ThietBiCGKT_Info(SafeDataReader dr, BusinessFunction function)
        {
            CDT_ThietBiCGKT_Info obj = new CDT_ThietBiCGKT_Info();
            // show the framework that this is a child object
            obj.MarkAsChild();
            obj.Fetch(dr, function);
            obj.MarkOld();
            // check all object rules and property rules
            obj.BusinessRules.CheckRules();
            return obj;
        }

        #endregion

        #region Constructor

        /// <summary>
        /// Initializes a new instance of the <see cref="CDT_ThietBiCGKT_Info"/> class.
        /// </summary>
        /// <remarks> Do not use to create a Csla object. Use factory methods instead.</remarks>
        private CDT_ThietBiCGKT_Info()
        {
            // Prevent direct creation

            // show the framework that this is a child object
            MarkAsChild();
        }

        #endregion

        #region Data Access

        /// <summary>
        /// Loads default values for the <see cref="CDT_ThietBiCGKT_Info"/> object properties.
        /// </summary>
        [Csla.RunLocal]
        protected override void Child_Create()
        {
            LoadProperty(IdProperty, System.Threading.Interlocked.Decrement(ref _lastID));
            LoadProperty(TenCanBoQuanLyProperty, null);
            LoadProperty(TenCanBoNhanBanGiaoProperty, null);
            LoadProperty(DiaDiemBanGiaoProperty, null);
            LoadProperty(NuocSanXuatProperty, null);
            LoadProperty(DonViProperty, null);
            LoadProperty(GhiChuProperty, null);
            LoadProperty(NguonCungCapProperty, null);
            var args = new DataPortalHookArgs();
            OnCreate(args);
            base.Child_Create();
        }

        /// <summary>
        /// Loads a <see cref="CDT_ThietBiCGKT_Info"/> object from the given SafeDataReader.
        /// </summary>
        /// <param name="dr">The SafeDataReader to use.</param>
        private void Fetch(SafeDataReader dr, BusinessFunction function)
        {
            // Value properties
            LoadProperty(IdProperty, dr.GetInt32("Id"));
            LoadProperty(NgayBanGiaoProperty, dr.GetDateTime("NgayBanGiao"));
            LoadProperty(NgayDuaVaoSuDungProperty, dr.GetDateTime("NgayDuaVaoSuDung"));
            LoadProperty(NgayThuHoiProperty, dr.GetDateTime("NgayThuHoi"));
            LoadProperty(TenCanBoQuanLyProperty, dr.GetString("TenCanBoQuanLy"));
            LoadProperty(IdCanBoQuanLyProperty, dr.GetInt64("IdCanBoQuanLy"));
            LoadProperty(TenCanBoNhanBanGiaoProperty, dr.GetString("TenCanBoNhanBanGiao"));
            LoadProperty(IdCanBoNhanBanGiaoProperty, dr.GetInt64("IdCanBoNhanBanGiao"));
            LoadProperty(DiaDiemBanGiaoProperty, dr.GetString("DiaDiemBanGiao"));
            LoadProperty(TenThietBiProperty, dr.GetString("TenThietBi"));
            LoadProperty(NuocSanXuatProperty, dr.GetString("NuocSanXuat"));
            LoadProperty(DonViProperty, dr.GetString("DonVi"));
            LoadProperty(SoLuongProperty, dr.GetInt32("SoLuong"));
            LoadProperty(GhiChuProperty, dr.GetString("GhiChu"));
            LoadProperty(IDHopDong_GoiKTProperty, dr.GetInt32("IDHopDong_GoiKT"));
            LoadProperty(HopDong_GoiKTProperty, dr.GetString("HopDong_GoiKT"));
            LoadProperty(NguonCungCapProperty, dr.GetString("NguonCungCap"));
            var args = new DataPortalHookArgs(dr);
            OnFetchRead(args);
        }

        /// <summary>
        /// Inserts a new <see cref="CDT_ThietBiCGKT_Info"/> object in the database.
        /// </summary>
        private void Child_Insert()
        {
            using (var ctx = TransactionManager<SqlConnection, SqlTransaction>.GetManager("Connection"))
            {
                using (var cmd = new SqlCommand("dbo.CDT_ThietBiCGKT_Info_add", ctx.Connection))
                {
                    cmd.Transaction = ctx.Transaction;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@Id", ReadProperty(IdProperty)).Direction = ParameterDirection.Output;
                    cmd.Parameters.AddWithValue("@NgayBanGiao", ReadProperty(NgayBanGiaoProperty)).DbType = DbType.DateTime;
                    cmd.Parameters.AddWithValue("@NgayDuaVaoSuDung", ReadProperty(NgayDuaVaoSuDungProperty)).DbType = DbType.DateTime;
                    cmd.Parameters.AddWithValue("@NgayThuHoi", ReadProperty(NgayThuHoiProperty)).DbType = DbType.DateTime;
                    cmd.Parameters.AddWithValue("@TenCanBoQuanLy", ReadProperty(TenCanBoQuanLyProperty) == null ? (object)DBNull.Value : ReadProperty(TenCanBoQuanLyProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@IdCanBoQuanLy", ReadProperty(IdCanBoQuanLyProperty) == null ? (object)DBNull.Value : ReadProperty(IdCanBoQuanLyProperty).Value).DbType = DbType.Int64;
                    cmd.Parameters.AddWithValue("@TenCanBoNhanBanGiao", ReadProperty(TenCanBoNhanBanGiaoProperty) == null ? (object)DBNull.Value : ReadProperty(TenCanBoNhanBanGiaoProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@IdCanBoNhanBanGiao", ReadProperty(IdCanBoNhanBanGiaoProperty) == null ? (object)DBNull.Value : ReadProperty(IdCanBoNhanBanGiaoProperty).Value).DbType = DbType.Int64;
                    cmd.Parameters.AddWithValue("@DiaDiemBanGiao", ReadProperty(DiaDiemBanGiaoProperty) == null ? (object)DBNull.Value : ReadProperty(DiaDiemBanGiaoProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@TenThietBi", ReadProperty(TenThietBiProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@NuocSanXuat", ReadProperty(NuocSanXuatProperty) == null ? (object)DBNull.Value : ReadProperty(NuocSanXuatProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@DonVi", ReadProperty(DonViProperty) == null ? (object)DBNull.Value : ReadProperty(DonViProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@SoLuong", ReadProperty(SoLuongProperty) == null ? (object)DBNull.Value : ReadProperty(SoLuongProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@GhiChu", ReadProperty(GhiChuProperty) == null ? (object)DBNull.Value : ReadProperty(GhiChuProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@IDHopDong_GoiKT", ReadProperty(IDHopDong_GoiKTProperty)).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@NguonCungCap", ReadProperty(NguonCungCapProperty) == null ? (object)DBNull.Value : ReadProperty(NguonCungCapProperty)).DbType = DbType.String;
                    var args = new DataPortalHookArgs(cmd);
                    OnInsertPre(args);
                    cmd.ExecuteNonQuery();
                    OnInsertPost(args);
                    LoadProperty(IdProperty, (int) cmd.Parameters["@Id"].Value);
                }
            }
        }

        /// <summary>
        /// Updates in the database all changes made to the <see cref="CDT_ThietBiCGKT_Info"/> object.
        /// </summary>
        private void Child_Update()
        {
            if (!IsDirty)
                return;

            using (var ctx = TransactionManager<SqlConnection, SqlTransaction>.GetManager("Connection"))
            {
                using (var cmd = new SqlCommand("dbo.CDT_ThietBiCGKT_Info_update", ctx.Connection))
                {
                    cmd.Transaction = ctx.Transaction;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@Id", ReadProperty(IdProperty)).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@NgayBanGiao", ReadProperty(NgayBanGiaoProperty)).DbType = DbType.DateTime;
                    cmd.Parameters.AddWithValue("@NgayDuaVaoSuDung", ReadProperty(NgayDuaVaoSuDungProperty)).DbType = DbType.DateTime;
                    cmd.Parameters.AddWithValue("@NgayThuHoi", ReadProperty(NgayThuHoiProperty)).DbType = DbType.DateTime;
                    cmd.Parameters.AddWithValue("@TenCanBoQuanLy", ReadProperty(TenCanBoQuanLyProperty) == null ? (object)DBNull.Value : ReadProperty(TenCanBoQuanLyProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@IdCanBoQuanLy", ReadProperty(IdCanBoQuanLyProperty) == null ? (object)DBNull.Value : ReadProperty(IdCanBoQuanLyProperty).Value).DbType = DbType.Int64;
                    cmd.Parameters.AddWithValue("@TenCanBoNhanBanGiao", ReadProperty(TenCanBoNhanBanGiaoProperty) == null ? (object)DBNull.Value : ReadProperty(TenCanBoNhanBanGiaoProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@IdCanBoNhanBanGiao", ReadProperty(IdCanBoNhanBanGiaoProperty) == null ? (object)DBNull.Value : ReadProperty(IdCanBoNhanBanGiaoProperty).Value).DbType = DbType.Int64;
                    cmd.Parameters.AddWithValue("@DiaDiemBanGiao", ReadProperty(DiaDiemBanGiaoProperty) == null ? (object)DBNull.Value : ReadProperty(DiaDiemBanGiaoProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@TenThietBi", ReadProperty(TenThietBiProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@NuocSanXuat", ReadProperty(NuocSanXuatProperty) == null ? (object)DBNull.Value : ReadProperty(NuocSanXuatProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@DonVi", ReadProperty(DonViProperty) == null ? (object)DBNull.Value : ReadProperty(DonViProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@SoLuong", ReadProperty(SoLuongProperty) == null ? (object)DBNull.Value : ReadProperty(SoLuongProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@GhiChu", ReadProperty(GhiChuProperty) == null ? (object)DBNull.Value : ReadProperty(GhiChuProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@IDHopDong_GoiKT", ReadProperty(IDHopDong_GoiKTProperty)).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@NguonCungCap", ReadProperty(NguonCungCapProperty) == null ? (object)DBNull.Value : ReadProperty(NguonCungCapProperty)).DbType = DbType.String;
                    var args = new DataPortalHookArgs(cmd);
                    OnUpdatePre(args);
                    cmd.ExecuteNonQuery();
                    OnUpdatePost(args);
                }
            }
        }

        /// <summary>
        /// Self deletes the <see cref="CDT_ThietBiCGKT_Info"/> object from database.
        /// </summary>
        private void Child_DeleteSelf()
        {
            using (var ctx = TransactionManager<SqlConnection, SqlTransaction>.GetManager("Connection"))
            {
                using (var cmd = new SqlCommand("dbo.CDT_ThietBiCGKT_Info_delete", ctx.Connection))
                {
                    cmd.Transaction = ctx.Transaction;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@Id", ReadProperty(IdProperty)).DbType = DbType.Int32;
                    var args = new DataPortalHookArgs(cmd);
                    OnDeletePre(args);
                    cmd.ExecuteNonQuery();
                    OnDeletePost(args);
                }
            }
        }

        #endregion

        #region Pseudo Events

        /// <summary>
        /// Occurs after setting all defaults for object creation.
        /// </summary>
        partial void OnCreate(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Delete, after setting query parameters and before the delete operation.
        /// </summary>
        partial void OnDeletePre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Delete, after the delete operation, before Commit().
        /// </summary>
        partial void OnDeletePost(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after setting query parameters and before the fetch operation.
        /// </summary>
        partial void OnFetchPre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after the fetch operation (object or collection is fully loaded and set up).
        /// </summary>
        partial void OnFetchPost(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after the low level fetch operation, before the data reader is destroyed.
        /// </summary>
        partial void OnFetchRead(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after setting query parameters and before the update operation.
        /// </summary>
        partial void OnUpdatePre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Insert, after the update operation, before setting back row identifiers (RowVersion) and Commit().
        /// </summary>
        partial void OnUpdatePost(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Insert, after setting query parameters and before the insert operation.
        /// </summary>
        partial void OnInsertPre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Insert, after the insert operation, before setting back row identifiers (ID and RowVersion) and Commit().
        /// </summary>
        partial void OnInsertPost(DataPortalHookArgs args);

        #endregion

    }
}
