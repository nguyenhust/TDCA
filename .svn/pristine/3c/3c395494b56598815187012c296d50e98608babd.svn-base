//  This file was generated by CSLA Object Generator - CslaGenFork v4.3.0
//
// Filename:    DIC_PARAMETERES
// ObjectType:  DIC_PARAMETERES
// CSLAType:    EditableRoot

using System;
using System.Data;
using System.Data.SqlClient;
using Csla;
using Csla.Data;
using NETLINK.LIB;
namespace DanhMuc.LIB
{

    /// <summary>
    /// DIC_PARAMETERES (editable root object).<br/>
    /// This is a generated base class of <see cref="DIC_PARAMETERES"/> business object.
    /// </summary>
    [Serializable]
    public partial class DIC_PARAMETERES : BusinessBase<DIC_PARAMETERES>
    {

        #region Business Properties

        /// <summary>
        /// Maintains metadata about <see cref="ID"/> property.
        /// </summary>
        public static readonly PropertyInfo<int> IDProperty = RegisterProperty<int>(p => p.ID, "ID");
        /// <summary>
        /// Gets or sets the ID.
        /// </summary>
        /// <value>The ID.</value>
        public int ID
        {
            get { return GetProperty(IDProperty); }
            set { SetProperty(IDProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="ParaName"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> ParaNameProperty = RegisterProperty<string>(p => p.ParaName, "Para Name");
        /// <summary>
        /// Gets or sets the Para Name.
        /// </summary>
        /// <value>The Para Name.</value>
        public string ParaName
        {
            get { return GetProperty(ParaNameProperty); }
            set { SetProperty(ParaNameProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="Descriptions"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> DescriptionsProperty = RegisterProperty<string>(p => p.Descriptions, "Descriptions");
        /// <summary>
        /// Gets or sets the Descriptions.
        /// </summary>
        /// <value>The Descriptions.</value>
        public string Descriptions
        {
            get { return GetProperty(DescriptionsProperty); }
            set { SetProperty(DescriptionsProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="ParaValue"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> ParaValueProperty = RegisterProperty<string>(p => p.ParaValue, "Para Value");
        /// <summary>
        /// Gets or sets the Para Value.
        /// </summary>
        /// <value>The Para Value.</value>
        public string ParaValue
        {
            get { return GetProperty(ParaValueProperty); }
            set { SetProperty(ParaValueProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="ParaExpand"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> ParaExpandProperty = RegisterProperty<string>(p => p.ParaExpand, "Para Expand");
        /// <summary>
        /// Gets or sets the Para Expand.
        /// </summary>
        /// <value>The Para Expand.</value>
        public string ParaExpand
        {
            get { return GetProperty(ParaExpandProperty); }
            set { SetProperty(ParaExpandProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="ParaType"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> ParaTypeProperty = RegisterProperty<string>(p => p.ParaType, "Para Type");
        /// <summary>
        /// Gets or sets the Para Type.
        /// </summary>
        /// <value>The Para Type.</value>
        public string ParaType
        {
            get { return GetProperty(ParaTypeProperty); }
            set { SetProperty(ParaTypeProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="ParaRoll"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> ParaRollProperty = RegisterProperty<string>(p => p.ParaRoll, "Para Roll");
        /// <summary>
        /// Gets or sets the Para Roll.
        /// </summary>
        /// <value>The Para Roll.</value>
        public string ParaRoll
        {
            get { return GetProperty(ParaRollProperty); }
            set { SetProperty(ParaRollProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="DefaultValue"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> DefaultValueProperty = RegisterProperty<string>(p => p.DefaultValue, "Default Value");
        /// <summary>
        /// Gets or sets the Default Value.
        /// </summary>
        /// <value>The Default Value.</value>
        public string DefaultValue
        {
            get { return GetProperty(DefaultValueProperty); }
            set { SetProperty(DefaultValueProperty, value); }
        }

        #endregion

        #region Factory Methods

        /// <summary>
        /// Factory method. Creates a new <see cref="DIC_PARAMETERES"/> object.
        /// </summary>
        /// <returns>A reference to the created <see cref="DIC_PARAMETERES"/> object.</returns>
        public static DIC_PARAMETERES NewDIC_PARAMETERES()
        {
            return DataPortal.Create<DIC_PARAMETERES>();
        }

        /// <summary>
        /// Factory method. Loads a <see cref="DIC_PARAMETERES"/> object, based on given parameters.
        /// </summary>
        /// <param name="id">The ID parameter of the DIC_PARAMETERES to fetch.</param>
        /// <returns>A reference to the fetched <see cref="DIC_PARAMETERES"/> object.</returns>
        public static DIC_PARAMETERES GetDIC_PARAMETERES(int id)
        {
            return DataPortal.Fetch<DIC_PARAMETERES>(id);
        }

        /// <summary>
        /// Factory method. Deletes a <see cref="DIC_PARAMETERES"/> object, based on given parameters.
        /// </summary>
        /// <param name="id">The ID of the DIC_PARAMETERES to delete.</param>
        public static void DeleteDIC_PARAMETERES(int id)
        {
            DataPortal.Delete<DIC_PARAMETERES>(id);
        }

        /// <summary>
        /// Factory method. Asynchronously creates a new <see cref="DIC_PARAMETERES"/> object.
        /// </summary>
        /// <param name="callback">The completion callback method.</param>
        public static void NewDIC_PARAMETERES(EventHandler<DataPortalResult<DIC_PARAMETERES>> callback)
        {
            DataPortal.BeginCreate<DIC_PARAMETERES>(callback);
        }

        /// <summary>
        /// Factory method. Asynchronously loads a <see cref="DIC_PARAMETERES"/> object, based on given parameters.
        /// </summary>
        /// <param name="id">The ID parameter of the DIC_PARAMETERES to fetch.</param>
        /// <param name="callback">The completion callback method.</param>
        public static void GetDIC_PARAMETERES(int id, EventHandler<DataPortalResult<DIC_PARAMETERES>> callback)
        {
            DataPortal.BeginFetch<DIC_PARAMETERES>(id, callback);
        }

        /// <summary>
        /// Factory method. Asynchronously deletes a <see cref="DIC_PARAMETERES"/> object, based on given parameters.
        /// </summary>
        /// <param name="id">The ID of the DIC_PARAMETERES to delete.</param>
        /// <param name="callback">The completion callback method.</param>
        public static void DeleteDIC_PARAMETERES(int id, EventHandler<DataPortalResult<DIC_PARAMETERES>> callback)
        {
            DataPortal.BeginDelete<DIC_PARAMETERES>(id, callback);
        }

        #endregion

        #region Constructor

        /// <summary>
        /// Initializes a new instance of the <see cref="DIC_PARAMETERES"/> class.
        /// </summary>
        /// <remarks> Do not use to create a Csla object. Use factory methods instead.</remarks>
        private DIC_PARAMETERES()
        {
            // Prevent direct creation
        }

        #endregion

        #region Data Access

        /// <summary>
        /// Loads default values for the <see cref="DIC_PARAMETERES"/> object properties.
        /// </summary>
        [Csla.RunLocal]
        protected override void DataPortal_Create()
        {
            LoadProperty(DescriptionsProperty, null);
            LoadProperty(ParaExpandProperty, null);
            LoadProperty(ParaTypeProperty, null);
            LoadProperty(ParaRollProperty, null);
            LoadProperty(DefaultValueProperty, null);
            var args = new DataPortalHookArgs();
            OnCreate(args);
            base.DataPortal_Create();
        }

        /// <summary>
        /// Loads a <see cref="DIC_PARAMETERES"/> object from the database, based on given criteria.
        /// </summary>
        /// <param name="id">The ID.</param>
        protected void DataPortal_Fetch(int id)
        {
            using (var ctx = ConnectionManager<SqlConnection>.GetManager("Connection"))
            {
                using (var cmd = new SqlCommand("dbo.DIC_PARAMETERES_get", ctx.Connection))
                {
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@ID", id).DbType = DbType.Int32;
                    var args = new DataPortalHookArgs(cmd, id);
                    OnFetchPre(args);
                    Fetch(cmd);
                    OnFetchPost(args);
                }
            }
            // check all object rules and property rules
            BusinessRules.CheckRules();
        }

        private void Fetch(SqlCommand cmd)
        {
            using (var dr = new SafeDataReader(cmd.ExecuteReader()))
            {
                if (dr.Read())
                {
                    Fetch(dr);
                }
            }
        }

        /// <summary>
        /// Loads a <see cref="DIC_PARAMETERES"/> object from the given SafeDataReader.
        /// </summary>
        /// <param name="dr">The SafeDataReader to use.</param>
        private void Fetch(SafeDataReader dr)
        {
            // Value properties
            LoadProperty(IDProperty, dr.GetInt32("ID"));
            LoadProperty(ParaNameProperty, dr.GetString("ParaName"));
            LoadProperty(DescriptionsProperty, dr.GetString("Descriptions"));
            LoadProperty(ParaValueProperty, dr.GetString("ParaValue"));
            LoadProperty(ParaExpandProperty, dr.GetString("ParaExpand"));
            LoadProperty(ParaTypeProperty, dr.GetString("ParaType"));
            LoadProperty(ParaRollProperty, dr.GetString("ParaRoll"));
            LoadProperty(DefaultValueProperty, dr.GetString("DefaultValue"));
            var args = new DataPortalHookArgs(dr);
            OnFetchRead(args);
        }

        /// <summary>
        /// Inserts a new <see cref="DIC_PARAMETERES"/> object in the database.
        /// </summary>
        protected override void DataPortal_Insert()
        {
            using (var ctx = TransactionManager<SqlConnection, SqlTransaction>.GetManager("Connection"))
            {
                using (var cmd = new SqlCommand("dbo.DIC_PARAMETERES_add", ctx.Connection))
                {
                    cmd.Transaction = ctx.Transaction;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@ID", ReadProperty(IDProperty)).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@ParaName", ReadProperty(ParaNameProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@Descriptions", ReadProperty(DescriptionsProperty) == null ? (object)DBNull.Value : ReadProperty(DescriptionsProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@ParaValue", ReadProperty(ParaValueProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@ParaExpand", ReadProperty(ParaExpandProperty) == null ? (object)DBNull.Value : ReadProperty(ParaExpandProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@ParaType", ReadProperty(ParaTypeProperty) == null ? (object)DBNull.Value : ReadProperty(ParaTypeProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@ParaRoll", ReadProperty(ParaRollProperty) == null ? (object)DBNull.Value : ReadProperty(ParaRollProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@DefaultValue", ReadProperty(DefaultValueProperty) == null ? (object)DBNull.Value : ReadProperty(DefaultValueProperty)).DbType = DbType.String;
                    var args = new DataPortalHookArgs(cmd);
                    OnInsertPre(args);
                    cmd.ExecuteNonQuery();
                    OnInsertPost(args);
                }
                ctx.Commit();
            }
        }

        /// <summary>
        /// Updates in the database all changes made to the <see cref="DIC_PARAMETERES"/> object.
        /// </summary>
        protected override void DataPortal_Update()
        {
            using (var ctx = TransactionManager<SqlConnection, SqlTransaction>.GetManager("Connection"))
            {
                using (var cmd = new SqlCommand("dbo.DIC_PARAMETERES_update", ctx.Connection))
                {
                    cmd.Transaction = ctx.Transaction;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@ID", ReadProperty(IDProperty)).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@ParaName", ReadProperty(ParaNameProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@Descriptions", ReadProperty(DescriptionsProperty) == null ? (object)DBNull.Value : ReadProperty(DescriptionsProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@ParaValue", ReadProperty(ParaValueProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@ParaExpand", ReadProperty(ParaExpandProperty) == null ? (object)DBNull.Value : ReadProperty(ParaExpandProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@ParaType", ReadProperty(ParaTypeProperty) == null ? (object)DBNull.Value : ReadProperty(ParaTypeProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@ParaRoll", ReadProperty(ParaRollProperty) == null ? (object)DBNull.Value : ReadProperty(ParaRollProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@DefaultValue", ReadProperty(DefaultValueProperty) == null ? (object)DBNull.Value : ReadProperty(DefaultValueProperty)).DbType = DbType.String;
                    var args = new DataPortalHookArgs(cmd);
                    OnUpdatePre(args);
                    cmd.ExecuteNonQuery();
                    OnUpdatePost(args);
                }
                ctx.Commit();
            }
        }

        /// <summary>
        /// Self deletes the <see cref="DIC_PARAMETERES"/> object.
        /// </summary>
        protected override void DataPortal_DeleteSelf()
        {
            DataPortal_Delete(ID);
        }

        /// <summary>
        /// Deletes the <see cref="DIC_PARAMETERES"/> object from database.
        /// </summary>
        /// <param name="id">The delete criteria.</param>
        protected void DataPortal_Delete(int id)
        {
            using (var ctx = TransactionManager<SqlConnection, SqlTransaction>.GetManager("Connection"))
            {
                using (var cmd = new SqlCommand("dbo.DIC_PARAMETERES_delete", ctx.Connection))
                {
                    cmd.Transaction = ctx.Transaction;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@ID", id).DbType = DbType.Int32;
                    var args = new DataPortalHookArgs(cmd, id);
                    OnDeletePre(args);
                    cmd.ExecuteNonQuery();
                    OnDeletePost(args);
                }
                ctx.Commit();
            }
        }

        #endregion

        #region Pseudo Events

        /// <summary>
        /// Occurs after setting all defaults for object creation.
        /// </summary>
        partial void OnCreate(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Delete, after setting query parameters and before the delete operation.
        /// </summary>
        partial void OnDeletePre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Delete, after the delete operation, before Commit().
        /// </summary>
        partial void OnDeletePost(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after setting query parameters and before the fetch operation.
        /// </summary>
        partial void OnFetchPre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after the fetch operation (object or collection is fully loaded and set up).
        /// </summary>
        partial void OnFetchPost(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after the low level fetch operation, before the data reader is destroyed.
        /// </summary>
        partial void OnFetchRead(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after setting query parameters and before the update operation.
        /// </summary>
        partial void OnUpdatePre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Insert, after the update operation, before setting back row identifiers (RowVersion) and Commit().
        /// </summary>
        partial void OnUpdatePost(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Insert, after setting query parameters and before the insert operation.
        /// </summary>
        partial void OnInsertPre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Insert, after the insert operation, before setting back row identifiers (ID and RowVersion) and Commit().
        /// </summary>
        partial void OnInsertPost(DataPortalHookArgs args);

        #endregion

    }
}
