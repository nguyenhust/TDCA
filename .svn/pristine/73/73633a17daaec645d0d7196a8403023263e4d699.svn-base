//  This file was generated by CSLA Object Generator - CslaGenFork v4.3.0
//
// Filename:    TT_AnhVideo
// ObjectType:  TT_AnhVideo
// CSLAType:    EditableRoot

using System;
using System.Data;
using System.Data.SqlClient;
using Csla;
using Csla.Data;

namespace TruyenThong
{

    /// <summary>
    /// TT_AnhVideo (editable root object).<br/>
    /// This is a generated base class of <see cref="TT_AnhVideo"/> business object.
    /// </summary>
    [Serializable]
    public partial class TT_AnhVideo : BusinessBase<TT_AnhVideo>
    {

        #region Business Properties

        /// <summary>
        /// Maintains metadata about <see cref="ID"/> property.
        /// </summary>
        public static readonly PropertyInfo<Int64> IDProperty = RegisterProperty<Int64>(p => p.ID, "ID");
        /// <summary>
        /// Gets or sets the ID.
        /// </summary>
        /// <value>The ID.</value>
        public Int64 ID
        {
            get { return GetProperty(IDProperty); }
            set { SetProperty(IDProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="IDSuKien"/> property.
        /// </summary>
        public static readonly PropertyInfo<Int64> IDSuKienProperty = RegisterProperty<Int64>(p => p.IDSuKien, "IDSu Kien");
        /// <summary>
        /// Gets or sets the IDSu Kien.
        /// </summary>
        /// <value>The IDSu Kien.</value>
        public Int64 IDSuKien
        {
            get { return GetProperty(IDSuKienProperty); }
            set { SetProperty(IDSuKienProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="IDCanBo"/> property.
        /// </summary>
        public static readonly PropertyInfo<Int64> IDCanBoProperty = RegisterProperty<Int64>(p => p.IDCanBo, "IDCan Bo");
        /// <summary>
        /// Gets or sets the IDCan Bo.
        /// </summary>
        /// <value>The IDCan Bo.</value>
        public Int64 IDCanBo
        {
            get { return GetProperty(IDCanBoProperty); }
            set { SetProperty(IDCanBoProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="Loai"/> property.
        /// </summary>
        public static readonly PropertyInfo<bool?> LoaiProperty = RegisterProperty<bool?>(p => p.Loai, "Loai");
        /// <summary>
        /// Gets or sets the Loai.
        /// </summary>
        /// <value><c>true</c> if Loai; <c>false</c> if not Loai; otherwise, <c>null</c>.</value>
        public bool? Loai
        {
            get { return GetProperty(LoaiProperty); }
            set { SetProperty(LoaiProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="SoLuong"/> property.
        /// </summary>
        public static readonly PropertyInfo<int?> SoLuongProperty = RegisterProperty<int?>(p => p.SoLuong, "So Luong");
        /// <summary>
        /// Gets or sets the So Luong.
        /// </summary>
        /// <value>The So Luong.</value>
        public int? SoLuong
        {
            get { return GetProperty(SoLuongProperty); }
            set { SetProperty(SoLuongProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="DuongDan"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> DuongDanProperty = RegisterProperty<string>(p => p.DuongDan, "Duong Dan");
        /// <summary>
        /// Gets or sets the Duong Dan.
        /// </summary>
        /// <value>The Duong Dan.</value>
        public string DuongDan
        {
            get { return GetProperty(DuongDanProperty); }
            set { SetProperty(DuongDanProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="GhiChu"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> GhiChuProperty = RegisterProperty<string>(p => p.GhiChu, "Ghi Chu");
        /// <summary>
        /// Gets or sets the Ghi Chu.
        /// </summary>
        /// <value>The Ghi Chu.</value>
        public string GhiChu
        {
            get { return GetProperty(GhiChuProperty); }
            set { SetProperty(GhiChuProperty, value); }
        }

        #endregion

        #region Factory Methods

        /// <summary>
        /// Factory method. Creates a new <see cref="TT_AnhVideo"/> object.
        /// </summary>
        /// <returns>A reference to the created <see cref="TT_AnhVideo"/> object.</returns>
        public static TT_AnhVideo NewTT_AnhVideo()
        {
            return DataPortal.Create<TT_AnhVideo>();
        }

        /// <summary>
        /// Factory method. Loads a <see cref="TT_AnhVideo"/> object, based on given parameters.
        /// </summary>
        /// <param name="id">The ID parameter of the TT_AnhVideo to fetch.</param>
        /// <returns>A reference to the fetched <see cref="TT_AnhVideo"/> object.</returns>
        public static TT_AnhVideo GetTT_AnhVideo(Int64 id)
        {
            return DataPortal.Fetch<TT_AnhVideo>(id);
        }

        /// <summary>
        /// Factory method. Deletes a <see cref="TT_AnhVideo"/> object, based on given parameters.
        /// </summary>
        /// <param name="id">The ID of the TT_AnhVideo to delete.</param>
        public static void DeleteTT_AnhVideo(Int64 id)
        {
            DataPortal.Delete<TT_AnhVideo>(id);
        }

        /// <summary>
        /// Factory method. Asynchronously creates a new <see cref="TT_AnhVideo"/> object.
        /// </summary>
        /// <param name="callback">The completion callback method.</param>
        public static void NewTT_AnhVideo(EventHandler<DataPortalResult<TT_AnhVideo>> callback)
        {
            DataPortal.BeginCreate<TT_AnhVideo>(callback);
        }

        /// <summary>
        /// Factory method. Asynchronously loads a <see cref="TT_AnhVideo"/> object, based on given parameters.
        /// </summary>
        /// <param name="id">The ID parameter of the TT_AnhVideo to fetch.</param>
        /// <param name="callback">The completion callback method.</param>
        public static void GetTT_AnhVideo(Int64 id, EventHandler<DataPortalResult<TT_AnhVideo>> callback)
        {
            DataPortal.BeginFetch<TT_AnhVideo>(id, callback);
        }

        /// <summary>
        /// Factory method. Asynchronously deletes a <see cref="TT_AnhVideo"/> object, based on given parameters.
        /// </summary>
        /// <param name="id">The ID of the TT_AnhVideo to delete.</param>
        /// <param name="callback">The completion callback method.</param>
        public static void DeleteTT_AnhVideo(Int64 id, EventHandler<DataPortalResult<TT_AnhVideo>> callback)
        {
            DataPortal.BeginDelete<TT_AnhVideo>(id, callback);
        }

        #endregion

        #region Constructor

        /// <summary>
        /// Initializes a new instance of the <see cref="TT_AnhVideo"/> class.
        /// </summary>
        /// <remarks> Do not use to create a Csla object. Use factory methods instead.</remarks>
        private TT_AnhVideo()
        {
            // Prevent direct creation
        }

        #endregion

        #region Data Access

        /// <summary>
        /// Loads default values for the <see cref="TT_AnhVideo"/> object properties.
        /// </summary>
        [Csla.RunLocal]
        protected override void DataPortal_Create()
        {
            LoadProperty(DuongDanProperty, null);
            LoadProperty(GhiChuProperty, null);
            var args = new DataPortalHookArgs();
            OnCreate(args);
            base.DataPortal_Create();
        }

        /// <summary>
        /// Loads a <see cref="TT_AnhVideo"/> object from the database, based on given criteria.
        /// </summary>
        /// <param name="id">The ID.</param>
        protected void DataPortal_Fetch(Int64 id)
        {
            using (var ctx = ConnectionManager<SqlConnection>.GetManager("Connection"))
            {
                using (var cmd = new SqlCommand("dbo.TT_AnhVideo_Get", ctx.Connection))
                {
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@ID", id).DbType = DbType.Int64;
                    var args = new DataPortalHookArgs(cmd, id);
                    OnFetchPre(args);
                    Fetch(cmd);
                    OnFetchPost(args);
                }
            }
            // check all object rules and property rules
            BusinessRules.CheckRules();
        }

        private void Fetch(SqlCommand cmd)
        {
            using (var dr = new SafeDataReader(cmd.ExecuteReader()))
            {
                if (dr.Read())
                {
                    Fetch(dr);
                }
            }
        }

        /// <summary>
        /// Loads a <see cref="TT_AnhVideo"/> object from the given SafeDataReader.
        /// </summary>
        /// <param name="dr">The SafeDataReader to use.</param>
        private void Fetch(SafeDataReader dr)
        {
            // Value properties
            LoadProperty(IDProperty, data.ID);
            LoadProperty(IDSuKienProperty, data.IDSuKien);
            LoadProperty(IDCanBoProperty, data.IDCanBo);
            LoadProperty(LoaiProperty, data.Loai);
            LoadProperty(SoLuongProperty, data.SoLuong);
            LoadProperty(DuongDanProperty, data.DuongDan);
            LoadProperty(GhiChuProperty, data.GhiChu);
            var args = new DataPortalHookArgs(dr);
            OnFetchRead(args);
        }

        /// <summary>
        /// Inserts a new <see cref="TT_AnhVideo"/> object in the database.
        /// </summary>
        protected override void DataPortal_Insert()
        {
            using (var ctx = TransactionManager<SqlConnection, SqlTransaction>.GetManager("Connection"))
            {
                using (var cmd = new SqlCommand("dbo.TT_AnhVideo_Add", ctx.Connection))
                {
                    cmd.Transaction = ctx.Transaction;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@ID", ReadProperty(IDProperty)).DbType = DbType.Int64;
                    cmd.Parameters.AddWithValue("@IDSuKien", ReadProperty(IDSuKienProperty)).DbType = DbType.Int64;
                    cmd.Parameters.AddWithValue("@IDCanBo", ReadProperty(IDCanBoProperty)).DbType = DbType.Int64;
                    cmd.Parameters.AddWithValue("@Loai", ReadProperty(LoaiProperty) == null ? (object)DBNull.Value : ReadProperty(LoaiProperty).Value).DbType = DbType.Boolean;
                    cmd.Parameters.AddWithValue("@SoLuong", ReadProperty(SoLuongProperty) == null ? (object)DBNull.Value : ReadProperty(SoLuongProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@DuongDan", ReadProperty(DuongDanProperty) == null ? (object)DBNull.Value : ReadProperty(DuongDanProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@GhiChu", ReadProperty(GhiChuProperty) == null ? (object)DBNull.Value : ReadProperty(GhiChuProperty)).DbType = DbType.String;
                    var args = new DataPortalHookArgs(cmd);
                    OnInsertPre(args);
                    cmd.ExecuteNonQuery();
                    OnInsertPost(args);
                }
                ctx.Commit();
            }
        }

        /// <summary>
        /// Updates in the database all changes made to the <see cref="TT_AnhVideo"/> object.
        /// </summary>
        protected override void DataPortal_Update()
        {
            using (var ctx = TransactionManager<SqlConnection, SqlTransaction>.GetManager("Connection"))
            {
                using (var cmd = new SqlCommand("dbo.TT_AnhVideo_Upd", ctx.Connection))
                {
                    cmd.Transaction = ctx.Transaction;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@ID", ReadProperty(IDProperty)).DbType = DbType.Int64;
                    cmd.Parameters.AddWithValue("@IDSuKien", ReadProperty(IDSuKienProperty)).DbType = DbType.Int64;
                    cmd.Parameters.AddWithValue("@IDCanBo", ReadProperty(IDCanBoProperty)).DbType = DbType.Int64;
                    cmd.Parameters.AddWithValue("@Loai", ReadProperty(LoaiProperty) == null ? (object)DBNull.Value : ReadProperty(LoaiProperty).Value).DbType = DbType.Boolean;
                    cmd.Parameters.AddWithValue("@SoLuong", ReadProperty(SoLuongProperty) == null ? (object)DBNull.Value : ReadProperty(SoLuongProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@DuongDan", ReadProperty(DuongDanProperty) == null ? (object)DBNull.Value : ReadProperty(DuongDanProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@GhiChu", ReadProperty(GhiChuProperty) == null ? (object)DBNull.Value : ReadProperty(GhiChuProperty)).DbType = DbType.String;
                    var args = new DataPortalHookArgs(cmd);
                    OnUpdatePre(args);
                    cmd.ExecuteNonQuery();
                    OnUpdatePost(args);
                }
                ctx.Commit();
            }
        }

        /// <summary>
        /// Self deletes the <see cref="TT_AnhVideo"/> object.
        /// </summary>
        protected override void DataPortal_DeleteSelf()
        {
            DataPortal_Delete(ID);
        }

        /// <summary>
        /// Deletes the <see cref="TT_AnhVideo"/> object from database.
        /// </summary>
        /// <param name="id">The delete criteria.</param>
        protected void DataPortal_Delete(Int64 id)
        {
            using (var ctx = TransactionManager<SqlConnection, SqlTransaction>.GetManager("Connection"))
            {
                using (var cmd = new SqlCommand("dbo.TT_AnhVideo_Delete", ctx.Connection))
                {
                    cmd.Transaction = ctx.Transaction;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@ID", id).DbType = DbType.Int64;
                    var args = new DataPortalHookArgs(cmd, id);
                    OnDeletePre(args);
                    cmd.ExecuteNonQuery();
                    OnDeletePost(args);
                }
                ctx.Commit();
            }
        }

        #endregion

        #region Pseudo Events

        /// <summary>
        /// Occurs after setting all defaults for object creation.
        /// </summary>
        partial void OnCreate(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Delete, after setting query parameters and before the delete operation.
        /// </summary>
        partial void OnDeletePre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Delete, after the delete operation, before Commit().
        /// </summary>
        partial void OnDeletePost(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after setting query parameters and before the fetch operation.
        /// </summary>
        partial void OnFetchPre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after the fetch operation (object or collection is fully loaded and set up).
        /// </summary>
        partial void OnFetchPost(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after the low level fetch operation, before the data reader is destroyed.
        /// </summary>
        partial void OnFetchRead(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after setting query parameters and before the update operation.
        /// </summary>
        partial void OnUpdatePre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Insert, after the update operation, before setting back row identifiers (RowVersion) and Commit().
        /// </summary>
        partial void OnUpdatePost(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Insert, after setting query parameters and before the insert operation.
        /// </summary>
        partial void OnInsertPre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Insert, after the insert operation, before setting back row identifiers (ID and RowVersion) and Commit().
        /// </summary>
        partial void OnInsertPost(DataPortalHookArgs args);

        #endregion

    }
}
