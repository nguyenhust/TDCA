//  This file was generated by CSLA Object Generator - CslaGenFork v4.3.0
//
// Filename:    CDT_HopDongCGKT_Info
// ObjectType:  CDT_HopDongCGKT_Info
// CSLAType:    EditableChild

using System;
using System.Data;
using System.Data.SqlClient;
using Csla;
using Csla.Data;
using NETLINK.LIB;
namespace ModuleChiDaoTuyen.LIB
{

    /// <summary>
    /// CDT_HopDongCGKT_Info (editable child object).<br/>
    /// This is a generated base class of <see cref="CDT_HopDongCGKT_Info"/> business object.
    /// </summary>
    /// <remarks>
    /// This class is an item of <see cref="CDT_HopDongCGKT_Coll"/> collection.
    /// </remarks>
    [Serializable]
    public partial class CDT_HopDongCGKT_Info : BusinessBase<CDT_HopDongCGKT_Info>
    {

        #region Static Fields

        private static int _lastID;

        #endregion

        #region Business Properties

        /// <summary>
        /// Maintains metadata about <see cref="ID"/> property.
        /// </summary>
        public static readonly PropertyInfo<int> IDProperty = RegisterProperty<int>(p => p.ID, "ID");
        /// <summary>
        /// Gets the ID.
        /// </summary>
        /// <value>The ID.</value>
        public int ID
        {
            get { return GetProperty(IDProperty); }
        }
        public DateTime DateNgayKi
        {
            get { return GetProperty(NgayKiKetProperty); }
        }
        /// <summary>
        /// Maintains metadata about <see cref="NgayKiKet"/> property.
        /// </summary>
        public static readonly PropertyInfo<SmartDate> NgayKiKetProperty = RegisterProperty<SmartDate>(p => p.NgayKiKet, "Ngay Ki Ket");
        /// <summary>
        /// Gets or sets the Ngay Ki Ket.
        /// </summary>
        /// <value>The Ngay Ki Ket.</value>
        public string NgayKiKet
        {
            get { return GetPropertyConvert<SmartDate, String>(NgayKiKetProperty); }
            set { SetPropertyConvert<SmartDate, String>(NgayKiKetProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="A_Ten"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> A_TenProperty = RegisterProperty<string>(p => p.A_Ten, "A Ten");
        /// <summary>
        /// Gets or sets the A Ten.
        /// </summary>
        /// <value>The A Ten.</value>
        public string A_Ten
        {
            get { return GetProperty(A_TenProperty); }
            set { SetProperty(A_TenProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="A_Ten"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> TenBenhVienAProperty = RegisterProperty<string>(p => p.TenBenhVienA, "A TenBenhVienA");
        /// <summary>
        /// Gets or sets the A Ten.
        /// </summary>
        /// <value>The A Ten.</value>
        public string TenBenhVienA
        {
            get { return GetProperty(TenBenhVienAProperty); }
            set { SetProperty(TenBenhVienAProperty, value); }
        }
        /// <summary>
        /// Maintains metadata about <see cref="A_Ten"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> TenBenhVienBProperty = RegisterProperty<string>(p => p.TenBenhVienB, "A TenBenhVienB");
        /// <summary>
        /// Gets or sets the A Ten.
        /// </summary>
        /// <value>The A Ten.</value>
        public string TenBenhVienB
        {
            get { return GetProperty(TenBenhVienBProperty); }
            set { SetProperty(TenBenhVienBProperty, value); }
        }
        /// <summary>
        /// Maintains metadata about <see cref="A_NguoiDaiDien"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> A_NguoiDaiDienProperty = RegisterProperty<string>(p => p.A_NguoiDaiDien, "A Nguoi Dai Dien");
        /// <summary>
        /// Gets or sets the A Nguoi Dai Dien.
        /// </summary>
        /// <value>The A Nguoi Dai Dien.</value>
        public string A_NguoiDaiDien
        {
            get { return GetProperty(A_NguoiDaiDienProperty); }
            set { SetProperty(A_NguoiDaiDienProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="A_ChucVu"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> A_ChucVuProperty = RegisterProperty<string>(p => p.A_ChucVu, "A Chuc Vu");
        /// <summary>
        /// Gets or sets the A Chuc Vu.
        /// </summary>
        /// <value>The A Chuc Vu.</value>
        public string A_ChucVu
        {
            get { return GetProperty(A_ChucVuProperty); }
            set { SetProperty(A_ChucVuProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="A_DiaChi"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> A_DiaChiProperty = RegisterProperty<string>(p => p.A_DiaChi, "A Dia Chi");
        /// <summary>
        /// Gets or sets the A Dia Chi.
        /// </summary>
        /// <value>The A Dia Chi.</value>
        public string A_DiaChi
        {
            get { return GetProperty(A_DiaChiProperty); }
            set { SetProperty(A_DiaChiProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="A_DienThoai"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> A_DienThoaiProperty = RegisterProperty<string>(p => p.A_DienThoai, "A Dien Thoai");
        /// <summary>
        /// Gets or sets the A Dien Thoai.
        /// </summary>
        /// <value>The A Dien Thoai.</value>
        public string A_DienThoai
        {
            get { return GetProperty(A_DienThoaiProperty); }
            set { SetProperty(A_DienThoaiProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="A_Fax"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> A_FaxProperty = RegisterProperty<string>(p => p.A_Fax, "A Fax");
        /// <summary>
        /// Gets or sets the A Fax.
        /// </summary>
        /// <value>The A Fax.</value>
        public string A_Fax
        {
            get { return GetProperty(A_FaxProperty); }
            set { SetProperty(A_FaxProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="B_Ten"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> B_TenProperty = RegisterProperty<string>(p => p.B_Ten, "B Ten");
        /// <summary>
        /// Gets or sets the B Ten.
        /// </summary>
        /// <value>The B Ten.</value>
        public string B_Ten
        {
            get { return GetProperty(B_TenProperty); }
            set { SetProperty(B_TenProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="B_NguoiDaiDien"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> B_NguoiDaiDienProperty = RegisterProperty<string>(p => p.B_NguoiDaiDien, "B Nguoi Dai Dien");
        /// <summary>
        /// Gets or sets the B Nguoi Dai Dien.
        /// </summary>
        /// <value>The B Nguoi Dai Dien.</value>
        public string B_NguoiDaiDien
        {
            get { return GetProperty(B_NguoiDaiDienProperty); }
            set { SetProperty(B_NguoiDaiDienProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="B_ChucVu"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> B_ChucVuProperty = RegisterProperty<string>(p => p.B_ChucVu, "B Chuc Vu");
        /// <summary>
        /// Gets or sets the B Chuc Vu.
        /// </summary>
        /// <value>The B Chuc Vu.</value>
        public string B_ChucVu
        {
            get { return GetProperty(B_ChucVuProperty); }
            set { SetProperty(B_ChucVuProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="B_DienThoai"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> B_DienThoaiProperty = RegisterProperty<string>(p => p.B_DienThoai, "B Dien Thoai");
        /// <summary>
        /// Gets or sets the B Dien Thoai.
        /// </summary>
        /// <value>The B Dien Thoai.</value>
        public string B_DienThoai
        {
            get { return GetProperty(B_DienThoaiProperty); }
            set { SetProperty(B_DienThoaiProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="B_Fax"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> B_FaxProperty = RegisterProperty<string>(p => p.B_Fax, "B Fax");
        /// <summary>
        /// Gets or sets the B Fax.
        /// </summary>
        /// <value>The B Fax.</value>
        public string B_Fax
        {
            get { return GetProperty(B_FaxProperty); }
            set { SetProperty(B_FaxProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="B_DiaChi"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> B_DiaChiProperty = RegisterProperty<string>(p => p.B_DiaChi, "B Dia Chi");
        /// <summary>
        /// Gets or sets the B Dia Chi.
        /// </summary>
        /// <value>The B Dia Chi.</value>
        public string B_DiaChi
        {
            get { return GetProperty(B_DiaChiProperty); }
            set { SetProperty(B_DiaChiProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="A_City"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> A_CityProperty = RegisterProperty<string>(p => p.A_City, "A City");
        /// <summary>
        /// Gets or sets the A City.
        /// </summary>
        /// <value>The A City.</value>
        public string A_City
        {
            get { return GetProperty(A_CityProperty); }
            set { SetProperty(A_CityProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="B_City"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> B_CityProperty = RegisterProperty<string>(p => p.B_City, "B City");
        /// <summary>
        /// Gets or sets the B City.
        /// </summary>
        /// <value>The B City.</value>
        public string B_City
        {
            get { return GetProperty(B_CityProperty); }
            set { SetProperty(B_CityProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="GhiChu"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> GhiChuProperty = RegisterProperty<string>(p => p.GhiChu, "Ghi Chu");
        /// <summary>
        /// Gets or sets the Ghi Chu.
        /// </summary>
        /// <value>The Ghi Chu.</value>
        public string GhiChu
        {
            get { return GetProperty(GhiChuProperty); }
            set { SetProperty(GhiChuProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="B_idBenhVien"/> property.
        /// </summary>
        public static readonly PropertyInfo<Int64?> B_idBenhVienProperty = RegisterProperty<Int64?>(p => p.B_idBenhVien, "B_id Benh Vien");
        /// <summary>
        /// Gets or sets the B_id Benh Vien.
        /// </summary>
        /// <value>The B_id Benh Vien.</value>
        public Int64? B_idBenhVien
        {
            get { return GetProperty(B_idBenhVienProperty); }
            set { SetProperty(B_idBenhVienProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="A_idBenhVien"/> property.
        /// </summary>
        public static readonly PropertyInfo<Int64?> A_idBenhVienProperty = RegisterProperty<Int64?>(p => p.A_idBenhVien, "A_id Benh Vien");
        /// <summary>
        /// Gets or sets the A_id Benh Vien.
        /// </summary>
        /// <value>The A_id Benh Vien.</value>
        public Int64? A_idBenhVien
        {
            get { return GetProperty(A_idBenhVienProperty); }
            set { SetProperty(A_idBenhVienProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="DaThanhLy"/> property.
        /// </summary>
        public static readonly PropertyInfo<bool?> DaThanhLyProperty = RegisterProperty<bool?>(p => p.DaThanhLy, "Da Thanh Ly");
        /// <summary>
        /// Gets or sets the Da Thanh Ly.
        /// </summary>
        /// <value><c>true</c> if Da Thanh Ly; <c>false</c> if not Da Thanh Ly; otherwise, <c>null</c>.</value>
        public bool? DaThanhLy
        {
            get { return GetProperty(DaThanhLyProperty); }
            set { SetProperty(DaThanhLyProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="LastEdited_UserID"/> property.
        /// </summary>
        public static readonly PropertyInfo<Int64?> LastEdited_UserIDProperty = RegisterProperty<Int64?>(p => p.LastEdited_UserID, "Last Edited User ID");
        /// <summary>
        /// Gets or sets the Last Edited User ID.
        /// </summary>
        /// <value>The Last Edited User ID.</value>
        public Int64? LastEdited_UserID
        {
            get { return GetProperty(LastEdited_UserIDProperty); }
            set { SetProperty(LastEdited_UserIDProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="LastEdited_Date"/> property.
        /// </summary>
        public static readonly PropertyInfo<SmartDate> LastEdited_DateProperty = RegisterProperty<SmartDate>(p => p.LastEdited_Date, "Last Edited Date");
        /// <summary>
        /// Gets or sets the Last Edited Date.
        /// </summary>
        /// <value>The Last Edited Date.</value>
        public string LastEdited_Date
        {
            get { return GetPropertyConvert<SmartDate, String>(LastEdited_DateProperty); }
            set { SetPropertyConvert<SmartDate, String>(LastEdited_DateProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="Backup01"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> Backup01Property = RegisterProperty<string>(p => p.Backup01, "Backup01");
        /// <summary>
        /// Gets or sets the Backup01.
        /// </summary>
        /// <value>The Backup01.</value>
        public string Backup01
        {
            get { return GetProperty(Backup01Property); }
            set { SetProperty(Backup01Property, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="Backup02"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> Backup02Property = RegisterProperty<string>(p => p.Backup02, "Backup02");
        /// <summary>
        /// Gets or sets the Backup02.
        /// </summary>
        /// <value>The Backup02.</value>
        public string Backup02
        {
            get { return GetProperty(Backup02Property); }
            set { SetProperty(Backup02Property, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="Backup03"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> Backup03Property = RegisterProperty<string>(p => p.Backup03, "Backup03");
        /// <summary>
        /// Gets or sets the Backup03.
        /// </summary>
        /// <value>The Backup03.</value>
        public string Backup03
        {
            get { return GetProperty(Backup03Property); }
            set { SetProperty(Backup03Property, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="Backup04"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> Backup04Property = RegisterProperty<string>(p => p.Backup04, "Backup04");
        /// <summary>
        /// Gets or sets the Backup04.
        /// </summary>
        /// <value>The Backup04.</value>
        public string Backup04
        {
            get { return GetProperty(Backup04Property); }
            set { SetProperty(Backup04Property, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="MaHopDong"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> MaHopDongProperty = RegisterProperty<string>(p => p.MaHopDong, "Ma Hop Dong");
        /// <summary>
        /// Gets or sets the Ma Hop Dong.
        /// </summary>
        /// <value>The Ma Hop Dong.</value>
        public string MaHopDong
        {
            get { return GetProperty(MaHopDongProperty); }
            set { SetProperty(MaHopDongProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="LinkFile"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> LinkFileProperty = RegisterProperty<string>(p => p.LinkFile, "Link File");
        /// <summary>
        /// Gets or sets the Link File.
        /// </summary>
        /// <value>The Link File.</value>
        public string LinkFile
        {
            get { return GetProperty(LinkFileProperty); }
            set { SetProperty(LinkFileProperty, value); }
        }

        #endregion

        #region Factory Methods

        /// <summary>
        /// Factory method. Creates a new <see cref="CDT_HopDongCGKT_Info"/> object.
        /// </summary>
        /// <returns>A reference to the created <see cref="CDT_HopDongCGKT_Info"/> object.</returns>
        internal static CDT_HopDongCGKT_Info NewCDT_HopDongCGKT_Info()
        {
            return DataPortal.CreateChild<CDT_HopDongCGKT_Info>();
        }

        /// <summary>
        /// Factory method. Asynchronously creates a new <see cref="CDT_HopDongCGKT_Info"/> object.
        /// </summary>
        /// <param name="callback">The completion callback method.</param>
        internal static void NewCDT_HopDongCGKT_Info(EventHandler<DataPortalResult<CDT_HopDongCGKT_Info>> callback)
        {
            DataPortal.BeginCreate<CDT_HopDongCGKT_Info>(callback);
        }

        /// <summary>
        /// Factory method. Loads a <see cref="CDT_HopDongCGKT_Info"/> object from the given SafeDataReader.
        /// </summary>
        /// <param name="dr">The SafeDataReader to use.</param>
        /// <returns>A reference to the fetched <see cref="CDT_HopDongCGKT_Info"/> object.</returns>
        internal static CDT_HopDongCGKT_Info GetCDT_HopDongCGKT_Info(SafeDataReader dr)
        {
            CDT_HopDongCGKT_Info obj = new CDT_HopDongCGKT_Info();
            // show the framework that this is a child object
            obj.MarkAsChild();
            obj.Fetch(dr);
            obj.MarkOld();
            // check all object rules and property rules
            obj.BusinessRules.CheckRules();
            return obj;
        }

        #endregion

        #region Constructor

        /// <summary>
        /// Initializes a new instance of the <see cref="CDT_HopDongCGKT_Info"/> class.
        /// </summary>
        /// <remarks> Do not use to create a Csla object. Use factory methods instead.</remarks>
        private CDT_HopDongCGKT_Info()
        {
            // Prevent direct creation

            // show the framework that this is a child object
            MarkAsChild();
        }

        #endregion

        #region Data Access

        /// <summary>
        /// Loads default values for the <see cref="CDT_HopDongCGKT_Info"/> object properties.
        /// </summary>
        [Csla.RunLocal]
        protected override void Child_Create()
        {
            LoadProperty(IDProperty, System.Threading.Interlocked.Decrement(ref _lastID));
            LoadProperty(NgayKiKetProperty, null);
            LoadProperty(A_TenProperty, null);
            LoadProperty(A_NguoiDaiDienProperty, null);
            LoadProperty(A_ChucVuProperty, null);
            LoadProperty(A_DiaChiProperty, null);
            LoadProperty(A_DienThoaiProperty, null);
            LoadProperty(A_FaxProperty, null);
            LoadProperty(B_TenProperty, null);
            LoadProperty(B_NguoiDaiDienProperty, null);
            LoadProperty(B_ChucVuProperty, null);
            LoadProperty(B_DienThoaiProperty, null);
            LoadProperty(B_FaxProperty, null);
            LoadProperty(B_DiaChiProperty, null);
            LoadProperty(A_CityProperty, null);
            LoadProperty(B_CityProperty, null);
            LoadProperty(GhiChuProperty, null);
            LoadProperty(LastEdited_DateProperty, null);
            LoadProperty(Backup01Property, null);
            LoadProperty(Backup02Property, null);
            LoadProperty(Backup03Property, null);
            LoadProperty(Backup04Property, null);
            LoadProperty(MaHopDongProperty, null);
            LoadProperty(LinkFileProperty, null);
            LoadProperty(TenBenhVienAProperty, null);
            LoadProperty(TenBenhVienBProperty, null);
            var args = new DataPortalHookArgs();
            OnCreate(args);
            base.Child_Create();
        }

        /// <summary>
        /// Loads a <see cref="CDT_HopDongCGKT_Info"/> object from the given SafeDataReader.
        /// </summary>
        /// <param name="dr">The SafeDataReader to use.</param>
        private void Fetch(SafeDataReader dr)
        {
            // Value properties
            LoadProperty(IDProperty, dr.GetInt32("ID"));
            LoadProperty(NgayKiKetProperty, dr.GetDateTime("NgayKiKet"));
            LoadProperty(A_TenProperty, dr.GetString("A_Ten"));
            LoadProperty(A_NguoiDaiDienProperty, dr.GetString("A_NguoiDaiDien"));
            LoadProperty(A_ChucVuProperty, dr.GetString("A_ChucVu"));
            LoadProperty(A_DiaChiProperty, dr.GetString("A_DiaChi"));
            LoadProperty(A_DienThoaiProperty, dr.GetString("A_DienThoai"));
            LoadProperty(A_FaxProperty, dr.GetString("A_Fax"));
            LoadProperty(B_TenProperty, dr.GetString("B_Ten"));
            LoadProperty(B_NguoiDaiDienProperty, dr.GetString("B_NguoiDaiDien"));
            LoadProperty(B_ChucVuProperty, dr.GetString("B_ChucVu"));
            LoadProperty(B_DienThoaiProperty, dr.GetString("B_DienThoai"));
            LoadProperty(B_FaxProperty, dr.GetString("B_Fax"));
            LoadProperty(B_DiaChiProperty, dr.GetString("B_DiaChi"));
            LoadProperty(A_CityProperty, dr.GetString("A_City"));
            LoadProperty(B_CityProperty, dr.GetString("B_City"));
            LoadProperty(GhiChuProperty, dr.GetString("GhiChu"));
            LoadProperty(B_idBenhVienProperty, dr.GetInt64("B_idBenhVien"));
            LoadProperty(A_idBenhVienProperty, dr.GetInt64("A_idBenhVien"));
            LoadProperty(DaThanhLyProperty, dr.GetBoolean("DaThanhLy"));
            LoadProperty(Backup04Property, dr.GetString("Backup04"));
            LoadProperty(LastEdited_UserIDProperty, dr.GetInt64("LastEdited_UserID"));
            LoadProperty(LastEdited_DateProperty, dr.GetSmartDate("LastEdited_Date"));
            LoadProperty(Backup01Property, dr.GetString("Backup01"));
            LoadProperty(Backup02Property, dr.GetString("Backup02"));
            LoadProperty(Backup03Property, dr.GetString("Backup03"));
            LoadProperty(LinkFileProperty, dr.GetString("LinkFile"));
            LoadProperty(TenBenhVienAProperty, dr.GetString("TenBenhVienA"));
            LoadProperty(TenBenhVienBProperty, dr.GetString("TenBenhVienB"));
            LoadProperty(MaHopDongProperty, dr.GetString("MaHopDong"));
            var args = new DataPortalHookArgs(dr);
            OnFetchRead(args);
        }

        /// <summary>
        /// Inserts a new <see cref="CDT_HopDongCGKT_Info"/> object in the database.
        /// </summary>
        private void Child_Insert()
        {
            using (var ctx = TransactionManager<SqlConnection, SqlTransaction>.GetManager("Connection"))
            {
                using (var cmd = new SqlCommand("dbo.CDT_HopDongCGKT_Info_add", ctx.Connection))
                {
                    cmd.Transaction = ctx.Transaction;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@ID", ReadProperty(IDProperty)).Direction = ParameterDirection.Output;
                    cmd.Parameters.AddWithValue("@NgayKiKet", ReadProperty(NgayKiKetProperty).DBValue).DbType = DbType.DateTime;
                    cmd.Parameters.AddWithValue("@A_Ten", ReadProperty(A_TenProperty) == null ? (object)DBNull.Value : ReadProperty(A_TenProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@A_NguoiDaiDien", ReadProperty(A_NguoiDaiDienProperty) == null ? (object)DBNull.Value : ReadProperty(A_NguoiDaiDienProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@A_ChucVu", ReadProperty(A_ChucVuProperty) == null ? (object)DBNull.Value : ReadProperty(A_ChucVuProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@A_DiaChi", ReadProperty(A_DiaChiProperty) == null ? (object)DBNull.Value : ReadProperty(A_DiaChiProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@A_DienThoai", ReadProperty(A_DienThoaiProperty) == null ? (object)DBNull.Value : ReadProperty(A_DienThoaiProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@A_Fax", ReadProperty(A_FaxProperty) == null ? (object)DBNull.Value : ReadProperty(A_FaxProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@B_Ten", ReadProperty(B_TenProperty) == null ? (object)DBNull.Value : ReadProperty(B_TenProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@B_NguoiDaiDien", ReadProperty(B_NguoiDaiDienProperty) == null ? (object)DBNull.Value : ReadProperty(B_NguoiDaiDienProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@B_ChucVu", ReadProperty(B_ChucVuProperty) == null ? (object)DBNull.Value : ReadProperty(B_ChucVuProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@B_DienThoai", ReadProperty(B_DienThoaiProperty) == null ? (object)DBNull.Value : ReadProperty(B_DienThoaiProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@B_Fax", ReadProperty(B_FaxProperty) == null ? (object)DBNull.Value : ReadProperty(B_FaxProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@B_DiaChi", ReadProperty(B_DiaChiProperty) == null ? (object)DBNull.Value : ReadProperty(B_DiaChiProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@A_City", ReadProperty(A_CityProperty) == null ? (object)DBNull.Value : ReadProperty(A_CityProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@B_City", ReadProperty(B_CityProperty) == null ? (object)DBNull.Value : ReadProperty(B_CityProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@GhiChu", ReadProperty(GhiChuProperty) == null ? (object)DBNull.Value : ReadProperty(GhiChuProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@B_idBenhVien", ReadProperty(B_idBenhVienProperty) == null ? (object)DBNull.Value : ReadProperty(B_idBenhVienProperty).Value).DbType = DbType.Int64;
                    cmd.Parameters.AddWithValue("@A_idBenhVien", ReadProperty(A_idBenhVienProperty) == null ? (object)DBNull.Value : ReadProperty(A_idBenhVienProperty).Value).DbType = DbType.Int64;
                    cmd.Parameters.AddWithValue("@DaThanhLy", ReadProperty(DaThanhLyProperty) == null ? (object)DBNull.Value : ReadProperty(DaThanhLyProperty).Value).DbType = DbType.Boolean;
                    cmd.Parameters.AddWithValue("@LastEdited_UserID", ReadProperty(LastEdited_UserIDProperty) == null ? (object)DBNull.Value : ReadProperty(LastEdited_UserIDProperty).Value).DbType = DbType.Int64;
                    cmd.Parameters.AddWithValue("@LastEdited_Date", ReadProperty(LastEdited_DateProperty).DBValue).DbType = DbType.DateTime;
                    cmd.Parameters.AddWithValue("@Backup01", ReadProperty(Backup01Property) == null ? (object)DBNull.Value : ReadProperty(Backup01Property)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@Backup02", ReadProperty(Backup02Property) == null ? (object)DBNull.Value : ReadProperty(Backup02Property)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@Backup03", ReadProperty(Backup03Property) == null ? (object)DBNull.Value : ReadProperty(Backup03Property)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@Backup04", ReadProperty(Backup04Property) == null ? (object)DBNull.Value : ReadProperty(Backup04Property)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@MaHopDong", ReadProperty(MaHopDongProperty) == null ? (object)DBNull.Value : ReadProperty(MaHopDongProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@LinkFile", ReadProperty(LinkFileProperty) == null ? (object)DBNull.Value : ReadProperty(LinkFileProperty)).DbType = DbType.String;
                    var args = new DataPortalHookArgs(cmd);
                    OnInsertPre(args);
                    cmd.ExecuteNonQuery();
                    OnInsertPost(args);
                    LoadProperty(IDProperty, (int) cmd.Parameters["@ID"].Value);
                }
            }
        }

        /// <summary>
        /// Updates in the database all changes made to the <see cref="CDT_HopDongCGKT_Info"/> object.
        /// </summary>
        private void Child_Update()
        {
            if (!IsDirty)
                return;

            using (var ctx = TransactionManager<SqlConnection, SqlTransaction>.GetManager("Connection"))
            {
                using (var cmd = new SqlCommand("dbo.CDT_HopDongCGKT_Info_update", ctx.Connection))
                {
                    cmd.Transaction = ctx.Transaction;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@ID", ReadProperty(IDProperty)).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@NgayKiKet", ReadProperty(NgayKiKetProperty).DBValue).DbType = DbType.DateTime;
                    cmd.Parameters.AddWithValue("@A_Ten", ReadProperty(A_TenProperty) == null ? (object)DBNull.Value : ReadProperty(A_TenProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@A_NguoiDaiDien", ReadProperty(A_NguoiDaiDienProperty) == null ? (object)DBNull.Value : ReadProperty(A_NguoiDaiDienProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@A_ChucVu", ReadProperty(A_ChucVuProperty) == null ? (object)DBNull.Value : ReadProperty(A_ChucVuProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@A_DiaChi", ReadProperty(A_DiaChiProperty) == null ? (object)DBNull.Value : ReadProperty(A_DiaChiProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@A_DienThoai", ReadProperty(A_DienThoaiProperty) == null ? (object)DBNull.Value : ReadProperty(A_DienThoaiProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@A_Fax", ReadProperty(A_FaxProperty) == null ? (object)DBNull.Value : ReadProperty(A_FaxProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@B_Ten", ReadProperty(B_TenProperty) == null ? (object)DBNull.Value : ReadProperty(B_TenProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@B_NguoiDaiDien", ReadProperty(B_NguoiDaiDienProperty) == null ? (object)DBNull.Value : ReadProperty(B_NguoiDaiDienProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@B_ChucVu", ReadProperty(B_ChucVuProperty) == null ? (object)DBNull.Value : ReadProperty(B_ChucVuProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@B_DienThoai", ReadProperty(B_DienThoaiProperty) == null ? (object)DBNull.Value : ReadProperty(B_DienThoaiProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@B_Fax", ReadProperty(B_FaxProperty) == null ? (object)DBNull.Value : ReadProperty(B_FaxProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@B_DiaChi", ReadProperty(B_DiaChiProperty) == null ? (object)DBNull.Value : ReadProperty(B_DiaChiProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@A_City", ReadProperty(A_CityProperty) == null ? (object)DBNull.Value : ReadProperty(A_CityProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@B_City", ReadProperty(B_CityProperty) == null ? (object)DBNull.Value : ReadProperty(B_CityProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@GhiChu", ReadProperty(GhiChuProperty) == null ? (object)DBNull.Value : ReadProperty(GhiChuProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@B_idBenhVien", ReadProperty(B_idBenhVienProperty) == null ? (object)DBNull.Value : ReadProperty(B_idBenhVienProperty).Value).DbType = DbType.Int64;
                    cmd.Parameters.AddWithValue("@A_idBenhVien", ReadProperty(A_idBenhVienProperty) == null ? (object)DBNull.Value : ReadProperty(A_idBenhVienProperty).Value).DbType = DbType.Int64;
                    cmd.Parameters.AddWithValue("@DaThanhLy", ReadProperty(DaThanhLyProperty) == null ? (object)DBNull.Value : ReadProperty(DaThanhLyProperty).Value).DbType = DbType.Boolean;
                    cmd.Parameters.AddWithValue("@LastEdited_UserID", ReadProperty(LastEdited_UserIDProperty) == null ? (object)DBNull.Value : ReadProperty(LastEdited_UserIDProperty).Value).DbType = DbType.Int64;
                    cmd.Parameters.AddWithValue("@LastEdited_Date", ReadProperty(LastEdited_DateProperty).DBValue).DbType = DbType.DateTime;
                    cmd.Parameters.AddWithValue("@Backup01", ReadProperty(Backup01Property) == null ? (object)DBNull.Value : ReadProperty(Backup01Property)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@Backup02", ReadProperty(Backup02Property) == null ? (object)DBNull.Value : ReadProperty(Backup02Property)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@Backup03", ReadProperty(Backup03Property) == null ? (object)DBNull.Value : ReadProperty(Backup03Property)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@Backup04", ReadProperty(Backup04Property) == null ? (object)DBNull.Value : ReadProperty(Backup04Property)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@MaHopDong", ReadProperty(MaHopDongProperty) == null ? (object)DBNull.Value : ReadProperty(MaHopDongProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@LinkFile", ReadProperty(LinkFileProperty) == null ? (object)DBNull.Value : ReadProperty(LinkFileProperty)).DbType = DbType.String;
                    var args = new DataPortalHookArgs(cmd);
                    OnUpdatePre(args);
                    cmd.ExecuteNonQuery();
                    OnUpdatePost(args);
                }
            }
        }

        /// <summary>
        /// Self deletes the <see cref="CDT_HopDongCGKT_Info"/> object from database.
        /// </summary>
        private void Child_DeleteSelf()
        {
            using (var ctx = TransactionManager<SqlConnection, SqlTransaction>.GetManager("Connection"))
            {
                using (var cmd = new SqlCommand("dbo.CDT_HopDongCGKT_Info_delete", ctx.Connection))
                {
                    cmd.Transaction = ctx.Transaction;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@ID", ReadProperty(IDProperty)).DbType = DbType.Int32;
                    var args = new DataPortalHookArgs(cmd);
                    OnDeletePre(args);
                    cmd.ExecuteNonQuery();
                    OnDeletePost(args);
                }
            }
        }

        #endregion

        #region Pseudo Events

        /// <summary>
        /// Occurs after setting all defaults for object creation.
        /// </summary>
        partial void OnCreate(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Delete, after setting query parameters and before the delete operation.
        /// </summary>
        partial void OnDeletePre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Delete, after the delete operation, before Commit().
        /// </summary>
        partial void OnDeletePost(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after setting query parameters and before the fetch operation.
        /// </summary>
        partial void OnFetchPre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after the fetch operation (object or collection is fully loaded and set up).
        /// </summary>
        partial void OnFetchPost(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after the low level fetch operation, before the data reader is destroyed.
        /// </summary>
        partial void OnFetchRead(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after setting query parameters and before the update operation.
        /// </summary>
        partial void OnUpdatePre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Insert, after the update operation, before setting back row identifiers (RowVersion) and Commit().
        /// </summary>
        partial void OnUpdatePost(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Insert, after setting query parameters and before the insert operation.
        /// </summary>
        partial void OnInsertPre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Insert, after the insert operation, before setting back row identifiers (ID and RowVersion) and Commit().
        /// </summary>
        partial void OnInsertPost(DataPortalHookArgs args);

        #endregion

    }
}
