//  This file was generated by CSLA Object Generator - CslaGenFork v4.3.0
//
// Filename:    DIC_CanBo_Info
// ObjectType:  DIC_CanBo_Info
// CSLAType:    EditableChild

using System;
using System.Data;
using System.Data.SqlClient;
using Csla;
using Csla.Data;
using NETLINK.LIB;

namespace DanhMuc.LIB
{

    /// <summary>
    /// DIC_CanBo_Info (editable child object).<br/>
    /// This is a generated base class of <see cref="DIC_CanBo_Info"/> business object.
    /// </summary>
    /// <remarks>
    /// This class is an item of <see cref="DIC_CanBo_Coll"/> collection.
    /// </remarks>
    [Serializable]
    public partial class DIC_CanBo_Info : BusinessBase<DIC_CanBo_Info>
    {

        #region Static Fields

        private static Int64 _lastID;

        #endregion

        #region Business Properties

        /// <summary>
        /// Maintains metadata about <see cref="ID"/> property.
        /// </summary>
        public static readonly PropertyInfo<Int64> IDProperty = RegisterProperty<Int64>(p => p.ID, "ID");
        /// <summary>
        /// Gets the ID.
        /// </summary>
        /// <value>The ID.</value>
        public Int64 ID
        {
            get { return GetProperty(IDProperty); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="HoTen"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> HoTenProperty = RegisterProperty<string>(p => p.HoTen, "Ho Ten");
        /// <summary>
        /// Gets or sets the Ho Ten.
        /// </summary>
        /// <value>The Ho Ten.</value>
        public string HoTen
        {
            get { return GetProperty(HoTenProperty); }
            set { SetProperty(HoTenProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="GioiTinh"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> GioiTinhProperty = RegisterProperty<string>(p => p.GioiTinh, "Gioi Tinh");
        /// <summary>
        /// Gets or sets the Gioi Tinh.
        /// </summary>
        /// <value>The Gioi Tinh.</value>
        public string GioiTinh
        {
            get { return GetProperty(GioiTinhProperty); }
            set { SetProperty(GioiTinhProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="NgaySinh"/> property.
        /// </summary>
        public static readonly PropertyInfo<SmartDate> NgaySinhProperty = RegisterProperty<SmartDate>(p => p.NgaySinh, "Ngay Sinh");
        /// <summary>
        /// Gets or sets the Ngay Sinh.
        /// </summary>
        /// <value>The Ngay Sinh.</value>
        public string NgaySinh
        {
            get { return GetPropertyConvert<SmartDate, String>(NgaySinhProperty); }
            set { SetPropertyConvert<SmartDate, String>(NgaySinhProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="IDTinh"/> property.
        /// </summary>
        public static readonly PropertyInfo<Int64?> IDTinhProperty = RegisterProperty<Int64?>(p => p.IDTinh, "IDTinh");
        /// <summary>
        /// Gets or sets the IDTinh.
        /// </summary>
        /// <value>The IDTinh.</value>
        public Int64? IDTinh
        {
            get { return GetProperty(IDTinhProperty); }
            set { SetProperty(IDTinhProperty, value); }
        }
        /// <summary>
        /// Maintains metadata about <see cref="IDTinh"/> property.
        /// </summary>
        public static readonly PropertyInfo<Int64?> IDUserProperty = RegisterProperty<Int64?>(p => p.IDUser, "IDUser");
        /// <summary>
        /// Gets or sets the IDTinh.
        /// </summary>
        /// <value>The IDTinh.</value>
        public Int64? IDUser
        {
            get { return GetProperty(IDUserProperty); }
            set { SetProperty(IDUserProperty, value); }
        }
        /// <summary>
        /// Maintains metadata about <see cref="ChoOHiennay"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> ChoOHiennayProperty = RegisterProperty<string>(p => p.ChoOHiennay, "Cho OHiennay");
        /// <summary>
        /// Gets or sets the Cho OHiennay.
        /// </summary>
        /// <value>The Cho OHiennay.</value>
        public string ChoOHiennay
        {
            get { return GetProperty(ChoOHiennayProperty); }
            set { SetProperty(ChoOHiennayProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="QuocGia"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> QuocGiaProperty = RegisterProperty<string>(p => p.QuocGia, "Quoc Gia");
        /// <summary>
        /// Gets or sets the Quoc Gia.
        /// </summary>
        /// <value>The Quoc Gia.</value>
        public string QuocGia
        {
            get { return GetProperty(QuocGiaProperty); }
            set { SetProperty(QuocGiaProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="NgayVaoDang"/> property.
        /// </summary>
        public static readonly PropertyInfo<SmartDate> NgayVaoDangProperty = RegisterProperty<SmartDate>(p => p.NgayVaoDang, "Ngay Vao Dang");
        /// <summary>
        /// Gets or sets the Ngay Vao Dang.
        /// </summary>
        /// <value>The Ngay Vao Dang.</value>
        public string NgayVaoDang
        {
            get { return GetPropertyConvert<SmartDate, String>(NgayVaoDangProperty); }
            set { SetPropertyConvert<SmartDate, String>(NgayVaoDangProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="IDTrinhDo"/> property.
        /// </summary>
        public static readonly PropertyInfo<int?> IDTrinhDoProperty = RegisterProperty<int?>(p => p.IDTrinhDo, "IDTrinh Do");
        /// <summary>
        /// Gets or sets the IDTrinh Do.
        /// </summary>
        /// <value>The IDTrinh Do.</value>
        public int? IDTrinhDo
        {
            get { return GetProperty(IDTrinhDoProperty); }
            set { SetProperty(IDTrinhDoProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="IDCoQuan"/> property.
        /// </summary>
        public static readonly PropertyInfo<int?> IDCoQuanProperty = RegisterProperty<int?>(p => p.IDCoQuan, "IDCo Quan");
        /// <summary>
        /// Gets or sets the IDCo Quan.
        /// </summary>
        /// <value>The IDCo Quan.</value>
        public int? IDCoQuan
        {
            get { return GetProperty(IDCoQuanProperty); }
            set { SetProperty(IDCoQuanProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="IDChucVu"/> property.
        /// </summary>
        public static readonly PropertyInfo<int?> IDChucVuProperty = RegisterProperty<int?>(p => p.IDChucVu, "IDChuc Vu");
        /// <summary>
        /// Gets or sets the IDChuc Vu.
        /// </summary>
        /// <value>The IDChuc Vu.</value>
        public int? IDChucVu
        {
            get { return GetProperty(IDChucVuProperty); }
            set { SetProperty(IDChucVuProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="QTDaoTao"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> QTDaoTaoProperty = RegisterProperty<string>(p => p.QTDaoTao, "QTDao Tao");
        /// <summary>
        /// Gets or sets the QTDao Tao.
        /// </summary>
        /// <value>The QTDao Tao.</value>
        public string QTDaoTao
        {
            get { return GetProperty(QTDaoTaoProperty); }
            set { SetProperty(QTDaoTaoProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="QTCongTac"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> QTCongTacProperty = RegisterProperty<string>(p => p.QTCongTac, "QTCong Tac");
        /// <summary>
        /// Gets or sets the QTCong Tac.
        /// </summary>
        /// <value>The QTCong Tac.</value>
        public string QTCongTac
        {
            get { return GetProperty(QTCongTacProperty); }
            set { SetProperty(QTCongTacProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="KinhNghiemNN"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> KinhNghiemNNProperty = RegisterProperty<string>(p => p.KinhNghiemNN, "Kinh Nghiem NN");
        /// <summary>
        /// Gets or sets the Kinh Nghiem NN.
        /// </summary>
        /// <value>The Kinh Nghiem NN.</value>
        public string KinhNghiemNN
        {
            get { return GetProperty(KinhNghiemNNProperty); }
            set { SetProperty(KinhNghiemNNProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="NghienCuuTGia"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> NghienCuuTGiaProperty = RegisterProperty<string>(p => p.NghienCuuTGia, "Nghien Cuu TGia");
        /// <summary>
        /// Gets or sets the Nghien Cuu TGia.
        /// </summary>
        /// <value>The Nghien Cuu TGia.</value>
        public string NghienCuuTGia
        {
            get { return GetProperty(NghienCuuTGiaProperty); }
            set { SetProperty(NghienCuuTGiaProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="NgoaiNguTinHoc"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> NgoaiNguTinHocProperty = RegisterProperty<string>(p => p.NgoaiNguTinHoc, "Ngoai Ngu Tin Hoc");
        /// <summary>
        /// Gets or sets the Ngoai Ngu Tin Hoc.
        /// </summary>
        /// <value>The Ngoai Ngu Tin Hoc.</value>
        public string NgoaiNguTinHoc
        {
            get { return GetProperty(NgoaiNguTinHocProperty); }
            set { SetProperty(NgoaiNguTinHocProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="KhenThuongKyLuat"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> KhenThuongKyLuatProperty = RegisterProperty<string>(p => p.KhenThuongKyLuat, "Khen Thuong Ky Luat");
        /// <summary>
        /// Gets or sets the Khen Thuong Ky Luat.
        /// </summary>
        /// <value>The Khen Thuong Ky Luat.</value>
        public string KhenThuongKyLuat
        {
            get { return GetProperty(KhenThuongKyLuatProperty); }
            set { SetProperty(KhenThuongKyLuatProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="HTapNCuuNNgoai"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> HTapNCuuNNgoaiProperty = RegisterProperty<string>(p => p.HTapNCuuNNgoai, "HTap NCuu NNgoai");
        /// <summary>
        /// Gets or sets the HTap NCuu NNgoai.
        /// </summary>
        /// <value>The HTap NCuu NNgoai.</value>
        public string HTapNCuuNNgoai
        {
            get { return GetProperty(HTapNCuuNNgoaiProperty); }
            set { SetProperty(HTapNCuuNNgoaiProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="IDBoPhan"/> property.
        /// </summary>
        public static readonly PropertyInfo<int?> IDBoPhanProperty = RegisterProperty<int?>(p => p.IDBoPhan, "IDBo Phan");
        /// <summary>
        /// Gets or sets the IDBo Phan.
        /// </summary>
        /// <value>The IDBo Phan.</value>
        public int? IDBoPhan
        {
            get { return GetProperty(IDBoPhanProperty); }
            set { SetProperty(IDBoPhanProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="MaNhanVien"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> MaNhanVienProperty = RegisterProperty<string>(p => p.MaNhanVien, "Ma Nhan Vien");
        /// <summary>
        /// Gets or sets the Ma Nhan Vien.
        /// </summary>
        /// <value>The Ma Nhan Vien.</value>
        public string MaNhanVien
        {
            get { return GetProperty(MaNhanVienProperty); }
            set { SetProperty(MaNhanVienProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="MaNhanVienTheoMayCC"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> MaNhanVienTheoMayCCProperty = RegisterProperty<string>(p => p.MaNhanVienTheoMayCC, "Ma Nhan Vien Theo May CC");
        /// <summary>
        /// Gets or sets the Ma Nhan Vien Theo May CC.
        /// </summary>
        /// <value>The Ma Nhan Vien Theo May CC.</value>
        public string MaNhanVienTheoMayCC
        {
            get { return GetProperty(MaNhanVienTheoMayCCProperty); }
            set { SetProperty(MaNhanVienTheoMayCCProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="DienThoai"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> DienThoaiProperty = RegisterProperty<string>(p => p.DienThoai, "Dien Thoai");
        /// <summary>
        /// Gets or sets the Dien Thoai.
        /// </summary>
        /// <value>The Dien Thoai.</value>
        public string DienThoai
        {
            get { return GetProperty(DienThoaiProperty); }
            set { SetProperty(DienThoaiProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="Email"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> EmailProperty = RegisterProperty<string>(p => p.Email, "Email");
        /// <summary>
        /// Gets or sets the Email.
        /// </summary>
        /// <value>The Email.</value>
        public string Email
        {
            get { return GetProperty(EmailProperty); }
            set { SetProperty(EmailProperty, value); }
        }
        /// <summary>
        /// Maintains metadata about <see cref="Email"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> TenChucVuProperty = RegisterProperty<string>(p => p.TenChucVu, "Ten chuc Vu");
        /// <summary>
        /// Gets or sets the Email.
        /// </summary>
        /// <value>The Email.</value>
        public string TenChucVu
        {
            get { return GetProperty(TenChucVuProperty); }
            set { SetProperty(TenChucVuProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="LoaiCanBo"/> property.
        /// </summary>
        public static readonly PropertyInfo<int?> LoaiCanBoProperty = RegisterProperty<int?>(p => p.LoaiCanBo, "Loai Can Bo");
        /// <summary>
        /// Gets or sets the Loai Can Bo.
        /// </summary>
        /// <value>The Loai Can Bo.</value>
        public int? LoaiCanBo
        {
            get { return GetProperty(LoaiCanBoProperty); }
            set { SetProperty(LoaiCanBoProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="DanToc"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> DanTocProperty = RegisterProperty<string>(p => p.DanToc, "Dan Toc");
        /// <summary>
        /// Gets or sets the Dan Toc.
        /// </summary>
        /// <value>The Dan Toc.</value>
        public string DanToc
        {
            get { return GetProperty(DanTocProperty); }
            set { SetProperty(DanTocProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="SoCMT"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> SoCMTProperty = RegisterProperty<string>(p => p.SoCMT, "So CMT");
        /// <summary>
        /// Gets or sets the So CMT.
        /// </summary>
        /// <value>The So CMT.</value>
        public string SoCMT
        {
            get { return GetProperty(SoCMTProperty); }
            set { SetProperty(SoCMTProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="NgayCap"/> property.
        /// </summary>
        public static readonly PropertyInfo<SmartDate> NgayCapProperty = RegisterProperty<SmartDate>(p => p.NgayCap, "Ngay Cap");
        /// <summary>
        /// Gets or sets the Ngay Cap.
        /// </summary>
        /// <value>The Ngay Cap.</value>
        public string NgayCap
        {
            get { return GetPropertyConvert<SmartDate, String>(NgayCapProperty); }
            set { SetPropertyConvert<SmartDate, String>(NgayCapProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="NoiCap"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> NoiCapProperty = RegisterProperty<string>(p => p.NoiCap, "Noi Cap");
        /// <summary>
        /// Gets or sets the Noi Cap.
        /// </summary>
        /// <value>The Noi Cap.</value>
        public string NoiCap
        {
            get { return GetProperty(NoiCapProperty); }
            set { SetProperty(NoiCapProperty, value); }
        }
        /// <summary>
        /// Maintains metadata about <see cref="NoiCap"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> TenTrinhDoProperty = RegisterProperty<string>(p => p.TenTrinhDo, "Ten Trinh Do");
        /// <summary>
        /// Gets or sets the Noi Cap.
        /// </summary>
        /// <value>The Noi Cap.</value>
        public string TenTrinhDo
        {
            get { return GetProperty(TenTrinhDoProperty); }
            set { SetProperty(TenTrinhDoProperty, value); }
        }
        /// <summary>
        /// Maintains metadata about <see cref="NoiCap"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> TenTinhProperty = RegisterProperty<string>(p => p.TenTinh, "Ten Tinh");
        /// <summary>
        /// Gets or sets the Noi Cap.
        /// </summary>
        /// <value>The Noi Cap.</value>
        public string TenTinh
        {
            get { return GetProperty(TenTinhProperty); }
            set { SetProperty(TenTinhProperty, value); }
        }
        /// <summary>
        /// Maintains metadata about <see cref="NoiCap"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> TenBoPhanProperty = RegisterProperty<string>(p => p.TenBoPhan, "Ten Bo Phan");
        /// <summary>
        /// Gets or sets the Noi Cap.
        /// </summary>
        /// <value>The Noi Cap.</value>
        public string TenBoPhan
        {
            get { return GetProperty(TenBoPhanProperty); }
            set { SetProperty(TenBoPhanProperty, value); }
        }
         /// <summary>
        /// Maintains metadata about <see cref="GhiChu"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> GhiChuProperty = RegisterProperty<string>(p => p.GhiChu, "Ghi Chu");
        /// <summary>
        /// Gets or sets the Ghi Chu.
        /// </summary>
        /// <value>The Ghi Chu.</value>
        public string GhiChu
        {
            get { return GetProperty(GhiChuProperty); }
            set { SetProperty(GhiChuProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="idChuyenNganh"/> property.
        /// </summary>
        public static readonly PropertyInfo<int?> IdChuyenNganhProperty = RegisterProperty<int?>(p => p.IdChuyenNganh, "id Chuyen Nganh");
        /// <summary>
        /// Gets or sets the id Chuyen Nganh.
        /// </summary>
        /// <value>The id Chuyen Nganh.</value>
        public int? IdChuyenNganh
        {
            get { return GetProperty(IdChuyenNganhProperty); }
            set { SetProperty(IdChuyenNganhProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="idChuyenKhoa"/> property.
        /// </summary>
        public static readonly PropertyInfo<int?> IdChuyenKhoaProperty = RegisterProperty<int?>(p => p.IdChuyenKhoa, "id Chuyen Khoa");
        /// <summary>
        /// Gets or sets the id Chuyen Khoa.
        /// </summary>
        /// <value>The id Chuyen Khoa.</value>
        public int? IdChuyenKhoa
        {
            get { return GetProperty(IdChuyenKhoaProperty); }
            set { SetProperty(IdChuyenKhoaProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="Backup01"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> Backup01Property = RegisterProperty<string>(p => p.Backup01, "Backup01");
        /// <summary>
        /// Gets or sets the Backup01.
        /// </summary>
        /// <value>The Backup01.</value>
        public string Backup01
        {
            get { return GetProperty(Backup01Property); }
            set { SetProperty(Backup01Property, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="Backup02"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> Backup02Property = RegisterProperty<string>(p => p.Backup02, "Backup02");
        /// <summary>
        /// Gets or sets the Backup02.
        /// </summary>
        /// <value>The Backup02.</value>
        public string Backup02
        {
            get { return GetProperty(Backup02Property); }
            set { SetProperty(Backup02Property, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="backup03"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> Backup03Property = RegisterProperty<string>(p => p.Backup03, "backup03");
        /// <summary>
        /// Gets or sets the backup03.
        /// </summary>
        /// <value>The backup03.</value>
        public string Backup03
        {
            get { return GetProperty(Backup03Property); }
            set { SetProperty(Backup03Property, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="LoaiHopDong"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> LoaiHopDongProperty = RegisterProperty<string>(p => p.LoaiHopDong, "Loai Hop Dong");
        /// <summary>
        /// Gets or sets the Loai Hop Dong.
        /// </summary>
        /// <value>The Loai Hop Dong.</value>
        public string LoaiHopDong
        {
            get { return GetProperty(LoaiHopDongProperty); }
            set { SetProperty(LoaiHopDongProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="backupDate"/> property.
        /// </summary>
        public static readonly PropertyInfo<SmartDate> BackupDateProperty = RegisterProperty<SmartDate>(p => p.BackupDate, "backup Date");
        /// <summary>
        /// Gets or sets the backup Date.
        /// </summary>
        /// <value>The backup Date.</value>
        public string BackupDate
        {
            get { return GetPropertyConvert<SmartDate, String>(BackupDateProperty); }
            set { SetPropertyConvert<SmartDate, String>(BackupDateProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="LastEdited_IdUser"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> LastEdited_IdUserProperty = RegisterProperty<string>(p => p.LastEdited_IdUser, "Last Edited Id User");
        /// <summary>
        /// Gets or sets the Last Edited Id User.
        /// </summary>
        /// <value>The Last Edited Id User.</value>
        public string LastEdited_IdUser
        {
            get { return GetProperty(LastEdited_IdUserProperty); }
            set { SetProperty(LastEdited_IdUserProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="LastEdited_Datetime"/> property.
        /// </summary>
        public static readonly PropertyInfo<SmartDate> LastEdited_DatetimeProperty = RegisterProperty<SmartDate>(p => p.LastEdited_Datetime, "Last Edited Datetime");
        /// <summary>
        /// Gets or sets the Last Edited Datetime.
        /// </summary>
        /// <value>The Last Edited Datetime.</value>
        public string LastEdited_Datetime
        {
            get { return GetPropertyConvert<SmartDate, String>(LastEdited_DatetimeProperty); }
            set { SetPropertyConvert<SmartDate, String>(LastEdited_DatetimeProperty, value); }
        }

        public string SortBy_Phong_ChucVu
        {
            get { return string.Format("{0} {1}", GetProperty(TenBoPhanProperty),GetProperty(TenChucVuProperty)); }
        }

        #endregion

        #region Factory Methods

        /// <summary>
        /// Factory method. Creates a new <see cref="DIC_CanBo_Info"/> object.
        /// </summary>
        /// <returns>A reference to the created <see cref="DIC_CanBo_Info"/> object.</returns>
        internal static DIC_CanBo_Info NewDIC_CanBo_Info()
        {
            return DataPortal.CreateChild<DIC_CanBo_Info>();
        }

        /// <summary>
        /// Factory method. Asynchronously creates a new <see cref="DIC_CanBo_Info"/> object.
        /// </summary>
        /// <param name="callback">The completion callback method.</param>
        internal static void NewDIC_CanBo_Info(EventHandler<DataPortalResult<DIC_CanBo_Info>> callback)
        {
            DataPortal.BeginCreate<DIC_CanBo_Info>(callback);
        }

        /// <summary>
        /// Factory method. Loads a <see cref="DIC_CanBo_Info"/> object from the given SafeDataReader.
        /// </summary>
        /// <param name="dr">The SafeDataReader to use.</param>
        /// <returns>A reference to the fetched <see cref="DIC_CanBo_Info"/> object.</returns>
        internal static DIC_CanBo_Info GetDIC_CanBo_Info(SafeDataReader dr,BusinessFunction function)
        {
            DIC_CanBo_Info obj = new DIC_CanBo_Info();
            // show the framework that this is a child object
            obj.MarkAsChild();
            obj.Fetch(dr,function);
            obj.MarkOld();
            // check all object rules and property rules
            obj.BusinessRules.CheckRules();
            return obj;
        }

        #endregion

        #region Constructor

        /// <summary>
        /// Initializes a new instance of the <see cref="DIC_CanBo_Info"/> class.
        /// </summary>
        /// <remarks> Do not use to create a Csla object. Use factory methods instead.</remarks>
        private DIC_CanBo_Info()
        {
            // Prevent direct creation

            // show the framework that this is a child object
            MarkAsChild();
        }

        #endregion

        #region Data Access

        /// <summary>
        /// Loads default values for the <see cref="DIC_CanBo_Info"/> object properties.
        /// </summary>
        [Csla.RunLocal]
        protected override void Child_Create()
        {
            LoadProperty(IDProperty, System.Threading.Interlocked.Decrement(ref _lastID));
            LoadProperty(HoTenProperty, null);
            LoadProperty(GioiTinhProperty, null);
            LoadProperty(NgaySinhProperty, null);
            LoadProperty(ChoOHiennayProperty, null);
            LoadProperty(QuocGiaProperty, null);
            LoadProperty(NgayVaoDangProperty, null);
            LoadProperty(QTDaoTaoProperty, null);
            LoadProperty(QTCongTacProperty, null);
            LoadProperty(KinhNghiemNNProperty, null);
            LoadProperty(NghienCuuTGiaProperty, null);
            LoadProperty(NgoaiNguTinHocProperty, null);
            LoadProperty(KhenThuongKyLuatProperty, null);
            LoadProperty(HTapNCuuNNgoaiProperty, null);
            LoadProperty(MaNhanVienProperty, null);
            LoadProperty(MaNhanVienTheoMayCCProperty, null);
            LoadProperty(DienThoaiProperty, null);
            LoadProperty(EmailProperty, null);
            LoadProperty(DanTocProperty, null);
            LoadProperty(TenChucVuProperty, null);
            LoadProperty(SoCMTProperty, null);
            LoadProperty(NgayCapProperty, null);
            LoadProperty(NoiCapProperty, null);
            LoadProperty(TenTrinhDoProperty, null);
  LoadProperty(GhiChuProperty, null);
            LoadProperty(Backup01Property, null);
            LoadProperty(Backup02Property, null);
            LoadProperty(Backup03Property, null);
            LoadProperty(LoaiHopDongProperty, null);
            LoadProperty(BackupDateProperty, null);
            LoadProperty(TenTinhProperty, null);
            LoadProperty(TenBoPhanProperty, null);
            LoadProperty(LastEdited_IdUserProperty, null);
            LoadProperty(LastEdited_DatetimeProperty, null);
            var args = new DataPortalHookArgs();
            OnCreate(args);
            base.Child_Create();
        }

        /// <summary>
        /// Loads a <see cref="DIC_CanBo_Info"/> object from the given SafeDataReader.
        /// </summary>
        /// <param name="dr">The SafeDataReader to use.</param>
        private void Fetch(SafeDataReader dr,BusinessFunction function)
        {
           
                LoadProperty(IDProperty, dr.GetInt64("ID"));
                LoadProperty(HoTenProperty, dr.GetString("HoTen"));
                LoadProperty(GioiTinhProperty, dr.GetString("GioiTinh"));
                LoadProperty(NgaySinhProperty, dr.GetSmartDate("NgaySinh"));
                LoadProperty(IDTinhProperty, dr.GetInt64("IDTinh"));
                LoadProperty(ChoOHiennayProperty, dr.GetString("ChoOHiennay"));
                LoadProperty(QuocGiaProperty, dr.GetString("QuocGia"));
                LoadProperty(NgayVaoDangProperty, dr.GetSmartDate("NgayVaoDang"));
                LoadProperty(IDTrinhDoProperty, dr.GetInt32("IDTrinhDo"));
                LoadProperty(IDCoQuanProperty, dr.GetInt32("IDCoQuan"));
                LoadProperty(IDChucVuProperty, dr.GetInt32("IDChucVu"));
                LoadProperty(QTDaoTaoProperty, dr.GetString("QTDaoTao"));
                LoadProperty(QTCongTacProperty, dr.GetString("QTCongTac"));
                LoadProperty(KinhNghiemNNProperty, dr.GetString("KinhNghiemNN"));
                LoadProperty(NghienCuuTGiaProperty, dr.GetString("NghienCuuTGia"));
                LoadProperty(NgoaiNguTinHocProperty, dr.GetString("NgoaiNguTinHoc"));
                LoadProperty(KhenThuongKyLuatProperty, dr.GetString("KhenThuongKyLuat"));
                LoadProperty(HTapNCuuNNgoaiProperty, dr.GetString("HTapNCuuNNgoai"));
                LoadProperty(IDBoPhanProperty, dr.GetInt32("IDBoPhan"));
                LoadProperty(MaNhanVienProperty, dr.GetString("MaNhanVien"));
                LoadProperty(MaNhanVienTheoMayCCProperty, dr.GetString("MaNhanVienTheoMayCC"));
                LoadProperty(DienThoaiProperty, dr.GetString("DienThoai"));
                LoadProperty(EmailProperty, dr.GetString("Email"));
                LoadProperty(LoaiCanBoProperty, dr.GetInt32("LoaiCanBo"));
                LoadProperty(DanTocProperty, dr.GetString("DanToc"));
                LoadProperty(SoCMTProperty, dr.GetString("SoCMT"));
                LoadProperty(NgayCapProperty, dr.GetSmartDate("NgayCap"));
                LoadProperty(NoiCapProperty, dr.GetString("NoiCap"));
                LoadProperty(GhiChuProperty, dr.GetString("GhiChu"));
                LoadProperty(IdChuyenNganhProperty, dr.GetInt32("IdChuyenNganh"));
                LoadProperty(IdChuyenKhoaProperty, dr.GetInt32("IdChuyenKhoa"));
                LoadProperty(Backup01Property, dr.GetString("Backup01"));
                LoadProperty(Backup02Property, dr.GetString("Backup02"));
                LoadProperty(Backup03Property, dr.GetString("Backup03"));
                LoadProperty(LoaiHopDongProperty, dr.GetString("LoaiHopDong"));
                LoadProperty(BackupDateProperty, dr.GetSmartDate("BackupDate"));
                LoadProperty(TenChucVuProperty, dr.GetString("TenChucVu"));
                LoadProperty(TenTrinhDoProperty, dr.GetString("TenTrinhDo"));
                LoadProperty(TenBoPhanProperty, dr.GetString("TenBoPhan"));
                LoadProperty(TenTinhProperty, dr.GetString("TenTinh"));
                LoadProperty(IDUserProperty, dr.GetInt64("IDUser"));
                LoadProperty(LastEdited_DatetimeProperty, dr.GetSmartDate("LastEdited_Datetime"));
           
            var args = new DataPortalHookArgs(dr);
            OnFetchRead(args);
        }

        /// <summary>
        /// Inserts a new <see cref="DIC_CanBo_Info"/> object in the database.
        /// </summary>
        private void Child_Insert()
        {
            using (var ctx = TransactionManager<SqlConnection, SqlTransaction>.GetManager("Connection"))
            {
                using (var cmd = new SqlCommand("dbo.DIC_CanBo_Info_add", ctx.Connection))
                {
                    cmd.Transaction = ctx.Transaction;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@ID", ReadProperty(IDProperty)).Direction = ParameterDirection.Output;
                    cmd.Parameters.AddWithValue("@HoTen", ReadProperty(HoTenProperty) == null ? (object)DBNull.Value : ReadProperty(HoTenProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@GioiTinh", ReadProperty(GioiTinhProperty) == null ? (object)DBNull.Value : ReadProperty(GioiTinhProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@NgaySinh", ReadProperty(NgaySinhProperty).DBValue).DbType = DbType.DateTime;
                    cmd.Parameters.AddWithValue("@IDTinh", ReadProperty(IDTinhProperty) == null ? (object)DBNull.Value : ReadProperty(IDTinhProperty).Value).DbType = DbType.Int64;
                    cmd.Parameters.AddWithValue("@ChoOHiennay", ReadProperty(ChoOHiennayProperty) == null ? (object)DBNull.Value : ReadProperty(ChoOHiennayProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@QuocGia", ReadProperty(QuocGiaProperty) == null ? (object)DBNull.Value : ReadProperty(QuocGiaProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@NgayVaoDang", ReadProperty(NgayVaoDangProperty).DBValue).DbType = DbType.DateTime;
                    cmd.Parameters.AddWithValue("@IDTrinhDo", ReadProperty(IDTrinhDoProperty) == null ? (object)DBNull.Value : ReadProperty(IDTrinhDoProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@IDCoQuan", ReadProperty(IDCoQuanProperty) == null ? (object)DBNull.Value : ReadProperty(IDCoQuanProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@IDChucVu", ReadProperty(IDChucVuProperty) == null ? (object)DBNull.Value : ReadProperty(IDChucVuProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@QTDaoTao", ReadProperty(QTDaoTaoProperty) == null ? (object)DBNull.Value : ReadProperty(QTDaoTaoProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@QTCongTac", ReadProperty(QTCongTacProperty) == null ? (object)DBNull.Value : ReadProperty(QTCongTacProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@KinhNghiemNN", ReadProperty(KinhNghiemNNProperty) == null ? (object)DBNull.Value : ReadProperty(KinhNghiemNNProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@NghienCuuTGia", ReadProperty(NghienCuuTGiaProperty) == null ? (object)DBNull.Value : ReadProperty(NghienCuuTGiaProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@NgoaiNguTinHoc", ReadProperty(NgoaiNguTinHocProperty) == null ? (object)DBNull.Value : ReadProperty(NgoaiNguTinHocProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@KhenThuongKyLuat", ReadProperty(KhenThuongKyLuatProperty) == null ? (object)DBNull.Value : ReadProperty(KhenThuongKyLuatProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@HTapNCuuNNgoai", ReadProperty(HTapNCuuNNgoaiProperty) == null ? (object)DBNull.Value : ReadProperty(HTapNCuuNNgoaiProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@IDBoPhan", ReadProperty(IDBoPhanProperty) == null ? (object)DBNull.Value : ReadProperty(IDBoPhanProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@MaNhanVien", ReadProperty(MaNhanVienProperty) == null ? (object)DBNull.Value : ReadProperty(MaNhanVienProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@MaNhanVienTheoMayCC", ReadProperty(MaNhanVienTheoMayCCProperty) == null ? (object)DBNull.Value : ReadProperty(MaNhanVienTheoMayCCProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@DienThoai", ReadProperty(DienThoaiProperty) == null ? (object)DBNull.Value : ReadProperty(DienThoaiProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@Email", ReadProperty(EmailProperty) == null ? (object)DBNull.Value : ReadProperty(EmailProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@LoaiCanBo", ReadProperty(LoaiCanBoProperty) == null ? (object)DBNull.Value : ReadProperty(LoaiCanBoProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@DanToc", ReadProperty(DanTocProperty) == null ? (object)DBNull.Value : ReadProperty(DanTocProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@SoCMT", ReadProperty(SoCMTProperty) == null ? (object)DBNull.Value : ReadProperty(SoCMTProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@NgayCap", ReadProperty(NgayCapProperty).DBValue).DbType = DbType.DateTime;
                    cmd.Parameters.AddWithValue("@NoiCap", ReadProperty(NoiCapProperty) == null ? (object)DBNull.Value : ReadProperty(NoiCapProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@GhiChu", ReadProperty(GhiChuProperty) == null ? (object)DBNull.Value : ReadProperty(GhiChuProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@idChuyenNganh", ReadProperty(IdChuyenNganhProperty) == null ? (object)DBNull.Value : ReadProperty(IdChuyenNganhProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@idChuyenKhoa", ReadProperty(IdChuyenKhoaProperty) == null ? (object)DBNull.Value : ReadProperty(IdChuyenKhoaProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@Backup01", ReadProperty(Backup01Property) == null ? (object)DBNull.Value : ReadProperty(Backup01Property)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@Backup02", ReadProperty(Backup02Property) == null ? (object)DBNull.Value : ReadProperty(Backup02Property)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@backup03", ReadProperty(Backup03Property) == null ? (object)DBNull.Value : ReadProperty(Backup03Property)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@LoaiHopDong", ReadProperty(LoaiHopDongProperty) == null ? (object)DBNull.Value : ReadProperty(LoaiHopDongProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@backupDate", ReadProperty(BackupDateProperty).DBValue).DbType = DbType.DateTime;
                    cmd.Parameters.AddWithValue("@LastEdited_IdUser", ReadProperty(LastEdited_IdUserProperty) == null ? (object)DBNull.Value : ReadProperty(LastEdited_IdUserProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@LastEdited_Datetime", ReadProperty(LastEdited_DatetimeProperty).DBValue).DbType = DbType.DateTime;
                    var args = new DataPortalHookArgs(cmd);
                    OnInsertPre(args);
                    cmd.ExecuteNonQuery();
                    OnInsertPost(args);
                    LoadProperty(IDProperty, (long) cmd.Parameters["@ID"].Value);
                }
            }
        }

        /// <summary>
        /// Updates in the database all changes made to the <see cref="DIC_CanBo_Info"/> object.
        /// </summary>
        private void Child_Update()
        {
            if (!IsDirty)
                return;

            using (var ctx = TransactionManager<SqlConnection, SqlTransaction>.GetManager("Connection"))
            {
                using (var cmd = new SqlCommand("dbo.DIC_CanBo_Info_update", ctx.Connection))
                {
                    cmd.Transaction = ctx.Transaction;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@ID", ReadProperty(IDProperty)).DbType = DbType.Int64;
                    cmd.Parameters.AddWithValue("@HoTen", ReadProperty(HoTenProperty) == null ? (object)DBNull.Value : ReadProperty(HoTenProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@GioiTinh", ReadProperty(GioiTinhProperty) == null ? (object)DBNull.Value : ReadProperty(GioiTinhProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@NgaySinh", ReadProperty(NgaySinhProperty).DBValue).DbType = DbType.DateTime;
                    cmd.Parameters.AddWithValue("@IDTinh", ReadProperty(IDTinhProperty) == null ? (object)DBNull.Value : ReadProperty(IDTinhProperty).Value).DbType = DbType.Int64;
                    cmd.Parameters.AddWithValue("@ChoOHiennay", ReadProperty(ChoOHiennayProperty) == null ? (object)DBNull.Value : ReadProperty(ChoOHiennayProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@QuocGia", ReadProperty(QuocGiaProperty) == null ? (object)DBNull.Value : ReadProperty(QuocGiaProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@NgayVaoDang", ReadProperty(NgayVaoDangProperty).DBValue).DbType = DbType.DateTime;
                    cmd.Parameters.AddWithValue("@IDTrinhDo", ReadProperty(IDTrinhDoProperty) == null ? (object)DBNull.Value : ReadProperty(IDTrinhDoProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@IDCoQuan", ReadProperty(IDCoQuanProperty) == null ? (object)DBNull.Value : ReadProperty(IDCoQuanProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@IDChucVu", ReadProperty(IDChucVuProperty) == null ? (object)DBNull.Value : ReadProperty(IDChucVuProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@QTDaoTao", ReadProperty(QTDaoTaoProperty) == null ? (object)DBNull.Value : ReadProperty(QTDaoTaoProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@QTCongTac", ReadProperty(QTCongTacProperty) == null ? (object)DBNull.Value : ReadProperty(QTCongTacProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@KinhNghiemNN", ReadProperty(KinhNghiemNNProperty) == null ? (object)DBNull.Value : ReadProperty(KinhNghiemNNProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@NghienCuuTGia", ReadProperty(NghienCuuTGiaProperty) == null ? (object)DBNull.Value : ReadProperty(NghienCuuTGiaProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@NgoaiNguTinHoc", ReadProperty(NgoaiNguTinHocProperty) == null ? (object)DBNull.Value : ReadProperty(NgoaiNguTinHocProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@KhenThuongKyLuat", ReadProperty(KhenThuongKyLuatProperty) == null ? (object)DBNull.Value : ReadProperty(KhenThuongKyLuatProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@HTapNCuuNNgoai", ReadProperty(HTapNCuuNNgoaiProperty) == null ? (object)DBNull.Value : ReadProperty(HTapNCuuNNgoaiProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@IDBoPhan", ReadProperty(IDBoPhanProperty) == null ? (object)DBNull.Value : ReadProperty(IDBoPhanProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@MaNhanVien", ReadProperty(MaNhanVienProperty) == null ? (object)DBNull.Value : ReadProperty(MaNhanVienProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@MaNhanVienTheoMayCC", ReadProperty(MaNhanVienTheoMayCCProperty) == null ? (object)DBNull.Value : ReadProperty(MaNhanVienTheoMayCCProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@DienThoai", ReadProperty(DienThoaiProperty) == null ? (object)DBNull.Value : ReadProperty(DienThoaiProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@Email", ReadProperty(EmailProperty) == null ? (object)DBNull.Value : ReadProperty(EmailProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@LoaiCanBo", ReadProperty(LoaiCanBoProperty) == null ? (object)DBNull.Value : ReadProperty(LoaiCanBoProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@DanToc", ReadProperty(DanTocProperty) == null ? (object)DBNull.Value : ReadProperty(DanTocProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@SoCMT", ReadProperty(SoCMTProperty) == null ? (object)DBNull.Value : ReadProperty(SoCMTProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@NgayCap", ReadProperty(NgayCapProperty).DBValue).DbType = DbType.DateTime;
                    cmd.Parameters.AddWithValue("@NoiCap", ReadProperty(NoiCapProperty) == null ? (object)DBNull.Value : ReadProperty(NoiCapProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@GhiChu", ReadProperty(GhiChuProperty) == null ? (object)DBNull.Value : ReadProperty(GhiChuProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@idChuyenNganh", ReadProperty(IdChuyenNganhProperty) == null ? (object)DBNull.Value : ReadProperty(IdChuyenNganhProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@idChuyenKhoa", ReadProperty(IdChuyenKhoaProperty) == null ? (object)DBNull.Value : ReadProperty(IdChuyenKhoaProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@Backup01", ReadProperty(Backup01Property) == null ? (object)DBNull.Value : ReadProperty(Backup01Property)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@Backup02", ReadProperty(Backup02Property) == null ? (object)DBNull.Value : ReadProperty(Backup02Property)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@backup03", ReadProperty(Backup03Property) == null ? (object)DBNull.Value : ReadProperty(Backup03Property)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@LoaiHopDong", ReadProperty(LoaiHopDongProperty) == null ? (object)DBNull.Value : ReadProperty(LoaiHopDongProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@backupDate", ReadProperty(BackupDateProperty).DBValue).DbType = DbType.DateTime;
                    cmd.Parameters.AddWithValue("@LastEdited_IdUser", ReadProperty(LastEdited_IdUserProperty) == null ? (object)DBNull.Value : ReadProperty(LastEdited_IdUserProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@LastEdited_Datetime", ReadProperty(LastEdited_DatetimeProperty).DBValue).DbType = DbType.DateTime;
                    var args = new DataPortalHookArgs(cmd);
                    OnUpdatePre(args);
                    cmd.ExecuteNonQuery();
                    OnUpdatePost(args);
                }
            }
        }

        /// <summary>
        /// Self deletes the <see cref="DIC_CanBo_Info"/> object from database.
        /// </summary>
        private void Child_DeleteSelf()
        {
            using (var ctx = TransactionManager<SqlConnection, SqlTransaction>.GetManager("Connection"))
            {
                using (var cmd = new SqlCommand("dbo.DIC_CanBo_Info_delete", ctx.Connection))
                {
                    cmd.Transaction = ctx.Transaction;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@ID", ReadProperty(IDProperty)).DbType = DbType.Int64;
                    var args = new DataPortalHookArgs(cmd);
                    OnDeletePre(args);
                    cmd.ExecuteNonQuery();
                    OnDeletePost(args);
                }
            }
        }

        #endregion

        #region Pseudo Events

        /// <summary>
        /// Occurs after setting all defaults for object creation.
        /// </summary>
        partial void OnCreate(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Delete, after setting query parameters and before the delete operation.
        /// </summary>
        partial void OnDeletePre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Delete, after the delete operation, before Commit().
        /// </summary>
        partial void OnDeletePost(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after setting query parameters and before the fetch operation.
        /// </summary>
        partial void OnFetchPre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after the fetch operation (object or collection is fully loaded and set up).
        /// </summary>
        partial void OnFetchPost(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after the low level fetch operation, before the data reader is destroyed.
        /// </summary>
        partial void OnFetchRead(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after setting query parameters and before the update operation.
        /// </summary>
        partial void OnUpdatePre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Insert, after the update operation, before setting back row identifiers (RowVersion) and Commit().
        /// </summary>
        partial void OnUpdatePost(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Insert, after setting query parameters and before the insert operation.
        /// </summary>
        partial void OnInsertPre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Insert, after the insert operation, before setting back row identifiers (ID and RowVersion) and Commit().
        /// </summary>
        partial void OnInsertPost(DataPortalHookArgs args);

        #endregion

    }
}
