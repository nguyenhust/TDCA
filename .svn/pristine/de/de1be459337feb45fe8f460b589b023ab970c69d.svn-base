//  This file was generated by CSLA Object Generator - CslaGenFork v4.3.0
//
// Filename:    HC_PhieuGiaoViec
// ObjectType:  HC_PhieuGiaoViec
// CSLAType:    EditableRoot

using System;
using System.Data;
using System.Data.SqlClient;
using Csla;
using Csla.Data;
using NETLINK.LIB;

namespace ModuleHanhChinh.LIB
{

    /// <summary>
    /// HC_PhieuGiaoViec (editable root object).<br/>
    /// This is a generated base class of <see cref="HC_PhieuGiaoViec"/> business object.
    /// </summary>
    [Serializable]
    public partial class HC_PhieuGiaoViec : BusinessBase<HC_PhieuGiaoViec>
    {

        #region Static Fields

        private static int _lastID;

        #endregion

        #region Business Properties

        /// <summary>
        /// Maintains metadata about <see cref="Link"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> LinkProperty = RegisterProperty<string>(p => p.Link, "Link");
        /// <summary>
        /// Gets or sets the Link.
        /// </summary>
        /// <value>The Link.</value>
        public string Link
        {
            get { return GetProperty(LinkProperty); }
            set { SetProperty(LinkProperty, value); }
        }
        /// <summary>
        /// Maintains metadata about <see cref="ID"/> property.
        /// </summary>
        public static readonly PropertyInfo<int> IDProperty = RegisterProperty<int>(p => p.ID, "ID");
        /// <summary>
        /// Gets the ID.
        /// </summary>
        /// <value>The ID.</value>
        public int ID
        {
            get { return GetProperty(IDProperty); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="idNguoiDuocGiao"/> property.
        /// </summary>
        public static readonly PropertyInfo<Int64?> IdNguoiDuocGiaoProperty = RegisterProperty<Int64?>(p => p.IdNguoiDuocGiao, "id Nguoi Duoc Giao");
        /// <summary>
        /// Gets or sets the id Nguoi Duoc Giao.
        /// </summary>
        /// <value>The id Nguoi Duoc Giao.</value>
        public Int64? IdNguoiDuocGiao
        {
            get { return GetProperty(IdNguoiDuocGiaoProperty); }
            set { SetProperty(IdNguoiDuocGiaoProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="idNguoiGiaoViec"/> property.
        /// </summary>
        public static readonly PropertyInfo<Int64?> IdNguoiGiaoViecProperty = RegisterProperty<Int64?>(p => p.IdNguoiGiaoViec, "id Nguoi Giao Viec");
        /// <summary>
        /// Gets or sets the id Nguoi Giao Viec.
        /// </summary>
        /// <value>The id Nguoi Giao Viec.</value>
        public Int64? IdNguoiGiaoViec
        {
            get { return GetProperty(IdNguoiGiaoViecProperty); }
            set { SetProperty(IdNguoiGiaoViecProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="idNguoiTongHop1"/> property.
        /// </summary>
        public static readonly PropertyInfo<Int64?> IdNguoiTongHop1Property = RegisterProperty<Int64?>(p => p.IdNguoiTongHop1, "id Nguoi Tong Hop1");
        /// <summary>
        /// Gets or sets the id Nguoi Tong Hop1.
        /// </summary>
        /// <value>The id Nguoi Tong Hop1.</value>
        public Int64? IdNguoiTongHop1
        {
            get { return GetProperty(IdNguoiTongHop1Property); }
            set { SetProperty(IdNguoiTongHop1Property, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="idNguoiTongHop2"/> property.
        /// </summary>
        public static readonly PropertyInfo<Int64?> IdNguoiTongHop2Property = RegisterProperty<Int64?>(p => p.IdNguoiTongHop2, "id Nguoi Tong Hop2");
        /// <summary>
        /// Gets or sets the id Nguoi Tong Hop2.
        /// </summary>
        /// <value>The id Nguoi Tong Hop2.</value>
        public Int64? IdNguoiTongHop2
        {
            get { return GetProperty(IdNguoiTongHop2Property); }
            set { SetProperty(IdNguoiTongHop2Property, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="NoiDungCongViec"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> NoiDungCongViecProperty = RegisterProperty<string>(p => p.NoiDungCongViec, "Noi Dung Cong Viec");
        /// <summary>
        /// Gets or sets the Noi Dung Cong Viec.
        /// </summary>
        /// <value>The Noi Dung Cong Viec.</value>
        public string NoiDungCongViec
        {
            get { return GetProperty(NoiDungCongViecProperty); }
            set { SetProperty(NoiDungCongViecProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="GhiChu"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> GhiChuProperty = RegisterProperty<string>(p => p.GhiChu, "Ghi Chu");
        /// <summary>
        /// Gets or sets the Ghi Chu.
        /// </summary>
        /// <value>The Ghi Chu.</value>
        public string GhiChu
        {
            get { return GetProperty(GhiChuProperty); }
            set { SetProperty(GhiChuProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="TrangThai"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> TrangThaiProperty = RegisterProperty<string>(p => p.TrangThai, "Trang Thai");
        /// <summary>
        /// Gets or sets the Trang Thai.
        /// </summary>
        /// <value>The Trang Thai.</value>
        public string TrangThai
        {
            get { return GetProperty(TrangThaiProperty); }
            set { SetProperty(TrangThaiProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="NgayGiao"/> property.
        /// </summary>
        public static readonly PropertyInfo<SmartDate> NgayGiaoProperty = RegisterProperty<SmartDate>(p => p.NgayGiao, "Ngay Giao");
        /// <summary>
        /// Gets or sets the Ngay Giao.
        /// </summary>
        /// <value>The Ngay Giao.</value>
        public string NgayGiao
        {
            get { return GetPropertyConvert<SmartDate, String>(NgayGiaoProperty); }
            set { SetPropertyConvert<SmartDate, String>(NgayGiaoProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="BatDauTuNgay"/> property.
        /// </summary>
        public static readonly PropertyInfo<SmartDate> BatDauTuNgayProperty = RegisterProperty<SmartDate>(p => p.BatDauTuNgay, "Bat Dau Tu Ngay");
        /// <summary>
        /// Gets or sets the Bat Dau Tu Ngay.
        /// </summary>
        /// <value>The Bat Dau Tu Ngay.</value>
        public string BatDauTuNgay
        {
            get { return GetPropertyConvert<SmartDate, String>(BatDauTuNgayProperty); }
            set { SetPropertyConvert<SmartDate, String>(BatDauTuNgayProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="LyDo"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> LyDoProperty = RegisterProperty<string>(p => p.LyDo, "Ly Do");
        /// <summary>
        /// Gets or sets the Ly Do.
        /// </summary>
        /// <value>The Ly Do.</value>
        public string LyDo
        {
            get { return GetProperty(LyDoProperty); }
            set { SetProperty(LyDoProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="PhaiXongNgay"/> property.
        /// </summary>
        public static readonly PropertyInfo<SmartDate> PhaiXongNgayProperty = RegisterProperty<SmartDate>(p => p.PhaiXongNgay, "Phai Xong Ngay");
        /// <summary>
        /// Gets or sets the Phai Xong Ngay.
        /// </summary>
        /// <value>The Phai Xong Ngay.</value>
        public string PhaiXongNgay
        {
            get { return GetPropertyConvert<SmartDate, String>(PhaiXongNgayProperty); }
            set { SetPropertyConvert<SmartDate, String>(PhaiXongNgayProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="idBoPhanCanBoDuocGiao"/> property.
        /// </summary>
        public static readonly PropertyInfo<int?> IdBoPhanCanBoDuocGiaoProperty = RegisterProperty<int?>(p => p.IdBoPhanCanBoDuocGiao, "id Bo Phan Can Bo Duoc Giao");
        /// <summary>
        /// Gets or sets the id Bo Phan Can Bo Duoc Giao.
        /// </summary>
        /// <value>The id Bo Phan Can Bo Duoc Giao.</value>
        public int? IdBoPhanCanBoDuocGiao
        {
            get { return GetProperty(IdBoPhanCanBoDuocGiaoProperty); }
            set { SetProperty(IdBoPhanCanBoDuocGiaoProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="idUserLastEdited"/> property.
        /// </summary>
        public static readonly PropertyInfo<Int64?> IdUserLastEditedProperty = RegisterProperty<Int64?>(p => p.IdUserLastEdited, "id User Last Edited");
        /// <summary>
        /// Gets or sets the id User Last Edited.
        /// </summary>
        /// <value>The id User Last Edited.</value>
        public Int64? IdUserLastEdited
        {
            get { return GetProperty(IdUserLastEditedProperty); }
            set { SetProperty(IdUserLastEditedProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="DateLastEdited"/> property.
        /// </summary>
        public static readonly PropertyInfo<SmartDate> DateLastEditedProperty = RegisterProperty<SmartDate>(p => p.DateLastEdited, "Date Last Edited");
        /// <summary>
        /// Gets or sets the Date Last Edited.
        /// </summary>
        /// <value>The Date Last Edited.</value>
        public string DateLastEdited
        {
            get { return GetPropertyConvert<SmartDate, String>(DateLastEditedProperty); }
            set { SetPropertyConvert<SmartDate, String>(DateLastEditedProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="ListIDCanBoDuocGiao"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> ListIDCanBoDuocGiaoProperty = RegisterProperty<string>(p => p.ListIDCanBoDuocGiao, "List IDCan Bo Duoc Giao");
        /// <summary>
        /// Gets or sets the List IDCan Bo Duoc Giao.
        /// </summary>
        /// <value>The List IDCan Bo Duoc Giao.</value>
        public string ListIDCanBoDuocGiao
        {
            get { return GetProperty(ListIDCanBoDuocGiaoProperty); }
            set { SetProperty(ListIDCanBoDuocGiaoProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="ListHoTenCanBoDuocGiao"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> ListHoTenCanBoDuocGiaoProperty = RegisterProperty<string>(p => p.ListHoTenCanBoDuocGiao, "List Ho Ten Can Bo Duoc Giao");
        /// <summary>
        /// Gets or sets the List Ho Ten Can Bo Duoc Giao.
        /// </summary>
        /// <value>The List Ho Ten Can Bo Duoc Giao.</value>
        public string ListHoTenCanBoDuocGiao
        {
            get { return GetProperty(ListHoTenCanBoDuocGiaoProperty); }
            set { SetProperty(ListHoTenCanBoDuocGiaoProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="backup01"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> Backup01Property = RegisterProperty<string>(p => p.Backup01, "backup01");
        /// <summary>
        /// Gets or sets the backup01.
        /// </summary>
        /// <value>The backup01.</value>
        public string Backup01
        {
            get { return GetProperty(Backup01Property); }
            set { SetProperty(Backup01Property, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="backup02"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> Backup02Property = RegisterProperty<string>(p => p.Backup02, "backup02");
        /// <summary>
        /// Gets or sets the backup02.
        /// </summary>
        /// <value>The backup02.</value>
        public string Backup02
        {
            get { return GetProperty(Backup02Property); }
            set { SetProperty(Backup02Property, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="backup03"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> Backup03Property = RegisterProperty<string>(p => p.Backup03, "backup03");
        /// <summary>
        /// Gets or sets the backup03.
        /// </summary>
        /// <value>The backup03.</value>
        public string Backup03
        {
            get { return GetProperty(Backup03Property); }
            set { SetProperty(Backup03Property, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="ListIDUserDuocGiao"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> ListIDUserDuocGiaoProperty = RegisterProperty<string>(p => p.ListIDUserDuocGiao, "List IDUser Duoc Giao");
        /// <summary>
        /// Gets or sets the List IDUser Duoc Giao.
        /// </summary>
        /// <value>The List IDUser Duoc Giao.</value>
        public string ListIDUserDuocGiao
        {
            get { return GetProperty(ListIDUserDuocGiaoProperty); }
            set { SetProperty(ListIDUserDuocGiaoProperty, value); }
        }
        /// <summary>
        /// Maintains metadata about <see cref="ListIDUserDuocGiao"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> TenNguoiGiaoViecProperty = RegisterProperty<string>(p => p.TenNguoiGiaoViec, "LTenNguoiGiaoViec Giao");
        /// <summary>
        /// Gets or sets the List IDUser Duoc Giao.
        /// </summary>
        /// <value>The List IDUser Duoc Giao.</value>
        public string TenNguoiGiaoViec
        {
            get { return GetProperty(TenNguoiGiaoViecProperty); }
            set { SetProperty(TenNguoiGiaoViecProperty, value); }
        }

        #endregion

        #region Factory Methods

        /// <summary>
        /// Factory method. Creates a new <see cref="HC_PhieuGiaoViec"/> object.
        /// </summary>
        /// <returns>A reference to the created <see cref="HC_PhieuGiaoViec"/> object.</returns>
        public static HC_PhieuGiaoViec NewHC_PhieuGiaoViec()
        {
            return DataPortal.Create<HC_PhieuGiaoViec>();
        }

        /// <summary>
        /// Factory method. Loads a <see cref="HC_PhieuGiaoViec"/> object, based on given parameters.
        /// </summary>
        /// <param name="id">The ID parameter of the HC_PhieuGiaoViec to fetch.</param>
        /// <returns>A reference to the fetched <see cref="HC_PhieuGiaoViec"/> object.</returns>
        public static HC_PhieuGiaoViec GetHC_PhieuGiaoViec(int id)
        {
            BusinessFunction function = new BusinessFunction(BusinessFunctionMode.Default);
            function.ItemID = id;
            return DataPortal.Fetch<HC_PhieuGiaoViec>(function);
        }
        public static HC_PhieuGiaoViec GetHC_PhieuGiaoViec(BusinessFunction function)
        {
            return DataPortal.Fetch<HC_PhieuGiaoViec>(function);
        }

        /// <summary>
        /// Factory method. Deletes a <see cref="HC_PhieuGiaoViec"/> object, based on given parameters.
        /// </summary>
        /// <param name="id">The ID of the HC_PhieuGiaoViec to delete.</param>
        public static void DeleteHC_PhieuGiaoViec(int id)
        {
            DataPortal.Delete<HC_PhieuGiaoViec>(id);
        }

        /// <summary>
        /// Factory method. Asynchronously creates a new <see cref="HC_PhieuGiaoViec"/> object.
        /// </summary>
        /// <param name="callback">The completion callback method.</param>
        public static void NewHC_PhieuGiaoViec(EventHandler<DataPortalResult<HC_PhieuGiaoViec>> callback)
        {
            DataPortal.BeginCreate<HC_PhieuGiaoViec>(callback);
        }

        /// <summary>
        /// Factory method. Asynchronously loads a <see cref="HC_PhieuGiaoViec"/> object, based on given parameters.
        /// </summary>
        /// <param name="id">The ID parameter of the HC_PhieuGiaoViec to fetch.</param>
        /// <param name="callback">The completion callback method.</param>
        public static void GetHC_PhieuGiaoViec(int id, EventHandler<DataPortalResult<HC_PhieuGiaoViec>> callback)
        {
            DataPortal.BeginFetch<HC_PhieuGiaoViec>(id, callback);
        }

        /// <summary>
        /// Factory method. Asynchronously deletes a <see cref="HC_PhieuGiaoViec"/> object, based on given parameters.
        /// </summary>
        /// <param name="id">The ID of the HC_PhieuGiaoViec to delete.</param>
        /// <param name="callback">The completion callback method.</param>
        public static void DeleteHC_PhieuGiaoViec(int id, EventHandler<DataPortalResult<HC_PhieuGiaoViec>> callback)
        {
            DataPortal.BeginDelete<HC_PhieuGiaoViec>(id, callback);
        }

        #endregion

        #region Constructor

        /// <summary>
        /// Initializes a new instance of the <see cref="HC_PhieuGiaoViec"/> class.
        /// </summary>
        /// <remarks> Do not use to create a Csla object. Use factory methods instead.</remarks>
        private HC_PhieuGiaoViec()
        {
            // Prevent direct creation
        }

        #endregion

        #region Data Access

        /// <summary>
        /// Loads default values for the <see cref="HC_PhieuGiaoViec"/> object properties.
        /// </summary>
        [Csla.RunLocal]
        protected override void DataPortal_Create()
        {
            LoadProperty(IDProperty, System.Threading.Interlocked.Decrement(ref _lastID));
            LoadProperty(NoiDungCongViecProperty, null);
            LoadProperty(GhiChuProperty, null);
            LoadProperty(TrangThaiProperty, null);
            LoadProperty(NgayGiaoProperty, null);
            LoadProperty(BatDauTuNgayProperty, null);
            LoadProperty(LyDoProperty, null);
            LoadProperty(PhaiXongNgayProperty, null);
            LoadProperty(DateLastEditedProperty, null);
            LoadProperty(ListIDCanBoDuocGiaoProperty, null);
            LoadProperty(ListHoTenCanBoDuocGiaoProperty, null);
            LoadProperty(Backup01Property, null);
            LoadProperty(Backup02Property, null);
            LoadProperty(Backup03Property, null);
            LoadProperty(ListIDUserDuocGiaoProperty, null);
            LoadProperty(TenNguoiGiaoViecProperty, null);
            var args = new DataPortalHookArgs();
            OnCreate(args);
            base.DataPortal_Create();
        }

        /// <summary>
        /// Loads a <see cref="HC_PhieuGiaoViec"/> object from the database, based on given criteria.
        /// </summary>
        /// <param name="id">The ID.</param>
        protected void DataPortal_Fetch(BusinessFunction function)
        {
            string store = string.Empty;
            if (function.Mode == BusinessFunctionMode.Default)
            {
                store = "dbo.HC_PhieuGiaoViec_get";
            }
            else
            {
                store = "dbo.HC_PhieuGiaoViec_getbyIDCongVan";
            }
            using (var ctx = ConnectionManager<SqlConnection>.GetManager("Connection"))
            {
                using (var cmd = new SqlCommand(store, ctx.Connection))
                {
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@ID", function.ItemID).DbType = DbType.Int32;
                    var args = new DataPortalHookArgs(cmd, function.ItemID);
                    OnFetchPre(args);
                    Fetch(cmd);
                    OnFetchPost(args);
                }
            }
            // check all object rules and property rules
            BusinessRules.CheckRules();

        }

        private void Fetch(SqlCommand cmd)
        {
            using (var dr = new SafeDataReader(cmd.ExecuteReader()))
            {
                if (dr.Read())
                {
                    Fetch(dr);
                }
            }
        }

        /// <summary>
        /// Loads a <see cref="HC_PhieuGiaoViec"/> object from the given SafeDataReader.
        /// </summary>
        /// <param name="dr">The SafeDataReader to use.</param>
        private void Fetch(SafeDataReader dr)
        {
            // Value properties
            LoadProperty(IDProperty, dr.GetInt32("ID"));
            LoadProperty(IdNguoiDuocGiaoProperty, dr.GetInt64("IdNguoiDuocGiao"));
            LoadProperty(IdNguoiGiaoViecProperty, dr.GetInt64("IdNguoiGiaoViec"));
            LoadProperty(IdNguoiTongHop1Property, dr.GetInt64("IdNguoiTongHop1"));
            LoadProperty(IdNguoiTongHop2Property, dr.GetInt64("IdNguoiTongHop2"));
            LoadProperty(NoiDungCongViecProperty, dr.GetString("NoiDungCongViec"));
            LoadProperty(GhiChuProperty, dr.GetString("GhiChu"));
            LoadProperty(TrangThaiProperty, dr.GetString("TrangThai"));
            LoadProperty(NgayGiaoProperty, dr.GetSmartDate("NgayGiao"));
            LoadProperty(BatDauTuNgayProperty, dr.GetSmartDate("BatDauTuNgay"));
            LoadProperty(LyDoProperty, dr.GetString("LyDo"));
            LoadProperty(LinkProperty, dr.GetString("Link"));
            LoadProperty(PhaiXongNgayProperty, dr.GetSmartDate("PhaiXongNgay"));
            LoadProperty(IdBoPhanCanBoDuocGiaoProperty, dr.GetInt32("IdBoPhanCanBoDuocGiao"));
            LoadProperty(IdUserLastEditedProperty, dr.GetInt64("IdUserLastEdited"));
            LoadProperty(DateLastEditedProperty, dr.GetSmartDate("DateLastEdited"));
           LoadProperty(ListIDCanBoDuocGiaoProperty, dr.GetString("ListIDCanBoDuocGiao"));
            LoadProperty(ListHoTenCanBoDuocGiaoProperty, dr.GetString("ListHoTenCanBoDuocGiao"));
            LoadProperty(Backup01Property, dr.GetString("Backup01"));
            LoadProperty(Backup02Property, dr.GetString("Backup02"));
            LoadProperty(Backup03Property, dr.GetString("Backup03"));
            LoadProperty(ListIDUserDuocGiaoProperty, dr.GetString("ListIDUserDuocGiao"));
            LoadProperty(TenNguoiGiaoViecProperty, dr.GetString("TenNguoiGiaoViec"));
            var args = new DataPortalHookArgs(dr);
            OnFetchRead(args);
        }

        /// <summary>
        /// Inserts a new <see cref="HC_PhieuGiaoViec"/> object in the database.
        /// </summary>
        protected override void DataPortal_Insert()
        {
            using (var ctx = TransactionManager<SqlConnection, SqlTransaction>.GetManager("Connection"))
            {
                using (var cmd = new SqlCommand("dbo.HC_PhieuGiaoViec_add", ctx.Connection))
                {
                    cmd.Transaction = ctx.Transaction;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@ID", ReadProperty(IDProperty)).Direction = ParameterDirection.Output;
                    cmd.Parameters.AddWithValue("@idNguoiDuocGiao", ReadProperty(IdNguoiDuocGiaoProperty) == null ? (object)DBNull.Value : ReadProperty(IdNguoiDuocGiaoProperty).Value).DbType = DbType.Int64;
                    cmd.Parameters.AddWithValue("@idNguoiGiaoViec", ReadProperty(IdNguoiGiaoViecProperty) == null ? (object)DBNull.Value : ReadProperty(IdNguoiGiaoViecProperty).Value).DbType = DbType.Int64;
                    cmd.Parameters.AddWithValue("@idNguoiTongHop1", ReadProperty(IdNguoiTongHop1Property) == null ? (object)DBNull.Value : ReadProperty(IdNguoiTongHop1Property).Value).DbType = DbType.Int64;
                    cmd.Parameters.AddWithValue("@idNguoiTongHop2", ReadProperty(IdNguoiTongHop2Property) == null ? (object)DBNull.Value : ReadProperty(IdNguoiTongHop2Property).Value).DbType = DbType.Int64;
                    cmd.Parameters.AddWithValue("@NoiDungCongViec", ReadProperty(NoiDungCongViecProperty) == null ? (object)DBNull.Value : ReadProperty(NoiDungCongViecProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@GhiChu", ReadProperty(GhiChuProperty) == null ? (object)DBNull.Value : ReadProperty(GhiChuProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@TrangThai", ReadProperty(TrangThaiProperty) == null ? (object)DBNull.Value : ReadProperty(TrangThaiProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@NgayGiao", ReadProperty(NgayGiaoProperty).DBValue).DbType = DbType.DateTime;
                    cmd.Parameters.AddWithValue("@BatDauTuNgay", ReadProperty(BatDauTuNgayProperty).DBValue).DbType = DbType.DateTime;
                    cmd.Parameters.AddWithValue("@LyDo", ReadProperty(LyDoProperty) == null ? (object)DBNull.Value : ReadProperty(LyDoProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@PhaiXongNgay", ReadProperty(PhaiXongNgayProperty).DBValue).DbType = DbType.DateTime;
                    cmd.Parameters.AddWithValue("@idBoPhanCanBoDuocGiao", ReadProperty(IdBoPhanCanBoDuocGiaoProperty) == null ? (object)DBNull.Value : ReadProperty(IdBoPhanCanBoDuocGiaoProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@idUserLastEdited", ReadProperty(IdUserLastEditedProperty) == null ? (object)DBNull.Value : ReadProperty(IdUserLastEditedProperty).Value).DbType = DbType.Int64;
                    cmd.Parameters.AddWithValue("@DateLastEdited", ReadProperty(DateLastEditedProperty).DBValue).DbType = DbType.DateTime;
                    cmd.Parameters.AddWithValue("@ListIDCanBoDuocGiao", ReadProperty(ListIDCanBoDuocGiaoProperty) == null ? (object)DBNull.Value : ReadProperty(ListIDCanBoDuocGiaoProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@ListHoTenCanBoDuocGiao", ReadProperty(ListHoTenCanBoDuocGiaoProperty) == null ? (object)DBNull.Value : ReadProperty(ListHoTenCanBoDuocGiaoProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@backup01", ReadProperty(Backup01Property) == null ? (object)DBNull.Value : ReadProperty(Backup01Property)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@backup02", ReadProperty(Backup02Property) == null ? (object)DBNull.Value : ReadProperty(Backup02Property)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@backup03", ReadProperty(Backup03Property) == null ? (object)DBNull.Value : ReadProperty(Backup03Property)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@ListIDUserDuocGiao", ReadProperty(ListIDUserDuocGiaoProperty) == null ? (object)DBNull.Value : ReadProperty
                        (ListIDUserDuocGiaoProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@Link", ReadProperty(LyDoProperty) == null ? (object)DBNull.Value : ReadProperty(LinkProperty)).DbType = DbType.String;
                    var args = new DataPortalHookArgs(cmd);
                    OnInsertPre(args);
                    cmd.ExecuteNonQuery();
                    OnInsertPost(args);
                    LoadProperty(IDProperty, (int) cmd.Parameters["@ID"].Value);
                }
                ctx.Commit();
            }
        }

        /// <summary>
        /// Updates in the database all changes made to the <see cref="HC_PhieuGiaoViec"/> object.
        /// </summary>
        protected override void DataPortal_Update()
        {
            using (var ctx = TransactionManager<SqlConnection, SqlTransaction>.GetManager("Connection"))
            {
                using (var cmd = new SqlCommand("dbo.HC_PhieuGiaoViec_update", ctx.Connection))
                {
                    cmd.Transaction = ctx.Transaction;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@ID", ReadProperty(IDProperty)).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@idNguoiDuocGiao", ReadProperty(IdNguoiDuocGiaoProperty) == null ? (object)DBNull.Value : ReadProperty(IdNguoiDuocGiaoProperty).Value).DbType = DbType.Int64;
                    cmd.Parameters.AddWithValue("@idNguoiGiaoViec", ReadProperty(IdNguoiGiaoViecProperty) == null ? (object)DBNull.Value : ReadProperty(IdNguoiGiaoViecProperty).Value).DbType = DbType.Int64;
                    cmd.Parameters.AddWithValue("@idNguoiTongHop1", ReadProperty(IdNguoiTongHop1Property) == null ? (object)DBNull.Value : ReadProperty(IdNguoiTongHop1Property).Value).DbType = DbType.Int64;
                    cmd.Parameters.AddWithValue("@idNguoiTongHop2", ReadProperty(IdNguoiTongHop2Property) == null ? (object)DBNull.Value : ReadProperty(IdNguoiTongHop2Property).Value).DbType = DbType.Int64;
                    cmd.Parameters.AddWithValue("@NoiDungCongViec", ReadProperty(NoiDungCongViecProperty) == null ? (object)DBNull.Value : ReadProperty(NoiDungCongViecProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@GhiChu", ReadProperty(GhiChuProperty) == null ? (object)DBNull.Value : ReadProperty(GhiChuProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@TrangThai", ReadProperty(TrangThaiProperty) == null ? (object)DBNull.Value : ReadProperty(TrangThaiProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@NgayGiao", ReadProperty(NgayGiaoProperty).DBValue).DbType = DbType.DateTime;
                    cmd.Parameters.AddWithValue("@BatDauTuNgay", ReadProperty(BatDauTuNgayProperty).DBValue).DbType = DbType.DateTime;
                    cmd.Parameters.AddWithValue("@LyDo", ReadProperty(LyDoProperty) == null ? (object)DBNull.Value : ReadProperty(LyDoProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@Link", ReadProperty(LyDoProperty) == null ? (object)DBNull.Value : ReadProperty(LinkProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@PhaiXongNgay", ReadProperty(PhaiXongNgayProperty).DBValue).DbType = DbType.DateTime;
                    cmd.Parameters.AddWithValue("@idBoPhanCanBoDuocGiao", ReadProperty(IdBoPhanCanBoDuocGiaoProperty) == null ? (object)DBNull.Value : ReadProperty(IdBoPhanCanBoDuocGiaoProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@idUserLastEdited", ReadProperty(IdUserLastEditedProperty) == null ? (object)DBNull.Value : ReadProperty(IdUserLastEditedProperty).Value).DbType = DbType.Int64;
                    cmd.Parameters.AddWithValue("@DateLastEdited", ReadProperty(DateLastEditedProperty).DBValue).DbType = DbType.DateTime;
                    cmd.Parameters.AddWithValue("@ListIDCanBoDuocGiao", ReadProperty(ListIDCanBoDuocGiaoProperty) == null ? (object)DBNull.Value : ReadProperty(ListIDCanBoDuocGiaoProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@ListHoTenCanBoDuocGiao", ReadProperty(ListHoTenCanBoDuocGiaoProperty) == null ? (object)DBNull.Value : ReadProperty(ListHoTenCanBoDuocGiaoProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@backup01", ReadProperty(Backup01Property) == null ? (object)DBNull.Value : ReadProperty(Backup01Property)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@backup02", ReadProperty(Backup02Property) == null ? (object)DBNull.Value : ReadProperty(Backup02Property)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@backup03", ReadProperty(Backup03Property) == null ? (object)DBNull.Value : ReadProperty(Backup03Property)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@ListIDUserDuocGiao", ReadProperty(ListIDUserDuocGiaoProperty) == null ? (object)DBNull.Value : ReadProperty(ListIDUserDuocGiaoProperty)).DbType = DbType.String;
                    var args = new DataPortalHookArgs(cmd);
                    OnUpdatePre(args);
                    cmd.ExecuteNonQuery();
                    OnUpdatePost(args);
                }
                ctx.Commit();
            }
        }

        /// <summary>
        /// Self deletes the <see cref="HC_PhieuGiaoViec"/> object.
        /// </summary>
        protected override void DataPortal_DeleteSelf()
        {
            DataPortal_Delete(ID);
        }

        /// <summary>
        /// Deletes the <see cref="HC_PhieuGiaoViec"/> object from database.
        /// </summary>
        /// <param name="id">The delete criteria.</param>
        protected void DataPortal_Delete(int id)
        {
            using (var ctx = TransactionManager<SqlConnection, SqlTransaction>.GetManager("Connection"))
            {
                using (var cmd = new SqlCommand("dbo.HC_PhieuGiaoViec_delete", ctx.Connection))
                {
                    cmd.Transaction = ctx.Transaction;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@ID", id).DbType = DbType.Int32;
                    var args = new DataPortalHookArgs(cmd, id);
                    OnDeletePre(args);
                    cmd.ExecuteNonQuery();
                    OnDeletePost(args);
                }
                ctx.Commit();
            }
        }

        #endregion

        #region Pseudo Events

        /// <summary>
        /// Occurs after setting all defaults for object creation.
        /// </summary>
        partial void OnCreate(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Delete, after setting query parameters and before the delete operation.
        /// </summary>
        partial void OnDeletePre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Delete, after the delete operation, before Commit().
        /// </summary>
        partial void OnDeletePost(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after setting query parameters and before the fetch operation.
        /// </summary>
        partial void OnFetchPre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after the fetch operation (object or collection is fully loaded and set up).
        /// </summary>
        partial void OnFetchPost(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after the low level fetch operation, before the data reader is destroyed.
        /// </summary>
        partial void OnFetchRead(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after setting query parameters and before the update operation.
        /// </summary>
        partial void OnUpdatePre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Insert, after the update operation, before setting back row identifiers (RowVersion) and Commit().
        /// </summary>
        partial void OnUpdatePost(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Insert, after setting query parameters and before the insert operation.
        /// </summary>
        partial void OnInsertPre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Insert, after the insert operation, before setting back row identifiers (ID and RowVersion) and Commit().
        /// </summary>
        partial void OnInsertPost(DataPortalHookArgs args);

        #endregion

    }
}
