//  This file was generated by CSLA Object Generator - CslaGenFork v4.3.0
//
// Filename:    NHAN_VIEN
// ObjectType:  NHAN_VIEN
// CSLAType:    ReadOnlyObject

using System;
using System.Data;
using System.Data.SqlClient;
using Csla;
using Csla.Data;
using NETLINK.LIB;

namespace oldSoft
{

    /// <summary>
    /// NHAN_VIEN (read only object).<br/>
    /// This is a generated base class of <see cref="NHAN_VIEN"/> business object.
    /// This class is a root object.
    /// </summary>
    [Serializable]
    public partial class NHAN_VIEN : ReadOnlyBase<NHAN_VIEN>
    {

        #region Business Properties

        /// <summary>
        /// Maintains metadata about <see cref="MA_NV"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> MA_NVProperty = RegisterProperty<string>(p => p.MA_NV, "MA NV", null);
        /// <summary>
        /// CDT.NHAN_VIEN.MA_NV
        /// </summary>
        /// <value>The MA NV.</value>
        public string MA_NV
        {
            get { return GetProperty(MA_NVProperty); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="TEN_NV"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> TEN_NVProperty = RegisterProperty<string>(p => p.TEN_NV, "TEN NV", null);
        /// <summary>
        /// CDT.NHAN_VIEN.TEN_NV
        /// </summary>
        /// <value>The TEN NV.</value>
        public string TEN_NV
        {
            get { return GetProperty(TEN_NVProperty); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="LOAI_NV"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> LOAI_NVProperty = RegisterProperty<string>(p => p.LOAI_NV, "LOAI NV", null);
        /// <summary>
        /// CDT.NHAN_VIEN.LOAI_NV
        /// </summary>
        /// <value>The LOAI NV.</value>
        public string LOAI_NV
        {
            get { return GetProperty(LOAI_NVProperty); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="MA_BOPHAN_ID"/> property.
        /// </summary>
        public static readonly PropertyInfo<int?> MA_BOPHAN_IDProperty = RegisterProperty<int?>(p => p.MA_BOPHAN_ID, "MA BOPHAN ID", null);
        /// <summary>
        /// CDT.NHAN_VIEN.MA_BOPHAN_ID
        /// </summary>
        /// <value>The MA BOPHAN ID.</value>
        public int? MA_BOPHAN_ID
        {
            get { return GetProperty(MA_BOPHAN_IDProperty); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="NGAY_SINH"/> property.
        /// </summary>
        public static readonly PropertyInfo<Object> NGAY_SINHProperty = RegisterProperty<Object>(p => p.NGAY_SINH, "NGAY SINH");
        /// <summary>
        /// CDT.NHAN_VIEN.NGAY_SINH
        /// </summary>
        /// <value>The NGAY SINH.</value>
        public Object NGAY_SINH
        {
            get { return GetProperty(NGAY_SINHProperty); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="GIOI_TINH"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> GIOI_TINHProperty = RegisterProperty<string>(p => p.GIOI_TINH, "GIOI TINH", null);
        /// <summary>
        /// CDT.NHAN_VIEN.GIOI_TINH
        /// </summary>
        /// <value>The GIOI TINH.</value>
        public string GIOI_TINH
        {
            get { return GetProperty(GIOI_TINHProperty); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="CHUC_VU"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> CHUC_VUProperty = RegisterProperty<string>(p => p.CHUC_VU, "CHUC VU", null);
        /// <summary>
        /// CDT.NHAN_VIEN.CHUC_VU
        /// </summary>
        /// <value>The CHUC VU.</value>
        public string CHUC_VU
        {
            get { return GetProperty(CHUC_VUProperty); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="TEN_LOGIN"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> TEN_LOGINProperty = RegisterProperty<string>(p => p.TEN_LOGIN, "TEN LOGIN", null);
        /// <summary>
        /// CDT.NHAN_VIEN.TEN_LOGIN
        /// </summary>
        /// <value>The TEN LOGIN.</value>
        public string TEN_LOGIN
        {
            get { return GetProperty(TEN_LOGINProperty); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="PASSWORD"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> PASSWORDProperty = RegisterProperty<string>(p => p.PASSWORD, "PASSWORD", null);
        /// <summary>
        /// CDT.NHAN_VIEN.PASSWORD
        /// </summary>
        /// <value>The PASSWORD.</value>
        public string PASSWORD
        {
            get { return GetProperty(PASSWORDProperty); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="MA_DTOC"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> MA_DTOCProperty = RegisterProperty<string>(p => p.MA_DTOC, "MA DTOC", null);
        /// <summary>
        /// CDT.NHAN_VIEN.MA_DTOC
        /// </summary>
        /// <value>The MA DTOC.</value>
        public string MA_DTOC
        {
            get { return GetProperty(MA_DTOCProperty); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="TON_GIAO"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> TON_GIAOProperty = RegisterProperty<string>(p => p.TON_GIAO, "TON GIAO", null);
        /// <summary>
        /// CDT.NHAN_VIEN.TON_GIAO
        /// </summary>
        /// <value>The TON GIAO.</value>
        public string TON_GIAO
        {
            get { return GetProperty(TON_GIAOProperty); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="TEN_KHAC"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> TEN_KHACProperty = RegisterProperty<string>(p => p.TEN_KHAC, "TEN KHAC", null);
        /// <summary>
        /// CDT.NHAN_VIEN.TEN_KHAC
        /// </summary>
        /// <value>The TEN KHAC.</value>
        public string TEN_KHAC
        {
            get { return GetProperty(TEN_KHACProperty); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="QUE_QUAN"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> QUE_QUANProperty = RegisterProperty<string>(p => p.QUE_QUAN, "QUE QUAN", null);
        /// <summary>
        /// CDT.NHAN_VIEN.QUE_QUAN
        /// </summary>
        /// <value>The QUE QUAN.</value>
        public string QUE_QUAN
        {
            get { return GetProperty(QUE_QUANProperty); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="NOI_SINH"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> NOI_SINHProperty = RegisterProperty<string>(p => p.NOI_SINH, "NOI SINH", null);
        /// <summary>
        /// CDT.NHAN_VIEN.NOI_SINH
        /// </summary>
        /// <value>The NOI SINH.</value>
        public string NOI_SINH
        {
            get { return GetProperty(NOI_SINHProperty); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="DIA_CHI"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> DIA_CHIProperty = RegisterProperty<string>(p => p.DIA_CHI, "DIA CHI", null);
        /// <summary>
        /// CDT.NHAN_VIEN.DIA_CHI
        /// </summary>
        /// <value>The DIA CHI.</value>
        public string DIA_CHI
        {
            get { return GetProperty(DIA_CHIProperty); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="TPHAN_GDINH"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> TPHAN_GDINHProperty = RegisterProperty<string>(p => p.TPHAN_GDINH, "TPHAN GDINH", null);
        /// <summary>
        /// CDT.NHAN_VIEN.TPHAN_GDINH
        /// </summary>
        /// <value>The TPHAN GDINH.</value>
        public string TPHAN_GDINH
        {
            get { return GetProperty(TPHAN_GDINHProperty); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="SO_CMND"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> SO_CMNDProperty = RegisterProperty<string>(p => p.SO_CMND, "SO CMND", null);
        /// <summary>
        /// CDT.NHAN_VIEN.SO_CMND
        /// </summary>
        /// <value>The SO CMND.</value>
        public string SO_CMND
        {
            get { return GetProperty(SO_CMNDProperty); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="SO_BHYT"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> SO_BHYTProperty = RegisterProperty<string>(p => p.SO_BHYT, "SO BHYT", null);
        /// <summary>
        /// CDT.NHAN_VIEN.SO_BHYT
        /// </summary>
        /// <value>The SO BHYT.</value>
        public string SO_BHYT
        {
            get { return GetProperty(SO_BHYTProperty); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="ANH"/> property.
        /// </summary>
        public static readonly PropertyInfo<byte[]> ANHProperty = RegisterProperty<byte[]>(p => p.ANH, "ANH");
        /// <summary>
        /// CDT.NHAN_VIEN.ANH
        /// </summary>
        /// <value>The ANH.</value>
        public byte[] ANH
        {
            get { return GetProperty(ANHProperty); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="NGHE_NGHIEP"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> NGHE_NGHIEPProperty = RegisterProperty<string>(p => p.NGHE_NGHIEP, "NGHE NGHIEP", null);
        /// <summary>
        /// CDT.NHAN_VIEN.NGHE_NGHIEP
        /// </summary>
        /// <value>The NGHE NGHIEP.</value>
        public string NGHE_NGHIEP
        {
            get { return GetProperty(NGHE_NGHIEPProperty); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="CTAC_CHINH"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> CTAC_CHINHProperty = RegisterProperty<string>(p => p.CTAC_CHINH, "CTAC CHINH", null);
        /// <summary>
        /// CDT.NHAN_VIEN.CTAC_CHINH
        /// </summary>
        /// <value>The CTAC CHINH.</value>
        public string CTAC_CHINH
        {
            get { return GetProperty(CTAC_CHINHProperty); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="NGAY_TDUNG"/> property.
        /// </summary>
        public static readonly PropertyInfo<Object> NGAY_TDUNGProperty = RegisterProperty<Object>(p => p.NGAY_TDUNG, "NGAY TDUNG");
        /// <summary>
        /// CDT.NHAN_VIEN.NGAY_TDUNG
        /// </summary>
        /// <value>The NGAY TDUNG.</value>
        public Object NGAY_TDUNG
        {
            get { return GetProperty(NGAY_TDUNGProperty); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="NGAY_BCHE"/> property.
        /// </summary>
        public static readonly PropertyInfo<Object> NGAY_BCHEProperty = RegisterProperty<Object>(p => p.NGAY_BCHE, "NGAY BCHE");
        /// <summary>
        /// CDT.NHAN_VIEN.NGAY_BCHE
        /// </summary>
        /// <value>The NGAY BCHE.</value>
        public Object NGAY_BCHE
        {
            get { return GetProperty(NGAY_BCHEProperty); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="SO_DTHOAI"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> SO_DTHOAIProperty = RegisterProperty<string>(p => p.SO_DTHOAI, "SO DTHOAI", null);
        /// <summary>
        /// CDT.NHAN_VIEN.SO_DTHOAI
        /// </summary>
        /// <value>The SO DTHOAI.</value>
        public string SO_DTHOAI
        {
            get { return GetProperty(SO_DTHOAIProperty); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="NGAY_DOAN"/> property.
        /// </summary>
        public static readonly PropertyInfo<Object> NGAY_DOANProperty = RegisterProperty<Object>(p => p.NGAY_DOAN, "NGAY DOAN");
        /// <summary>
        /// CDT.NHAN_VIEN.NGAY_DOAN
        /// </summary>
        /// <value>The NGAY DOAN.</value>
        public Object NGAY_DOAN
        {
            get { return GetProperty(NGAY_DOANProperty); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="NGAY_DANG"/> property.
        /// </summary>
        public static readonly PropertyInfo<Object> NGAY_DANGProperty = RegisterProperty<Object>(p => p.NGAY_DANG, "NGAY DANG");
        /// <summary>
        /// CDT.NHAN_VIEN.NGAY_DANG
        /// </summary>
        /// <value>The NGAY DANG.</value>
        public Object NGAY_DANG
        {
            get { return GetProperty(NGAY_DANGProperty); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="SUC_KHOE"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> SUC_KHOEProperty = RegisterProperty<string>(p => p.SUC_KHOE, "SUC KHOE", null);
        /// <summary>
        /// CDT.NHAN_VIEN.SUC_KHOE
        /// </summary>
        /// <value>The SUC KHOE.</value>
        public string SUC_KHOE
        {
            get { return GetProperty(SUC_KHOEProperty); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="KHEN_THUONG"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> KHEN_THUONGProperty = RegisterProperty<string>(p => p.KHEN_THUONG, "KHEN THUONG", null);
        /// <summary>
        /// CDT.NHAN_VIEN.KHEN_THUONG
        /// </summary>
        /// <value>The KHEN THUONG.</value>
        public string KHEN_THUONG
        {
            get { return GetProperty(KHEN_THUONGProperty); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="KY_LUAT"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> KY_LUATProperty = RegisterProperty<string>(p => p.KY_LUAT, "KY LUAT", null);
        /// <summary>
        /// CDT.NHAN_VIEN.KY_LUAT
        /// </summary>
        /// <value>The KY LUAT.</value>
        public string KY_LUAT
        {
            get { return GetProperty(KY_LUATProperty); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="QT_CTAC"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> QT_CTACProperty = RegisterProperty<string>(p => p.QT_CTAC, "QT CTAC", null);
        /// <summary>
        /// CDT.NHAN_VIEN.QT_CTAC
        /// </summary>
        /// <value>The QT CTAC.</value>
        public string QT_CTAC
        {
            get { return GetProperty(QT_CTACProperty); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="TD_VHOA"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> TD_VHOAProperty = RegisterProperty<string>(p => p.TD_VHOA, "TD VHOA", null);
        /// <summary>
        /// CDT.NHAN_VIEN.TD_VHOA
        /// </summary>
        /// <value>The TD VHOA.</value>
        public string TD_VHOA
        {
            get { return GetProperty(TD_VHOAProperty); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="TD_CTRI"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> TD_CTRIProperty = RegisterProperty<string>(p => p.TD_CTRI, "TD CTRI", null);
        /// <summary>
        /// CDT.NHAN_VIEN.TD_CTRI
        /// </summary>
        /// <value>The TD CTRI.</value>
        public string TD_CTRI
        {
            get { return GetProperty(TD_CTRIProperty); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="TD_NNGU"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> TD_NNGUProperty = RegisterProperty<string>(p => p.TD_NNGU, "TD NNGU", null);
        /// <summary>
        /// CDT.NHAN_VIEN.TD_NNGU
        /// </summary>
        /// <value>The TD NNGU.</value>
        public string TD_NNGU
        {
            get { return GetProperty(TD_NNGUProperty); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="TD_CMON"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> TD_CMONProperty = RegisterProperty<string>(p => p.TD_CMON, "TD CMON", null);
        /// <summary>
        /// CDT.NHAN_VIEN.TD_CMON
        /// </summary>
        /// <value>The TD CMON.</value>
        public string TD_CMON
        {
            get { return GetProperty(TD_CMONProperty); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="SO_TRUONG"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> SO_TRUONGProperty = RegisterProperty<string>(p => p.SO_TRUONG, "SO TRUONG", null);
        /// <summary>
        /// CDT.NHAN_VIEN.SO_TRUONG
        /// </summary>
        /// <value>The SO TRUONG.</value>
        public string SO_TRUONG
        {
            get { return GetProperty(SO_TRUONGProperty); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="HOC_HAM"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> HOC_HAMProperty = RegisterProperty<string>(p => p.HOC_HAM, "HOC HAM", null);
        /// <summary>
        /// CDT.NHAN_VIEN.HOC_HAM
        /// </summary>
        /// <value>The HOC HAM.</value>
        public string HOC_HAM
        {
            get { return GetProperty(HOC_HAMProperty); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="HOC_VI"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> HOC_VIProperty = RegisterProperty<string>(p => p.HOC_VI, "HOC VI", null);
        /// <summary>
        /// CDT.NHAN_VIEN.HOC_VI
        /// </summary>
        /// <value>The HOC VI.</value>
        public string HOC_VI
        {
            get { return GetProperty(HOC_VIProperty); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="QT_DTAO"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> QT_DTAOProperty = RegisterProperty<string>(p => p.QT_DTAO, "QT DTAO", null);
        /// <summary>
        /// CDT.NHAN_VIEN.QT_DTAO
        /// </summary>
        /// <value>The QT DTAO.</value>
        public string QT_DTAO
        {
            get { return GetProperty(QT_DTAOProperty); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="NGACH_LUONG"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> NGACH_LUONGProperty = RegisterProperty<string>(p => p.NGACH_LUONG, "NGACH LUONG", null);
        /// <summary>
        /// CDT.NHAN_VIEN.NGACH_LUONG
        /// </summary>
        /// <value>The NGACH LUONG.</value>
        public string NGACH_LUONG
        {
            get { return GetProperty(NGACH_LUONGProperty); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="BAC_LUONG"/> property.
        /// </summary>
        public static readonly PropertyInfo<int?> BAC_LUONGProperty = RegisterProperty<int?>(p => p.BAC_LUONG, "BAC LUONG", null);
        /// <summary>
        /// CDT.NHAN_VIEN.BAC_LUONG
        /// </summary>
        /// <value>The BAC LUONG.</value>
        public int? BAC_LUONG
        {
            get { return GetProperty(BAC_LUONGProperty); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="HE_SO"/> property.
        /// </summary>
        public static readonly PropertyInfo<int?> HE_SOProperty = RegisterProperty<int?>(p => p.HE_SO, "HE SO", null);
        /// <summary>
        /// CDT.NHAN_VIEN.HE_SO
        /// </summary>
        /// <value>The HE SO.</value>
        public int? HE_SO
        {
            get { return GetProperty(HE_SOProperty); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="PHU_CAP"/> property.
        /// </summary>
        public static readonly PropertyInfo<int?> PHU_CAPProperty = RegisterProperty<int?>(p => p.PHU_CAP, "PHU CAP", null);
        /// <summary>
        /// CDT.NHAN_VIEN.PHU_CAP
        /// </summary>
        /// <value>The PHU CAP.</value>
        public int? PHU_CAP
        {
            get { return GetProperty(PHU_CAPProperty); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="NGAY_TLUONG"/> property.
        /// </summary>
        public static readonly PropertyInfo<Object> NGAY_TLUONGProperty = RegisterProperty<Object>(p => p.NGAY_TLUONG, "NGAY TLUONG");
        /// <summary>
        /// CDT.NHAN_VIEN.NGAY_TLUONG
        /// </summary>
        /// <value>The NGAY TLUONG.</value>
        public Object NGAY_TLUONG
        {
            get { return GetProperty(NGAY_TLUONGProperty); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="NHAN_VIEN_ID"/> property.
        /// </summary>
        public static readonly PropertyInfo<int> NHAN_VIEN_IDProperty = RegisterProperty<int>(p => p.NHAN_VIEN_ID, "NHAN VIEN ID");
        /// <summary>
        /// CDT.NHAN_VIEN.NHAN_VIEN_ID
        /// </summary>
        /// <value>The NHAN VIEN ID.</value>
        public int NHAN_VIEN_ID
        {
            get { return GetProperty(NHAN_VIEN_IDProperty); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="LOAI"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> LOAIProperty = RegisterProperty<string>(p => p.LOAI, "LOAI", null);
        /// <summary>
        /// CDT.NHAN_VIEN.LOAI
        /// </summary>
        /// <value>The LOAI.</value>
        public string LOAI
        {
            get { return GetProperty(LOAIProperty); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="VPP"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> VPPProperty = RegisterProperty<string>(p => p.VPP, "VPP", null);
        /// <summary>
        /// CDT.NHAN_VIEN.VPP
        /// </summary>
        /// <value>The VPP.</value>
        public string VPP
        {
            get { return GetProperty(VPPProperty); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="MA_TRINHDO"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> MA_TRINHDOProperty = RegisterProperty<string>(p => p.MA_TRINHDO, "MA TRINHDO", null);
        /// <summary>
        /// CDT.NHAN_VIEN.MA_TRINHDO
        /// </summary>
        /// <value>The MA TRINHDO.</value>
        public string MA_TRINHDO
        {
            get { return GetProperty(MA_TRINHDOProperty); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="MA_CHUCVU"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> MA_CHUCVUProperty = RegisterProperty<string>(p => p.MA_CHUCVU, "MA CHUCVU", null);
        /// <summary>
        /// CDT.NHAN_VIEN.MA_CHUCVU
        /// </summary>
        /// <value>The MA CHUCVU.</value>
        public string MA_CHUCVU
        {
            get { return GetProperty(MA_CHUCVUProperty); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="MA_TO_ID"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> MA_TO_IDProperty = RegisterProperty<string>(p => p.MA_TO_ID, "MA TO ID", null);
        /// <summary>
        /// CDT.NHAN_VIEN.MA_TO_ID
        /// </summary>
        /// <value>The MA TO ID.</value>
        public string MA_TO_ID
        {
            get { return GetProperty(MA_TO_IDProperty); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="TONG_NGAY_PHEP"/> property.
        /// </summary>
        public static readonly PropertyInfo<int?> TONG_NGAY_PHEPProperty = RegisterProperty<int?>(p => p.TONG_NGAY_PHEP, "TONG NGAY PHEP", null);
        /// <summary>
        /// CDT.NHAN_VIEN.TONG_NGAY_PHEP
        /// </summary>
        /// <value>The TONG NGAY PHEP.</value>
        public int? TONG_NGAY_PHEP
        {
            get { return GetProperty(TONG_NGAY_PHEPProperty); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="STT"/> property.
        /// </summary>
        public static readonly PropertyInfo<int?> STTProperty = RegisterProperty<int?>(p => p.STT, "STT", null);
        /// <summary>
        /// CDT.NHAN_VIEN.STT
        /// </summary>
        /// <value>The STT.</value>
        public int? STT
        {
            get { return GetProperty(STTProperty); }
        }

        #endregion

        #region Factory Methods

        /// <summary>
        /// Factory method. Loads a <see cref="NHAN_VIEN"/> object, based on given parameters.
        /// </summary>
        /// <param name="nHAN_VIEN_ID">The NHAN_VIEN_ID parameter of the NHAN_VIEN to fetch.</param>
        /// <returns>A reference to the fetched <see cref="NHAN_VIEN"/> object.</returns>
        public static NHAN_VIEN GetNHAN_VIEN(int nHAN_VIEN_ID)
        {
            return DataPortal.Fetch<NHAN_VIEN>(nHAN_VIEN_ID);
        }

        /// <summary>
        /// Factory method. Asynchronously loads a <see cref="NHAN_VIEN"/> object, based on given parameters.
        /// </summary>
        /// <param name="nHAN_VIEN_ID">The NHAN_VIEN_ID parameter of the NHAN_VIEN to fetch.</param>
        /// <param name="callback">The completion callback method.</param>
        public static void GetNHAN_VIEN(int nHAN_VIEN_ID, EventHandler<DataPortalResult<NHAN_VIEN>> callback)
        {
            DataPortal.BeginFetch<NHAN_VIEN>(nHAN_VIEN_ID, callback);
        }

        #endregion

        #region Constructor

        /// <summary>
        /// Initializes a new instance of the <see cref="NHAN_VIEN"/> class.
        /// </summary>
        /// <remarks> Do not use to create a Csla object. Use factory methods instead.</remarks>
        private NHAN_VIEN()
        {
            // Prevent direct creation
        }

        #endregion

        #region Data Access

        /// <summary>
        /// Loads a <see cref="NHAN_VIEN"/> object from the database, based on given criteria.
        /// </summary>
        /// <param name="nHAN_VIEN_ID">The NHAN VIEN ID.</param>
        protected void DataPortal_Fetch(int nHAN_VIEN_ID)
        {
            using (var ctx = ConnectionManager<SqlConnection>.GetManager("Connection2"))
            {
                using (var cmd = new SqlCommand("dbo.NHAN_VIEN_get", ctx.Connection))
                {
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@NHAN_VIEN_ID", nHAN_VIEN_ID).DbType = DbType.Int32;
                    var args = new DataPortalHookArgs(cmd, nHAN_VIEN_ID);
                    OnFetchPre(args);
                    Fetch(cmd);
                    OnFetchPost(args);
                }
            }
        }

        private void Fetch(SqlCommand cmd)
        {
            using (var dr = new SafeDataReader(cmd.ExecuteReader()))
            {
                if (dr.Read())
                {
                    Fetch(dr);
                }
            }
        }

        /// <summary>
        /// Loads a <see cref="NHAN_VIEN"/> object from the given SafeDataReader.
        /// </summary>
        /// <param name="dr">The SafeDataReader to use.</param>
        private void Fetch(SafeDataReader dr)
        {
            // Value properties
            LoadProperty(TEN_NVProperty, dr.GetString("TEN_NV"));
            LoadProperty(NHAN_VIEN_IDProperty, dr.GetInt32("NHAN_VIEN_ID"));
            var args = new DataPortalHookArgs(dr);
            OnFetchRead(args);
        }

        #endregion

        #region Pseudo Events

        /// <summary>
        /// Occurs after setting query parameters and before the fetch operation.
        /// </summary>
        partial void OnFetchPre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after the fetch operation (object or collection is fully loaded and set up).
        /// </summary>
        partial void OnFetchPost(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after the low level fetch operation, before the data reader is destroyed.
        /// </summary>
        partial void OnFetchRead(DataPortalHookArgs args);

        #endregion

    }
}
