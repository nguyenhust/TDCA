//  This file was generated by CSLA Object Generator - CslaGenFork v4.3.0
//
// Filename:    TT_SuKien_Info
// ObjectType:  TT_SuKien_Info
// CSLAType:    EditableChild

using System;
using System.Data;
using System.Data.SqlClient;
using Csla;
using Csla.Data;
using NETLINK.LIB;

namespace TruyenThong.LIB
{

    /// <summary>
    /// TT_SuKien_Info (editable child object).<br/>
    /// This is a generated base class of <see cref="TT_SuKien_Info"/> business object.
    /// </summary>
    /// <remarks>
    /// This class is an item of <see cref="TT_SuKien_Coll"/> collection.
    /// </remarks>
    [Serializable]
    public partial class TT_SuKien_Info : BusinessBase<TT_SuKien_Info>
    {

        #region Static Fields

        private static Int64 _lastID;

        #endregion

        #region Business Properties
        /// <summary>
        /// Maintains metadata about <see cref="LinkFile"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> LoaiProperty = RegisterProperty<string>(p => p.Loai, "Loai");
        /// <summary>
        /// Gets or sets the Link File.
        /// </summary>
        /// <value>The Link File.</value>
        public string Loai
        {
            get { return GetProperty(LoaiProperty); }
            set { SetProperty(LoaiProperty, value); }
        }
        /// <summary>
        /// Maintains metadata about <see cref="ID"/> property.
        /// </summary>
        public static readonly PropertyInfo<Int64> IDProperty = RegisterProperty<Int64>(p => p.ID, "ID");
        /// <summary>
        /// Gets the ID.
        /// </summary>
        /// <value>The ID.</value>
        public Int64 ID
        {
            get { return GetProperty(IDProperty); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="Ten"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> TenProperty = RegisterProperty<string>(p => p.Ten, "Ten");
        /// <summary>
        /// Gets or sets the Ten.
        /// </summary>
        /// <value>The Ten.</value>
        public string Ten
        {
            get { return GetProperty(TenProperty); }
            set { SetProperty(TenProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="IDChuyenNganh"/> property.
        /// </summary>
        public static readonly PropertyInfo<int> IDChuyenNganhProperty = RegisterProperty<int>(p => p.IDChuyenNganh, "IDChuyen Nganh");
        /// <summary>
        /// Gets or sets the IDChuyen Nganh.
        /// </summary>
        /// <value>The IDChuyen Nganh.</value>
        public int IDChuyenNganh
        {
            get { return GetProperty(IDChuyenNganhProperty); }
            set { SetProperty(IDChuyenNganhProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="DiaDiem"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> DiaDiemProperty = RegisterProperty<string>(p => p.DiaDiem, "Dia Diem");
        /// <summary>
        /// Gets or sets the Dia Diem.
        /// </summary>
        /// <value>The Dia Diem.</value>
        public string DiaDiem
        {
            get { return GetProperty(DiaDiemProperty); }
            set { SetProperty(DiaDiemProperty, value); }
        }
        /// <summary>
        /// Maintains metadata about <see cref="LinkFile"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> TenChuyenNganhProperty = RegisterProperty<string>(p => p.TenChuyenNganh, "Loai");
        /// <summary>
        /// Gets or sets the Link File.
        /// </summary>
        /// <value>The Link File.</value>
        public string TenChuyenNganh
        {
            get { return GetProperty(TenChuyenNganhProperty); }
            set { SetProperty(TenChuyenNganhProperty, value); }
        }
        /// <summary>
        /// Maintains metadata about <see cref="ThoiGian"/> property.
        /// </summary>
        public static readonly PropertyInfo<SmartDate> ThoiGianProperty = RegisterProperty<SmartDate>(p => p.ThoiGian, "Thoi Gian");
        /// <summary>
        /// Gets or sets the Thoi Gian.
        /// </summary>
        /// <value>The Thoi Gian.</value>
        public string ThoiGian
        {
            get { return GetPropertyConvert<SmartDate, String>(ThoiGianProperty); }
            set { SetPropertyConvert<SmartDate, String>(ThoiGianProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="IDLoai"/> property.
        /// </summary>
        public static readonly PropertyInfo<int> IDLoaiProperty = RegisterProperty<int>(p => p.IDLoai, "IDLoai");
        /// <summary>
        /// Gets or sets the IDLoai.
        /// </summary>
        /// <value>The IDLoai.</value>
        public int IDLoai
        {
            get { return GetProperty(IDLoaiProperty); }
            set { SetProperty(IDLoaiProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="ChuTri"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> ChuTriProperty = RegisterProperty<string>(p => p.ChuTri, "Chu Tri");
        /// <summary>
        /// Gets or sets the Chu Tri.
        /// </summary>
        /// <value>The Chu Tri.</value>
        public string ChuTri
        {
            get { return GetProperty(ChuTriProperty); }
            set { SetProperty(ChuTriProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="GhiChu"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> GhiChuProperty = RegisterProperty<string>(p => p.GhiChu, "Ghi Chu");
        /// <summary>
        /// Gets or sets the Ghi Chu.
        /// </summary>
        /// <value>The Ghi Chu.</value>
        public string GhiChu
        {
            get { return GetProperty(GhiChuProperty); }
            set { SetProperty(GhiChuProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="LinkFile"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> LinkFileProperty = RegisterProperty<string>(p => p.LinkFile, "Link File");
        /// <summary>
        /// Gets or sets the Link File.
        /// </summary>
        /// <value>The Link File.</value>
        public string LinkFile
        {
            get { return GetProperty(LinkFileProperty); }
            set { SetProperty(LinkFileProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="LastEdited_UserID"/> property.
        /// </summary>
        public static readonly PropertyInfo<Int64?> LastEdited_UserIDProperty = RegisterProperty<Int64?>(p => p.LastEdited_UserID, "Last Edited User ID");
        /// <summary>
        /// Gets or sets the Last Edited User ID.
        /// </summary>
        /// <value>The Last Edited User ID.</value>
        public Int64? LastEdited_UserID
        {
            get { return GetProperty(LastEdited_UserIDProperty); }
            set { SetProperty(LastEdited_UserIDProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="LastEdited_Date"/> property.
        /// </summary>
        public static readonly PropertyInfo<SmartDate> LastEdited_DateProperty = RegisterProperty<SmartDate>(p => p.LastEdited_Date, "Last Edited Date");
        /// <summary>
        /// Gets or sets the Last Edited Date.
        /// </summary>
        /// <value>The Last Edited Date.</value>
        public string LastEdited_Date
        {
            get { return GetPropertyConvert<SmartDate, String>(LastEdited_DateProperty); }
            set { SetPropertyConvert<SmartDate, String>(LastEdited_DateProperty, value); }
        }
        public DateTime DateThoiGian
        {
            get { return GetProperty(ThoiGianProperty); }
        }

        #endregion

        #region Factory Methods

        /// <summary>
        /// Factory method. Creates a new <see cref="TT_SuKien_Info"/> object.
        /// </summary>
        /// <returns>A reference to the created <see cref="TT_SuKien_Info"/> object.</returns>
        internal static TT_SuKien_Info NewTT_SuKien_Info()
        {
            return DataPortal.CreateChild<TT_SuKien_Info>();
        }

        /// <summary>
        /// Factory method. Asynchronously creates a new <see cref="TT_SuKien_Info"/> object.
        /// </summary>
        /// <param name="callback">The completion callback method.</param>
        internal static void NewTT_SuKien_Info(EventHandler<DataPortalResult<TT_SuKien_Info>> callback)
        {
            DataPortal.BeginCreate<TT_SuKien_Info>(callback);
        }

        /// <summary>
        /// Factory method. Loads a <see cref="TT_SuKien_Info"/> object from the given SafeDataReader.
        /// </summary>
        /// <param name="dr">The SafeDataReader to use.</param>
        /// <returns>A reference to the fetched <see cref="TT_SuKien_Info"/> object.</returns>
        internal static TT_SuKien_Info GetTT_SuKien_Info(SafeDataReader dr)
        {
            TT_SuKien_Info obj = new TT_SuKien_Info();
            // show the framework that this is a child object
            obj.MarkAsChild();
            obj.Fetch(dr);
            obj.MarkOld();
            // check all object rules and property rules
            obj.BusinessRules.CheckRules();
            return obj;
        }

        #endregion

        #region Constructor

        /// <summary>
        /// Initializes a new instance of the <see cref="TT_SuKien_Info"/> class.
        /// </summary>
        /// <remarks> Do not use to create a Csla object. Use factory methods instead.</remarks>
        private TT_SuKien_Info()
        {
            // Prevent direct creation

            // show the framework that this is a child object
            MarkAsChild();
        }

        #endregion

        #region Data Access

        /// <summary>
        /// Loads default values for the <see cref="TT_SuKien_Info"/> object properties.
        /// </summary>
        [Csla.RunLocal]
        protected override void Child_Create()
        {
            LoadProperty(IDProperty, System.Threading.Interlocked.Decrement(ref _lastID));
            LoadProperty(DiaDiemProperty, null);
            LoadProperty(ThoiGianProperty, null);
            LoadProperty(ChuTriProperty, null);
            LoadProperty(GhiChuProperty, null);
            LoadProperty(LinkFileProperty, null);
            LoadProperty(LoaiProperty, null);
            LoadProperty(LastEdited_DateProperty, null);
            LoadProperty(TenChuyenNganhProperty, null);
            var args = new DataPortalHookArgs();
            OnCreate(args);
            base.Child_Create();
        }

        /// <summary>
        /// Loads a <see cref="TT_SuKien_Info"/> object from the given SafeDataReader.
        /// </summary>
        /// <param name="dr">The SafeDataReader to use.</param>
        private void Fetch(SafeDataReader dr)
        {
            // Value properties
          LoadProperty(IDProperty, dr.GetInt64("ID"));
            LoadProperty(TenProperty, dr.GetString("Ten"));
            LoadProperty(IDChuyenNganhProperty, dr.GetInt32("IDChuyenNganh"));
            LoadProperty(DiaDiemProperty,  dr.GetString("DiaDiem"));
            LoadProperty(ThoiGianProperty, dr.GetDateTime("ThoiGian"));
            LoadProperty(IDLoaiProperty, dr.GetInt32("IDLoai"));
            LoadProperty(ChuTriProperty, dr.GetString("ChuTri"));
            LoadProperty(GhiChuProperty, dr.GetString("GhiChu"));
            LoadProperty(LoaiProperty, dr.GetString("Loai"));
            LoadProperty(LinkFileProperty, dr.GetString("LinkFile"));
            LoadProperty(LastEdited_UserIDProperty, dr.GetInt64("LastEdited_UserID"));
            LoadProperty(LastEdited_DateProperty, dr.GetSmartDate("LastEdited_Date"));
            LoadProperty(TenChuyenNganhProperty, dr.GetString("TenChuyenNganh"));
            var args = new DataPortalHookArgs(dr);
            OnFetchRead(args);
        }

        /// <summary>
        /// Inserts a new <see cref="TT_SuKien_Info"/> object in the database.
        /// </summary>
        private void Child_Insert()
        {
            using (var ctx = TransactionManager<SqlConnection, SqlTransaction>.GetManager("Connection"))
            {
                using (var cmd = new SqlCommand("dbo.TT_SuKien_Info_add", ctx.Connection))
                {
                    cmd.Transaction = ctx.Transaction;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@ID", ReadProperty(IDProperty)).Direction = ParameterDirection.Output;
                    cmd.Parameters.AddWithValue("@Ten", ReadProperty(TenProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@IDChuyenNganh", ReadProperty(IDChuyenNganhProperty)).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@DiaDiem", ReadProperty(DiaDiemProperty) == null ? (object)DBNull.Value : ReadProperty(DiaDiemProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@ThoiGian", ReadProperty(ThoiGianProperty).DBValue).DbType = DbType.DateTime;
                    cmd.Parameters.AddWithValue("@IDLoai", ReadProperty(IDLoaiProperty)).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@ChuTri", ReadProperty(ChuTriProperty) == null ? (object)DBNull.Value : ReadProperty(ChuTriProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@GhiChu", ReadProperty(GhiChuProperty) == null ? (object)DBNull.Value : ReadProperty(GhiChuProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@LinkFile", ReadProperty(LinkFileProperty) == null ? (object)DBNull.Value : ReadProperty(LinkFileProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@LastEdited_UserID", ReadProperty(LastEdited_UserIDProperty) == null ? (object)DBNull.Value : ReadProperty(LastEdited_UserIDProperty).Value).DbType = DbType.Int64;
                    cmd.Parameters.AddWithValue("@LastEdited_Date", ReadProperty(LastEdited_DateProperty).DBValue).DbType = DbType.DateTime;
                    var args = new DataPortalHookArgs(cmd);
                    OnInsertPre(args);
                    cmd.ExecuteNonQuery();
                    OnInsertPost(args);
                    LoadProperty(IDProperty, (long) cmd.Parameters["@ID"].Value);
                }
            }
        }

        /// <summary>
        /// Updates in the database all changes made to the <see cref="TT_SuKien_Info"/> object.
        /// </summary>
        private void Child_Update()
        {
            if (!IsDirty)
                return;

            using (var ctx = TransactionManager<SqlConnection, SqlTransaction>.GetManager("Connection"))
            {
                using (var cmd = new SqlCommand("dbo.TT_SuKien_Info_update", ctx.Connection))
                {
                    cmd.Transaction = ctx.Transaction;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@ID", ReadProperty(IDProperty)).DbType = DbType.Int64;
                    cmd.Parameters.AddWithValue("@Ten", ReadProperty(TenProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@IDChuyenNganh", ReadProperty(IDChuyenNganhProperty)).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@DiaDiem", ReadProperty(DiaDiemProperty) == null ? (object)DBNull.Value : ReadProperty(DiaDiemProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@ThoiGian", ReadProperty(ThoiGianProperty).DBValue).DbType = DbType.DateTime;
                    cmd.Parameters.AddWithValue("@IDLoai", ReadProperty(IDLoaiProperty)).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@ChuTri", ReadProperty(ChuTriProperty) == null ? (object)DBNull.Value : ReadProperty(ChuTriProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@GhiChu", ReadProperty(GhiChuProperty) == null ? (object)DBNull.Value : ReadProperty(GhiChuProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@LinkFile", ReadProperty(LinkFileProperty) == null ? (object)DBNull.Value : ReadProperty(LinkFileProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@LastEdited_UserID", ReadProperty(LastEdited_UserIDProperty) == null ? (object)DBNull.Value : ReadProperty(LastEdited_UserIDProperty).Value).DbType = DbType.Int64;
                    cmd.Parameters.AddWithValue("@LastEdited_Date", ReadProperty(LastEdited_DateProperty).DBValue).DbType = DbType.DateTime;
                    var args = new DataPortalHookArgs(cmd);
                    OnUpdatePre(args);
                    cmd.ExecuteNonQuery();
                    OnUpdatePost(args);
                }
            }
        }

        /// <summary>
        /// Self deletes the <see cref="TT_SuKien_Info"/> object from database.
        /// </summary>
        private void Child_DeleteSelf()
        {
            using (var ctx = TransactionManager<SqlConnection, SqlTransaction>.GetManager("Connection"))
            {
                using (var cmd = new SqlCommand("dbo.TT_SuKien_Info_delete", ctx.Connection))
                {
                    cmd.Transaction = ctx.Transaction;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@ID", ReadProperty(IDProperty)).DbType = DbType.Int64;
                    var args = new DataPortalHookArgs(cmd);
                    OnDeletePre(args);
                    cmd.ExecuteNonQuery();
                    OnDeletePost(args);
                }
            }
        }

        #endregion

        #region Pseudo Events

        /// <summary>
        /// Occurs after setting all defaults for object creation.
        /// </summary>
        partial void OnCreate(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Delete, after setting query parameters and before the delete operation.
        /// </summary>
        partial void OnDeletePre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Delete, after the delete operation, before Commit().
        /// </summary>
        partial void OnDeletePost(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after setting query parameters and before the fetch operation.
        /// </summary>
        partial void OnFetchPre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after the fetch operation (object or collection is fully loaded and set up).
        /// </summary>
        partial void OnFetchPost(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after the low level fetch operation, before the data reader is destroyed.
        /// </summary>
        partial void OnFetchRead(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after setting query parameters and before the update operation.
        /// </summary>
        partial void OnUpdatePre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Insert, after the update operation, before setting back row identifiers (RowVersion) and Commit().
        /// </summary>
        partial void OnUpdatePost(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Insert, after setting query parameters and before the insert operation.
        /// </summary>
        partial void OnInsertPre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Insert, after the insert operation, before setting back row identifiers (ID and RowVersion) and Commit().
        /// </summary>
        partial void OnInsertPost(DataPortalHookArgs args);

        #endregion

    }
}
