//  This file was generated by CSLA Object Generator - CslaGenFork v4.3.0
//
// Filename:    TT_AnPham_Info
// ObjectType:  TT_AnPham_Info
// CSLAType:    ReadOnlyObject

using System;
using System.Data;
using System.Data.SqlClient;
using Csla;
using Csla.Data;

namespace TruyenThong
{

    /// <summary>
    /// TT_AnPham_Info (read only object).<br/>
    /// This is a generated base class of <see cref="TT_AnPham_Info"/> business object.
    /// </summary>
    /// <remarks>
    /// This class is an item of <see cref="TT_AnPham_Coll"/> collection.
    /// </remarks>
    [Serializable]
    public partial class TT_AnPham_Info : ReadOnlyBase<TT_AnPham_Info>
    {

        #region Business Properties

        /// <summary>
        /// Gets the ID.
        /// </summary>
        /// <value>The ID.</value>
        public Int64 ID { get; private set; }

        /// <summary>
        /// Gets the Ten.
        /// </summary>
        /// <value>The Ten.</value>
        public string Ten { get; private set; }

        /// <summary>
        /// Gets the IDLoai.
        /// </summary>
        /// <value>The IDLoai.</value>
        public int IDLoai { get; private set; }

        /// <summary>
        /// Gets the Don Vi Dat.
        /// </summary>
        /// <value>The Don Vi Dat.</value>
        public string DonViDat { get; private set; }

        /// <summary>
        /// Gets the Noi Dung.
        /// </summary>
        /// <value>The Noi Dung.</value>
        public string NoiDung { get; private set; }

        /// <summary>
        /// Gets the So Luong.
        /// </summary>
        /// <value>The So Luong.</value>
        public int? SoLuong { get; private set; }

        /// <summary>
        /// Maintains metadata about <see cref="TuNgay"/> property.
        /// </summary>
        public static readonly PropertyInfo<SmartDate> TuNgayProperty = RegisterProperty<SmartDate>(p => p.TuNgay, "Tu Ngay", null);
        /// <summary>
        /// Gets the Tu Ngay.
        /// </summary>
        /// <value>The Tu Ngay.</value>
        public string TuNgay
        {
            get { return GetPropertyConvert<SmartDate, String>(TuNgayProperty); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="DenNgay"/> property.
        /// </summary>
        public static readonly PropertyInfo<SmartDate> DenNgayProperty = RegisterProperty<SmartDate>(p => p.DenNgay, "Den Ngay", null);
        /// <summary>
        /// Gets the Den Ngay.
        /// </summary>
        /// <value>The Den Ngay.</value>
        public string DenNgay
        {
            get { return GetPropertyConvert<SmartDate, String>(DenNgayProperty); }
        }

        /// <summary>
        /// Gets the Ghi Chu.
        /// </summary>
        /// <value>The Ghi Chu.</value>
        public string GhiChu { get; private set; }

        #endregion

        #region Factory Methods

        /// <summary>
        /// Factory method. Loads a <see cref="TT_AnPham_Info"/> object from the given SafeDataReader.
        /// </summary>
        /// <param name="dr">The SafeDataReader to use.</param>
        /// <returns>A reference to the fetched <see cref="TT_AnPham_Info"/> object.</returns>
        internal static TT_AnPham_Info GetTT_AnPham_Info(SafeDataReader dr)
        {
            TT_AnPham_Info obj = new TT_AnPham_Info();
            obj.Fetch(dr);
            return obj;
        }

        #endregion

        #region Constructor

        /// <summary>
        /// Initializes a new instance of the <see cref="TT_AnPham_Info"/> class.
        /// </summary>
        /// <remarks> Do not use to create a Csla object. Use factory methods instead.</remarks>
        private TT_AnPham_Info()
        {
            // Prevent direct creation
        }

        #endregion

        #region Data Access

        /// <summary>
        /// Loads a <see cref="TT_AnPham_Info"/> object from the given SafeDataReader.
        /// </summary>
        /// <param name="dr">The SafeDataReader to use.</param>
        private void Fetch(SafeDataReader dr)
        {
            // Value properties
            ID = data.ID;
            Ten = data.Ten;
            IDLoai = data.IDLoai;
            DonViDat = data.DonViDat;
            NoiDung = data.NoiDung;
            SoLuong = data.SoLuong;
            LoadProperty(TuNgayProperty, data.TuNgay);
            LoadProperty(DenNgayProperty, data.DenNgay);
            GhiChu = data.GhiChu;
            var args = new DataPortalHookArgs(dr);
            OnFetchRead(args);
        }

        #endregion

        #region Pseudo Events

        /// <summary>
        /// Occurs after the low level fetch operation, before the data reader is destroyed.
        /// </summary>
        partial void OnFetchRead(DataPortalHookArgs args);

        #endregion

    }
}
