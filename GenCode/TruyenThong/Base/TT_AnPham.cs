//  This file was generated by CSLA Object Generator - CslaGenFork v4.3.0
//
// Filename:    TT_AnPham
// ObjectType:  TT_AnPham
// CSLAType:    EditableRoot

using System;
using System.Data;
using System.Data.SqlClient;
using Csla;
using Csla.Data;

namespace TruyenThong
{

    /// <summary>
    /// TT_AnPham (editable root object).<br/>
    /// This is a generated base class of <see cref="TT_AnPham"/> business object.
    /// </summary>
    [Serializable]
    public partial class TT_AnPham : BusinessBase<TT_AnPham>
    {

        #region Business Properties

        /// <summary>
        /// Maintains metadata about <see cref="ID"/> property.
        /// </summary>
        public static readonly PropertyInfo<Int64> IDProperty = RegisterProperty<Int64>(p => p.ID, "ID");
        /// <summary>
        /// Gets or sets the ID.
        /// </summary>
        /// <value>The ID.</value>
        public Int64 ID
        {
            get { return GetProperty(IDProperty); }
            set { SetProperty(IDProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="Ten"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> TenProperty = RegisterProperty<string>(p => p.Ten, "Ten");
        /// <summary>
        /// Gets or sets the Ten.
        /// </summary>
        /// <value>The Ten.</value>
        public string Ten
        {
            get { return GetProperty(TenProperty); }
            set { SetProperty(TenProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="IDLoai"/> property.
        /// </summary>
        public static readonly PropertyInfo<int> IDLoaiProperty = RegisterProperty<int>(p => p.IDLoai, "IDLoai");
        /// <summary>
        /// Gets or sets the IDLoai.
        /// </summary>
        /// <value>The IDLoai.</value>
        public int IDLoai
        {
            get { return GetProperty(IDLoaiProperty); }
            set { SetProperty(IDLoaiProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="DonViDat"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> DonViDatProperty = RegisterProperty<string>(p => p.DonViDat, "Don Vi Dat", null);
        /// <summary>
        /// Gets or sets the Don Vi Dat.
        /// </summary>
        /// <value>The Don Vi Dat.</value>
        public string DonViDat
        {
            get { return GetProperty(DonViDatProperty); }
            set { SetProperty(DonViDatProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="NoiDung"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> NoiDungProperty = RegisterProperty<string>(p => p.NoiDung, "Noi Dung", null);
        /// <summary>
        /// Gets or sets the Noi Dung.
        /// </summary>
        /// <value>The Noi Dung.</value>
        public string NoiDung
        {
            get { return GetProperty(NoiDungProperty); }
            set { SetProperty(NoiDungProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="SoLuong"/> property.
        /// </summary>
        public static readonly PropertyInfo<int?> SoLuongProperty = RegisterProperty<int?>(p => p.SoLuong, "So Luong", null);
        /// <summary>
        /// Gets or sets the So Luong.
        /// </summary>
        /// <value>The So Luong.</value>
        public int? SoLuong
        {
            get { return GetProperty(SoLuongProperty); }
            set { SetProperty(SoLuongProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="TuNgay"/> property.
        /// </summary>
        public static readonly PropertyInfo<SmartDate> TuNgayProperty = RegisterProperty<SmartDate>(p => p.TuNgay, "Tu Ngay", null);
        /// <summary>
        /// Gets or sets the Tu Ngay.
        /// </summary>
        /// <value>The Tu Ngay.</value>
        public string TuNgay
        {
            get { return GetPropertyConvert<SmartDate, String>(TuNgayProperty); }
            set { SetPropertyConvert<SmartDate, String>(TuNgayProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="DenNgay"/> property.
        /// </summary>
        public static readonly PropertyInfo<SmartDate> DenNgayProperty = RegisterProperty<SmartDate>(p => p.DenNgay, "Den Ngay", null);
        /// <summary>
        /// Gets or sets the Den Ngay.
        /// </summary>
        /// <value>The Den Ngay.</value>
        public string DenNgay
        {
            get { return GetPropertyConvert<SmartDate, String>(DenNgayProperty); }
            set { SetPropertyConvert<SmartDate, String>(DenNgayProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="GhiChu"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> GhiChuProperty = RegisterProperty<string>(p => p.GhiChu, "Ghi Chu", null);
        /// <summary>
        /// Gets or sets the Ghi Chu.
        /// </summary>
        /// <value>The Ghi Chu.</value>
        public string GhiChu
        {
            get { return GetProperty(GhiChuProperty); }
            set { SetProperty(GhiChuProperty, value); }
        }

        #endregion

        #region Factory Methods

        #endregion

        #region Constructor

        /// <summary>
        /// Initializes a new instance of the <see cref="TT_AnPham"/> class.
        /// </summary>
        /// <remarks> Do not use to create a Csla object. Use factory methods instead.</remarks>
        private TT_AnPham()
        {
            // Prevent direct creation
        }

        #endregion

        #region Data Access

        /// <summary>
        /// Loads a <see cref="TT_AnPham"/> object from the given SafeDataReader.
        /// </summary>
        /// <param name="dr">The SafeDataReader to use.</param>
        private void Fetch(SafeDataReader dr)
        {
            // Value properties
            LoadProperty(IDProperty, data.ID);
            LoadProperty(TenProperty, data.Ten);
            LoadProperty(IDLoaiProperty, data.IDLoai);
            LoadProperty(DonViDatProperty, data.DonViDat);
            LoadProperty(NoiDungProperty, data.NoiDung);
            LoadProperty(SoLuongProperty, data.SoLuong);
            LoadProperty(TuNgayProperty, data.TuNgay);
            LoadProperty(DenNgayProperty, data.DenNgay);
            LoadProperty(GhiChuProperty, data.GhiChu);
            var args = new DataPortalHookArgs(dr);
            OnFetchRead(args);
        }

        /// <summary>
        /// Inserts a new <see cref="TT_AnPham"/> object in the database.
        /// </summary>
        protected override void DataPortal_Insert()
        {
            using (var ctx = TransactionManager<SqlConnection, SqlTransaction>.GetManager("Connection"))
            {
                using (var cmd = new SqlCommand("dbo.TT_AnPham_Add", ctx.Connection))
                {
                    cmd.Transaction = ctx.Transaction;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@ID", ReadProperty(IDProperty)).DbType = DbType.Int64;
                    cmd.Parameters.AddWithValue("@Ten", ReadProperty(TenProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@IDLoai", ReadProperty(IDLoaiProperty)).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@DonViDat", ReadProperty(DonViDatProperty) == null ? (object)DBNull.Value : ReadProperty(DonViDatProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@NoiDung", ReadProperty(NoiDungProperty) == null ? (object)DBNull.Value : ReadProperty(NoiDungProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@SoLuong", ReadProperty(SoLuongProperty) == null ? (object)DBNull.Value : ReadProperty(SoLuongProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@TuNgay", ReadProperty(TuNgayProperty).DBValue).DbType = DbType.DateTime;
                    cmd.Parameters.AddWithValue("@DenNgay", ReadProperty(DenNgayProperty).DBValue).DbType = DbType.DateTime;
                    cmd.Parameters.AddWithValue("@GhiChu", ReadProperty(GhiChuProperty) == null ? (object)DBNull.Value : ReadProperty(GhiChuProperty)).DbType = DbType.String;
                    var args = new DataPortalHookArgs(cmd);
                    OnInsertPre(args);
                    cmd.ExecuteNonQuery();
                    OnInsertPost(args);
                }
                ctx.Commit();
            }
        }

        /// <summary>
        /// Updates in the database all changes made to the <see cref="TT_AnPham"/> object.
        /// </summary>
        protected override void DataPortal_Update()
        {
            using (var ctx = TransactionManager<SqlConnection, SqlTransaction>.GetManager("Connection"))
            {
                using (var cmd = new SqlCommand("dbo.TT_AnPham_Upd", ctx.Connection))
                {
                    cmd.Transaction = ctx.Transaction;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@ID", ReadProperty(IDProperty)).DbType = DbType.Int64;
                    cmd.Parameters.AddWithValue("@Ten", ReadProperty(TenProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@IDLoai", ReadProperty(IDLoaiProperty)).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@DonViDat", ReadProperty(DonViDatProperty) == null ? (object)DBNull.Value : ReadProperty(DonViDatProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@NoiDung", ReadProperty(NoiDungProperty) == null ? (object)DBNull.Value : ReadProperty(NoiDungProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@SoLuong", ReadProperty(SoLuongProperty) == null ? (object)DBNull.Value : ReadProperty(SoLuongProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@TuNgay", ReadProperty(TuNgayProperty).DBValue).DbType = DbType.DateTime;
                    cmd.Parameters.AddWithValue("@DenNgay", ReadProperty(DenNgayProperty).DBValue).DbType = DbType.DateTime;
                    cmd.Parameters.AddWithValue("@GhiChu", ReadProperty(GhiChuProperty) == null ? (object)DBNull.Value : ReadProperty(GhiChuProperty)).DbType = DbType.String;
                    var args = new DataPortalHookArgs(cmd);
                    OnUpdatePre(args);
                    cmd.ExecuteNonQuery();
                    OnUpdatePost(args);
                }
                ctx.Commit();
            }
        }

        #endregion

        #region Pseudo Events

        /// <summary>
        /// Occurs in DataPortal_Delete, after setting query parameters and before the delete operation.
        /// </summary>
        partial void OnDeletePre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Delete, after the delete operation, before Commit().
        /// </summary>
        partial void OnDeletePost(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after the low level fetch operation, before the data reader is destroyed.
        /// </summary>
        partial void OnFetchRead(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after setting query parameters and before the update operation.
        /// </summary>
        partial void OnUpdatePre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Insert, after the update operation, before setting back row identifiers (RowVersion) and Commit().
        /// </summary>
        partial void OnUpdatePost(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Insert, after setting query parameters and before the insert operation.
        /// </summary>
        partial void OnInsertPre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Insert, after the insert operation, before setting back row identifiers (ID and RowVersion) and Commit().
        /// </summary>
        partial void OnInsertPost(DataPortalHookArgs args);

        #endregion

    }
}
