//  This file was generated by CSLA Object Generator - CslaGenFork v4.3.0
//
// Filename:    DIC_VatTu
// ObjectType:  DIC_VatTu
// CSLAType:    EditableRoot

using System;
using System.Data;
using System.Data.SqlClient;
using Csla;
using Csla.Data;

namespace Dictionary
{

    /// <summary>
    /// DIC_VatTu (editable root object).<br/>
    /// This is a generated base class of <see cref="DIC_VatTu"/> business object.
    /// </summary>
    [Serializable]
    public partial class DIC_VatTu : BusinessBase<DIC_VatTu>
    {

        #region Static Fields

        private static Int64 _lastID;

        #endregion

        #region Business Properties

        /// <summary>
        /// Maintains metadata about <see cref="ID"/> property.
        /// </summary>
        public static readonly PropertyInfo<Int64> IDProperty = RegisterProperty<Int64>(p => p.ID, "ID");
        /// <summary>
        /// Gets the ID.
        /// </summary>
        /// <value>The ID.</value>
        public Int64 ID
        {
            get { return GetProperty(IDProperty); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="Ten"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> TenProperty = RegisterProperty<string>(p => p.Ten, "Ten");
        /// <summary>
        /// Gets or sets the Ten.
        /// </summary>
        /// <value>The Ten.</value>
        public string Ten
        {
            get { return GetProperty(TenProperty); }
            set { SetProperty(TenProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="Ma"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> MaProperty = RegisterProperty<string>(p => p.Ma, "Ma");
        /// <summary>
        /// Gets or sets the Ma.
        /// </summary>
        /// <value>The Ma.</value>
        public string Ma
        {
            get { return GetProperty(MaProperty); }
            set { SetProperty(MaProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="IDLoai"/> property.
        /// </summary>
        public static readonly PropertyInfo<int> IDLoaiProperty = RegisterProperty<int>(p => p.IDLoai, "IDLoai");
        /// <summary>
        /// Gets or sets the IDLoai.
        /// </summary>
        /// <value>The IDLoai.</value>
        public int IDLoai
        {
            get { return GetProperty(IDLoaiProperty); }
            set { SetProperty(IDLoaiProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="IDDonViTinh"/> property.
        /// </summary>
        public static readonly PropertyInfo<int> IDDonViTinhProperty = RegisterProperty<int>(p => p.IDDonViTinh, "IDDon Vi Tinh");
        /// <summary>
        /// Gets or sets the IDDon Vi Tinh.
        /// </summary>
        /// <value>The IDDon Vi Tinh.</value>
        public int IDDonViTinh
        {
            get { return GetProperty(IDDonViTinhProperty); }
            set { SetProperty(IDDonViTinhProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="MauSac"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> MauSacProperty = RegisterProperty<string>(p => p.MauSac, "Mau Sac");
        /// <summary>
        /// Gets or sets the Mau Sac.
        /// </summary>
        /// <value>The Mau Sac.</value>
        public string MauSac
        {
            get { return GetProperty(MauSacProperty); }
            set { SetProperty(MauSacProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="NhaSX"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> NhaSXProperty = RegisterProperty<string>(p => p.NhaSX, "Nha SX");
        /// <summary>
        /// Gets or sets the Nha SX.
        /// </summary>
        /// <value>The Nha SX.</value>
        public string NhaSX
        {
            get { return GetProperty(NhaSXProperty); }
            set { SetProperty(NhaSXProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="NguonGocXuatXu"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> NguonGocXuatXuProperty = RegisterProperty<string>(p => p.NguonGocXuatXu, "Nguon Goc Xuat Xu");
        /// <summary>
        /// Gets or sets the Nguon Goc Xuat Xu.
        /// </summary>
        /// <value>The Nguon Goc Xuat Xu.</value>
        public string NguonGocXuatXu
        {
            get { return GetProperty(NguonGocXuatXuProperty); }
            set { SetProperty(NguonGocXuatXuProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="DonGia"/> property.
        /// </summary>
        public static readonly PropertyInfo<Decimal> DonGiaProperty = RegisterProperty<Decimal>(p => p.DonGia, "Don Gia");
        /// <summary>
        /// Gets or sets the Don Gia.
        /// </summary>
        /// <value>The Don Gia.</value>
        public Decimal DonGia
        {
            get { return GetProperty(DonGiaProperty); }
            set { SetProperty(DonGiaProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="PhuKien"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> PhuKienProperty = RegisterProperty<string>(p => p.PhuKien, "Phu Kien");
        /// <summary>
        /// Gets or sets the Phu Kien.
        /// </summary>
        /// <value>The Phu Kien.</value>
        public string PhuKien
        {
            get { return GetProperty(PhuKienProperty); }
            set { SetProperty(PhuKienProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="Serial"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> SerialProperty = RegisterProperty<string>(p => p.Serial, "Serial");
        /// <summary>
        /// Gets or sets the Serial.
        /// </summary>
        /// <value>The Serial.</value>
        public string Serial
        {
            get { return GetProperty(SerialProperty); }
            set { SetProperty(SerialProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="NgayTao"/> property.
        /// </summary>
        public static readonly PropertyInfo<SmartDate> NgayTaoProperty = RegisterProperty<SmartDate>(p => p.NgayTao, "Ngay Tao");
        /// <summary>
        /// Gets or sets the Ngay Tao.
        /// </summary>
        /// <value>The Ngay Tao.</value>
        public string NgayTao
        {
            get { return GetPropertyConvert<SmartDate, String>(NgayTaoProperty); }
            set { SetPropertyConvert<SmartDate, String>(NgayTaoProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="SuDung"/> property.
        /// </summary>
        public static readonly PropertyInfo<bool?> SuDungProperty = RegisterProperty<bool?>(p => p.SuDung, "Su Dung");
        /// <summary>
        /// Gets or sets the Su Dung.
        /// </summary>
        /// <value><c>true</c> if Su Dung; <c>false</c> if not Su Dung; otherwise, <c>null</c>.</value>
        public bool? SuDung
        {
            get { return GetProperty(SuDungProperty); }
            set { SetProperty(SuDungProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="GhiChu"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> GhiChuProperty = RegisterProperty<string>(p => p.GhiChu, "Ghi Chu");
        /// <summary>
        /// Gets or sets the Ghi Chu.
        /// </summary>
        /// <value>The Ghi Chu.</value>
        public string GhiChu
        {
            get { return GetProperty(GhiChuProperty); }
            set { SetProperty(GhiChuProperty, value); }
        }

        #endregion

        #region Factory Methods

        /// <summary>
        /// Factory method. Creates a new <see cref="DIC_VatTu"/> object.
        /// </summary>
        /// <returns>A reference to the created <see cref="DIC_VatTu"/> object.</returns>
        public static DIC_VatTu NewDIC_VatTu()
        {
            return DataPortal.Create<DIC_VatTu>();
        }

        /// <summary>
        /// Factory method. Loads a <see cref="DIC_VatTu"/> object, based on given parameters.
        /// </summary>
        /// <param name="id">The ID parameter of the DIC_VatTu to fetch.</param>
        /// <returns>A reference to the fetched <see cref="DIC_VatTu"/> object.</returns>
        public static DIC_VatTu GetDIC_VatTu(Int64 id)
        {
            return DataPortal.Fetch<DIC_VatTu>(id);
        }

        /// <summary>
        /// Factory method. Deletes a <see cref="DIC_VatTu"/> object, based on given parameters.
        /// </summary>
        /// <param name="id">The ID of the DIC_VatTu to delete.</param>
        public static void DeleteDIC_VatTu(Int64 id)
        {
            DataPortal.Delete<DIC_VatTu>(id);
        }

        /// <summary>
        /// Factory method. Asynchronously creates a new <see cref="DIC_VatTu"/> object.
        /// </summary>
        /// <param name="callback">The completion callback method.</param>
        public static void NewDIC_VatTu(EventHandler<DataPortalResult<DIC_VatTu>> callback)
        {
            DataPortal.BeginCreate<DIC_VatTu>(callback);
        }

        /// <summary>
        /// Factory method. Asynchronously loads a <see cref="DIC_VatTu"/> object, based on given parameters.
        /// </summary>
        /// <param name="id">The ID parameter of the DIC_VatTu to fetch.</param>
        /// <param name="callback">The completion callback method.</param>
        public static void GetDIC_VatTu(Int64 id, EventHandler<DataPortalResult<DIC_VatTu>> callback)
        {
            DataPortal.BeginFetch<DIC_VatTu>(id, callback);
        }

        /// <summary>
        /// Factory method. Asynchronously deletes a <see cref="DIC_VatTu"/> object, based on given parameters.
        /// </summary>
        /// <param name="id">The ID of the DIC_VatTu to delete.</param>
        /// <param name="callback">The completion callback method.</param>
        public static void DeleteDIC_VatTu(Int64 id, EventHandler<DataPortalResult<DIC_VatTu>> callback)
        {
            DataPortal.BeginDelete<DIC_VatTu>(id, callback);
        }

        #endregion

        #region Constructor

        /// <summary>
        /// Initializes a new instance of the <see cref="DIC_VatTu"/> class.
        /// </summary>
        /// <remarks> Do not use to create a Csla object. Use factory methods instead.</remarks>
        private DIC_VatTu()
        {
            // Prevent direct creation
        }

        #endregion

        #region Data Access

        /// <summary>
        /// Loads default values for the <see cref="DIC_VatTu"/> object properties.
        /// </summary>
        [Csla.RunLocal]
        protected override void DataPortal_Create()
        {
            LoadProperty(IDProperty, System.Threading.Interlocked.Decrement(ref _lastID));
            LoadProperty(MauSacProperty, null);
            LoadProperty(NguonGocXuatXuProperty, null);
            LoadProperty(GhiChuProperty, null);
            var args = new DataPortalHookArgs();
            OnCreate(args);
            base.DataPortal_Create();
        }

        /// <summary>
        /// Loads a <see cref="DIC_VatTu"/> object from the database, based on given criteria.
        /// </summary>
        /// <param name="id">The ID.</param>
        protected void DataPortal_Fetch(Int64 id)
        {
            using (var ctx = ConnectionManager<SqlConnection>.GetManager("Connection"))
            {
                using (var cmd = new SqlCommand("dbo.DIC_VatTu_Get", ctx.Connection))
                {
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@ID", id).DbType = DbType.Int64;
                    var args = new DataPortalHookArgs(cmd, id);
                    OnFetchPre(args);
                    Fetch(cmd);
                    OnFetchPost(args);
                }
            }
            // check all object rules and property rules
            BusinessRules.CheckRules();
        }

        private void Fetch(SqlCommand cmd)
        {
            using (var dr = new SafeDataReader(cmd.ExecuteReader()))
            {
                if (dr.Read())
                {
                    Fetch(dr);
                }
            }
        }

        /// <summary>
        /// Loads a <see cref="DIC_VatTu"/> object from the given SafeDataReader.
        /// </summary>
        /// <param name="dr">The SafeDataReader to use.</param>
        private void Fetch(SafeDataReader dr)
        {
            // Value properties
            LoadProperty(IDProperty, data.ID);
            LoadProperty(TenProperty, data.Ten);
            LoadProperty(MaProperty, data.Ma);
            LoadProperty(IDLoaiProperty, data.IDLoai);
            LoadProperty(IDDonViTinhProperty, data.IDDonViTinh);
            LoadProperty(MauSacProperty, data.MauSac);
            LoadProperty(NhaSXProperty, data.NhaSX);
            LoadProperty(NguonGocXuatXuProperty, data.NguonGocXuatXu);
            LoadProperty(DonGiaProperty, data.DonGia);
            LoadProperty(PhuKienProperty, data.PhuKien);
            LoadProperty(SerialProperty, data.Serial);
            LoadProperty(NgayTaoProperty, data.NgayTao);
            LoadProperty(SuDungProperty, data.SuDung);
            LoadProperty(GhiChuProperty, data.GhiChu);
            var args = new DataPortalHookArgs(dr);
            OnFetchRead(args);
        }

        /// <summary>
        /// Inserts a new <see cref="DIC_VatTu"/> object in the database.
        /// </summary>
        protected override void DataPortal_Insert()
        {
            using (var ctx = TransactionManager<SqlConnection, SqlTransaction>.GetManager("Connection"))
            {
                using (var cmd = new SqlCommand("dbo.DIC_VatTu_Add", ctx.Connection))
                {
                    cmd.Transaction = ctx.Transaction;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@ID", ReadProperty(IDProperty)).Direction = ParameterDirection.Output;
                    cmd.Parameters.AddWithValue("@Ten", ReadProperty(TenProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@Ma", ReadProperty(MaProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@IDLoai", ReadProperty(IDLoaiProperty)).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@IDDonViTinh", ReadProperty(IDDonViTinhProperty)).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@MauSac", ReadProperty(MauSacProperty) == null ? (object)DBNull.Value : ReadProperty(MauSacProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@NhaSX", ReadProperty(NhaSXProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@NguonGocXuatXu", ReadProperty(NguonGocXuatXuProperty) == null ? (object)DBNull.Value : ReadProperty(NguonGocXuatXuProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@DonGia", ReadProperty(DonGiaProperty)).DbType = DbType.Decimal;
                    cmd.Parameters.AddWithValue("@PhuKien", ReadProperty(PhuKienProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@Serial", ReadProperty(SerialProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@NgayTao", ReadProperty(NgayTaoProperty).DBValue).DbType = DbType.DateTime;
                    cmd.Parameters.AddWithValue("@SuDung", ReadProperty(SuDungProperty) == null ? (object)DBNull.Value : ReadProperty(SuDungProperty).Value).DbType = DbType.Boolean;
                    cmd.Parameters.AddWithValue("@GhiChu", ReadProperty(GhiChuProperty) == null ? (object)DBNull.Value : ReadProperty(GhiChuProperty)).DbType = DbType.String;
                    var args = new DataPortalHookArgs(cmd);
                    OnInsertPre(args);
                    cmd.ExecuteNonQuery();
                    OnInsertPost(args);
                    LoadProperty(IDProperty, (long) cmd.Parameters["@ID"].Value);
                }
                ctx.Commit();
            }
        }

        /// <summary>
        /// Updates in the database all changes made to the <see cref="DIC_VatTu"/> object.
        /// </summary>
        protected override void DataPortal_Update()
        {
            using (var ctx = TransactionManager<SqlConnection, SqlTransaction>.GetManager("Connection"))
            {
                using (var cmd = new SqlCommand("dbo.DIC_VatTu_Upd", ctx.Connection))
                {
                    cmd.Transaction = ctx.Transaction;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@ID", ReadProperty(IDProperty)).DbType = DbType.Int64;
                    cmd.Parameters.AddWithValue("@Ten", ReadProperty(TenProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@Ma", ReadProperty(MaProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@IDLoai", ReadProperty(IDLoaiProperty)).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@IDDonViTinh", ReadProperty(IDDonViTinhProperty)).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@MauSac", ReadProperty(MauSacProperty) == null ? (object)DBNull.Value : ReadProperty(MauSacProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@NhaSX", ReadProperty(NhaSXProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@NguonGocXuatXu", ReadProperty(NguonGocXuatXuProperty) == null ? (object)DBNull.Value : ReadProperty(NguonGocXuatXuProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@DonGia", ReadProperty(DonGiaProperty)).DbType = DbType.Decimal;
                    cmd.Parameters.AddWithValue("@PhuKien", ReadProperty(PhuKienProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@Serial", ReadProperty(SerialProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@NgayTao", ReadProperty(NgayTaoProperty).DBValue).DbType = DbType.DateTime;
                    cmd.Parameters.AddWithValue("@SuDung", ReadProperty(SuDungProperty) == null ? (object)DBNull.Value : ReadProperty(SuDungProperty).Value).DbType = DbType.Boolean;
                    cmd.Parameters.AddWithValue("@GhiChu", ReadProperty(GhiChuProperty) == null ? (object)DBNull.Value : ReadProperty(GhiChuProperty)).DbType = DbType.String;
                    var args = new DataPortalHookArgs(cmd);
                    OnUpdatePre(args);
                    cmd.ExecuteNonQuery();
                    OnUpdatePost(args);
                }
                ctx.Commit();
            }
        }

        /// <summary>
        /// Self deletes the <see cref="DIC_VatTu"/> object.
        /// </summary>
        protected override void DataPortal_DeleteSelf()
        {
            DataPortal_Delete(ID);
        }

        /// <summary>
        /// Deletes the <see cref="DIC_VatTu"/> object from database.
        /// </summary>
        /// <param name="id">The delete criteria.</param>
        protected void DataPortal_Delete(Int64 id)
        {
            using (var ctx = TransactionManager<SqlConnection, SqlTransaction>.GetManager("Connection"))
            {
                using (var cmd = new SqlCommand("dbo.DIC_VatTu_Delete", ctx.Connection))
                {
                    cmd.Transaction = ctx.Transaction;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@ID", id).DbType = DbType.Int64;
                    var args = new DataPortalHookArgs(cmd, id);
                    OnDeletePre(args);
                    cmd.ExecuteNonQuery();
                    OnDeletePost(args);
                }
                ctx.Commit();
            }
        }

        #endregion

        #region Pseudo Events

        /// <summary>
        /// Occurs after setting all defaults for object creation.
        /// </summary>
        partial void OnCreate(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Delete, after setting query parameters and before the delete operation.
        /// </summary>
        partial void OnDeletePre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Delete, after the delete operation, before Commit().
        /// </summary>
        partial void OnDeletePost(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after setting query parameters and before the fetch operation.
        /// </summary>
        partial void OnFetchPre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after the fetch operation (object or collection is fully loaded and set up).
        /// </summary>
        partial void OnFetchPost(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after the low level fetch operation, before the data reader is destroyed.
        /// </summary>
        partial void OnFetchRead(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after setting query parameters and before the update operation.
        /// </summary>
        partial void OnUpdatePre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Insert, after the update operation, before setting back row identifiers (RowVersion) and Commit().
        /// </summary>
        partial void OnUpdatePost(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Insert, after setting query parameters and before the insert operation.
        /// </summary>
        partial void OnInsertPre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Insert, after the insert operation, before setting back row identifiers (ID and RowVersion) and Commit().
        /// </summary>
        partial void OnInsertPost(DataPortalHookArgs args);

        #endregion

    }
}
