//  This file was generated by CSLA Object Generator - CslaGenFork v4.3.0
//
// Filename:    DIC_VienKhoaPhong_Info
// ObjectType:  DIC_VienKhoaPhong_Info
// CSLAType:    ReadOnlyObject

using System;
using System.Data;
using System.Data.SqlClient;
using Csla;
using Csla.Data;

namespace DanhMuc.LIB
{

    /// <summary>
    /// DIC_VienKhoaPhong_Info (read only object).<br/>
    /// This is a generated base class of <see cref="DIC_VienKhoaPhong_Info"/> business object.
    /// </summary>
    /// <remarks>
    /// This class is an item of <see cref="DIC_VienKhoaPhong_Coll"/> collection.
    /// </remarks>
    [Serializable]
    public partial class DIC_VienKhoaPhong_Info : ReadOnlyBase<DIC_VienKhoaPhong_Info>
    {

        #region Business Properties

        /// <summary>
        /// Gets the IDKhoa.
        /// </summary>
        /// <value>The IDKhoa.</value>
        public Int64 IDKhoa { get; private set; }

        /// <summary>
        /// Gets the Ma Khoa.
        /// </summary>
        /// <value>The Ma Khoa.</value>
        public Int16 MaKhoa { get; private set; }

        /// <summary>
        /// Gets the Ten Khoa.
        /// </summary>
        /// <value>The Ten Khoa.</value>
        public string TenKhoa { get; private set; }

        /// <summary>
        /// Gets the Ma Nhan Dang.
        /// </summary>
        /// <value>The Ma Nhan Dang.</value>
        public string MaNhanDang { get; private set; }

        /// <summary>
        /// Gets the YTa Truong.
        /// </summary>
        /// <value>The YTa Truong.</value>
        public string YTaTruong { get; private set; }

        /// <summary>
        /// Gets the Truong Khoa.
        /// </summary>
        /// <value>The Truong Khoa.</value>
        public string TruongKhoa { get; private set; }

        /// <summary>
        /// Gets the Ten Tat.
        /// </summary>
        /// <value>The Ten Tat.</value>
        public string TenTat { get; private set; }

        /// <summary>
        /// Gets the Su Dung.
        /// </summary>
        /// <value><c>true</c> if Su Dung; otherwise, <c>false</c>.</value>
        public bool SuDung { get; private set; }

        #endregion

        #region Factory Methods

        /// <summary>
        /// Factory method. Loads a <see cref="DIC_VienKhoaPhong_Info"/> object from the given SafeDataReader.
        /// </summary>
        /// <param name="dr">The SafeDataReader to use.</param>
        /// <returns>A reference to the fetched <see cref="DIC_VienKhoaPhong_Info"/> object.</returns>
        internal static DIC_VienKhoaPhong_Info GetDIC_VienKhoaPhong_Info(SafeDataReader dr)
        {
            DIC_VienKhoaPhong_Info obj = new DIC_VienKhoaPhong_Info();
            obj.Fetch(dr);
            return obj;
        }

        #endregion

        #region Constructor

        /// <summary>
        /// Initializes a new instance of the <see cref="DIC_VienKhoaPhong_Info"/> class.
        /// </summary>
        /// <remarks> Do not use to create a Csla object. Use factory methods instead.</remarks>
        private DIC_VienKhoaPhong_Info()
        {
            // Prevent direct creation
        }

        #endregion

        #region Data Access

        /// <summary>
        /// Loads a <see cref="DIC_VienKhoaPhong_Info"/> object from the given SafeDataReader.
        /// </summary>
        /// <param name="dr">The SafeDataReader to use.</param>
        private void Fetch(SafeDataReader dr)
        {
            // Value properties
            IDKhoa = data.IDKhoa;
            MaKhoa = data.MaKhoa;
            TenKhoa = data.TenKhoa;
            MaNhanDang = data.MaNhanDang;
            YTaTruong = data.YTaTruong;
            TruongKhoa = data.TruongKhoa;
            TenTat = data.TenTat;
            SuDung = data.SuDung;
            var args = new DataPortalHookArgs(dr);
            OnFetchRead(args);
        }

        #endregion

        #region Pseudo Events

        /// <summary>
        /// Occurs after the low level fetch operation, before the data reader is destroyed.
        /// </summary>
        partial void OnFetchRead(DataPortalHookArgs args);

        #endregion

    }
}
