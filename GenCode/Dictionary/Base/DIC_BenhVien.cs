//  This file was generated by CSLA Object Generator - CslaGenFork v4.3.0
//
// Filename:    DIC_BenhVien
// ObjectType:  DIC_BenhVien
// CSLAType:    EditableRoot

using System;
using System.Data;
using System.Data.SqlClient;
using Csla;
using Csla.Data;

namespace Dictionary
{

    /// <summary>
    /// DIC_BenhVien (editable root object).<br/>
    /// This is a generated base class of <see cref="DIC_BenhVien"/> business object.
    /// </summary>
    [Serializable]
    public partial class DIC_BenhVien : BusinessBase<DIC_BenhVien>
    {

        #region Static Fields

        private static Int64 _lastID;

        #endregion

        #region Business Properties

        /// <summary>
        /// Maintains metadata about <see cref="ID"/> property.
        /// </summary>
        public static readonly PropertyInfo<Int64> IDProperty = RegisterProperty<Int64>(p => p.ID, "ID");
        /// <summary>
        /// Gets the ID.
        /// </summary>
        /// <value>The ID.</value>
        public Int64 ID
        {
            get { return GetProperty(IDProperty); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="Ma"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> MaProperty = RegisterProperty<string>(p => p.Ma, "Ma");
        /// <summary>
        /// Gets or sets the Ma.
        /// </summary>
        /// <value>The Ma.</value>
        public string Ma
        {
            get { return GetProperty(MaProperty); }
            set { SetProperty(MaProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="Ten"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> TenProperty = RegisterProperty<string>(p => p.Ten, "Ten");
        /// <summary>
        /// Gets or sets the Ten.
        /// </summary>
        /// <value>The Ten.</value>
        public string Ten
        {
            get { return GetProperty(TenProperty); }
            set { SetProperty(TenProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="IDTinh"/> property.
        /// </summary>
        public static readonly PropertyInfo<Int64> IDTinhProperty = RegisterProperty<Int64>(p => p.IDTinh, "IDTinh");
        /// <summary>
        /// Gets or sets the IDTinh.
        /// </summary>
        /// <value>The IDTinh.</value>
        public Int64 IDTinh
        {
            get { return GetProperty(IDTinhProperty); }
            set { SetProperty(IDTinhProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="DienTich"/> property.
        /// </summary>
        public static readonly PropertyInfo<Decimal?> DienTichProperty = RegisterProperty<Decimal?>(p => p.DienTich, "Dien Tich");
        /// <summary>
        /// Gets or sets the Dien Tich.
        /// </summary>
        /// <value>The Dien Tich.</value>
        public Decimal? DienTich
        {
            get { return GetProperty(DienTichProperty); }
            set { SetProperty(DienTichProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="DacDiem"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> DacDiemProperty = RegisterProperty<string>(p => p.DacDiem, "Dac Diem");
        /// <summary>
        /// Gets or sets the Dac Diem.
        /// </summary>
        /// <value>The Dac Diem.</value>
        public string DacDiem
        {
            get { return GetProperty(DacDiemProperty); }
            set { SetProperty(DacDiemProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="KhoangCach"/> property.
        /// </summary>
        public static readonly PropertyInfo<Decimal?> KhoangCachProperty = RegisterProperty<Decimal?>(p => p.KhoangCach, "Khoang Cach");
        /// <summary>
        /// Gets or sets the Khoang Cach.
        /// </summary>
        /// <value>The Khoang Cach.</value>
        public Decimal? KhoangCach
        {
            get { return GetProperty(KhoangCachProperty); }
            set { SetProperty(KhoangCachProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="Email"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> EmailProperty = RegisterProperty<string>(p => p.Email, "Email");
        /// <summary>
        /// Gets or sets the Email.
        /// </summary>
        /// <value>The Email.</value>
        public string Email
        {
            get { return GetProperty(EmailProperty); }
            set { SetProperty(EmailProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="Fax"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> FaxProperty = RegisterProperty<string>(p => p.Fax, "Fax");
        /// <summary>
        /// Gets or sets the Fax.
        /// </summary>
        /// <value>The Fax.</value>
        public string Fax
        {
            get { return GetProperty(FaxProperty); }
            set { SetProperty(FaxProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="IDLoai"/> property.
        /// </summary>
        public static readonly PropertyInfo<int?> IDLoaiProperty = RegisterProperty<int?>(p => p.IDLoai, "IDLoai");
        /// <summary>
        /// Gets or sets the IDLoai.
        /// </summary>
        /// <value>The IDLoai.</value>
        public int? IDLoai
        {
            get { return GetProperty(IDLoaiProperty); }
            set { SetProperty(IDLoaiProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="GiuongTK"/> property.
        /// </summary>
        public static readonly PropertyInfo<int?> GiuongTKProperty = RegisterProperty<int?>(p => p.GiuongTK, "Giuong TK");
        /// <summary>
        /// Gets or sets the Giuong TK.
        /// </summary>
        /// <value>The Giuong TK.</value>
        public int? GiuongTK
        {
            get { return GetProperty(GiuongTKProperty); }
            set { SetProperty(GiuongTKProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="GiuongKH"/> property.
        /// </summary>
        public static readonly PropertyInfo<int?> GiuongKHProperty = RegisterProperty<int?>(p => p.GiuongKH, "Giuong KH");
        /// <summary>
        /// Gets or sets the Giuong KH.
        /// </summary>
        /// <value>The Giuong KH.</value>
        public int? GiuongKH
        {
            get { return GetProperty(GiuongKHProperty); }
            set { SetProperty(GiuongKHProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="KhoaLS"/> property.
        /// </summary>
        public static readonly PropertyInfo<int?> KhoaLSProperty = RegisterProperty<int?>(p => p.KhoaLS, "Khoa LS");
        /// <summary>
        /// Gets or sets the Khoa LS.
        /// </summary>
        /// <value>The Khoa LS.</value>
        public int? KhoaLS
        {
            get { return GetProperty(KhoaLSProperty); }
            set { SetProperty(KhoaLSProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="KhoaCLS"/> property.
        /// </summary>
        public static readonly PropertyInfo<int?> KhoaCLSProperty = RegisterProperty<int?>(p => p.KhoaCLS, "Khoa CLS");
        /// <summary>
        /// Gets or sets the Khoa CLS.
        /// </summary>
        /// <value>The Khoa CLS.</value>
        public int? KhoaCLS
        {
            get { return GetProperty(KhoaCLSProperty); }
            set { SetProperty(KhoaCLSProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="Phong"/> property.
        /// </summary>
        public static readonly PropertyInfo<int?> PhongProperty = RegisterProperty<int?>(p => p.Phong, "Phong");
        /// <summary>
        /// Gets or sets the Phong.
        /// </summary>
        /// <value>The Phong.</value>
        public int? Phong
        {
            get { return GetProperty(PhongProperty); }
            set { SetProperty(PhongProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="GhiChu"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> GhiChuProperty = RegisterProperty<string>(p => p.GhiChu, "Ghi Chu");
        /// <summary>
        /// Gets or sets the Ghi Chu.
        /// </summary>
        /// <value>The Ghi Chu.</value>
        public string GhiChu
        {
            get { return GetProperty(GhiChuProperty); }
            set { SetProperty(GhiChuProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="SuDung"/> property.
        /// </summary>
        public static readonly PropertyInfo<bool?> SuDungProperty = RegisterProperty<bool?>(p => p.SuDung, "Su Dung");
        /// <summary>
        /// Gets or sets the Su Dung.
        /// </summary>
        /// <value><c>true</c> if Su Dung; <c>false</c> if not Su Dung; otherwise, <c>null</c>.</value>
        public bool? SuDung
        {
            get { return GetProperty(SuDungProperty); }
            set { SetProperty(SuDungProperty, value); }
        }

        #endregion

        #region Factory Methods

        /// <summary>
        /// Factory method. Creates a new <see cref="DIC_BenhVien"/> object.
        /// </summary>
        /// <returns>A reference to the created <see cref="DIC_BenhVien"/> object.</returns>
        public static DIC_BenhVien NewDIC_BenhVien()
        {
            return DataPortal.Create<DIC_BenhVien>();
        }

        /// <summary>
        /// Factory method. Loads a <see cref="DIC_BenhVien"/> object, based on given parameters.
        /// </summary>
        /// <param name="id">The ID parameter of the DIC_BenhVien to fetch.</param>
        /// <returns>A reference to the fetched <see cref="DIC_BenhVien"/> object.</returns>
        public static DIC_BenhVien GetDIC_BenhVien(Int64 id)
        {
            return DataPortal.Fetch<DIC_BenhVien>(id);
        }

        /// <summary>
        /// Factory method. Deletes a <see cref="DIC_BenhVien"/> object, based on given parameters.
        /// </summary>
        /// <param name="id">The ID of the DIC_BenhVien to delete.</param>
        public static void DeleteDIC_BenhVien(Int64 id)
        {
            DataPortal.Delete<DIC_BenhVien>(id);
        }

        /// <summary>
        /// Factory method. Asynchronously creates a new <see cref="DIC_BenhVien"/> object.
        /// </summary>
        /// <param name="callback">The completion callback method.</param>
        public static void NewDIC_BenhVien(EventHandler<DataPortalResult<DIC_BenhVien>> callback)
        {
            DataPortal.BeginCreate<DIC_BenhVien>(callback);
        }

        /// <summary>
        /// Factory method. Asynchronously loads a <see cref="DIC_BenhVien"/> object, based on given parameters.
        /// </summary>
        /// <param name="id">The ID parameter of the DIC_BenhVien to fetch.</param>
        /// <param name="callback">The completion callback method.</param>
        public static void GetDIC_BenhVien(Int64 id, EventHandler<DataPortalResult<DIC_BenhVien>> callback)
        {
            DataPortal.BeginFetch<DIC_BenhVien>(id, callback);
        }

        /// <summary>
        /// Factory method. Asynchronously deletes a <see cref="DIC_BenhVien"/> object, based on given parameters.
        /// </summary>
        /// <param name="id">The ID of the DIC_BenhVien to delete.</param>
        /// <param name="callback">The completion callback method.</param>
        public static void DeleteDIC_BenhVien(Int64 id, EventHandler<DataPortalResult<DIC_BenhVien>> callback)
        {
            DataPortal.BeginDelete<DIC_BenhVien>(id, callback);
        }

        #endregion

        #region Constructor

        /// <summary>
        /// Initializes a new instance of the <see cref="DIC_BenhVien"/> class.
        /// </summary>
        /// <remarks> Do not use to create a Csla object. Use factory methods instead.</remarks>
        private DIC_BenhVien()
        {
            // Prevent direct creation
        }

        #endregion

        #region Data Access

        /// <summary>
        /// Loads default values for the <see cref="DIC_BenhVien"/> object properties.
        /// </summary>
        [Csla.RunLocal]
        protected override void DataPortal_Create()
        {
            LoadProperty(IDProperty, System.Threading.Interlocked.Decrement(ref _lastID));
            LoadProperty(MaProperty, null);
            LoadProperty(DacDiemProperty, null);
            LoadProperty(FaxProperty, null);
            LoadProperty(GhiChuProperty, null);
            var args = new DataPortalHookArgs();
            OnCreate(args);
            base.DataPortal_Create();
        }

        /// <summary>
        /// Loads a <see cref="DIC_BenhVien"/> object from the database, based on given criteria.
        /// </summary>
        /// <param name="id">The ID.</param>
        protected void DataPortal_Fetch(Int64 id)
        {
            using (var ctx = ConnectionManager<SqlConnection>.GetManager("Connection"))
            {
                using (var cmd = new SqlCommand("dbo.DIC_BenhVien_Get", ctx.Connection))
                {
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@ID", id).DbType = DbType.Int64;
                    var args = new DataPortalHookArgs(cmd, id);
                    OnFetchPre(args);
                    Fetch(cmd);
                    OnFetchPost(args);
                }
            }
            // check all object rules and property rules
            BusinessRules.CheckRules();
        }

        private void Fetch(SqlCommand cmd)
        {
            using (var dr = new SafeDataReader(cmd.ExecuteReader()))
            {
                if (dr.Read())
                {
                    Fetch(dr);
                }
            }
        }

        /// <summary>
        /// Loads a <see cref="DIC_BenhVien"/> object from the given SafeDataReader.
        /// </summary>
        /// <param name="dr">The SafeDataReader to use.</param>
        private void Fetch(SafeDataReader dr)
        {
            // Value properties
            LoadProperty(IDProperty, data.ID);
            LoadProperty(MaProperty, data.Ma);
            LoadProperty(TenProperty, data.Ten);
            LoadProperty(IDTinhProperty, data.IDTinh);
            LoadProperty(DienTichProperty, data.DienTich);
            LoadProperty(DacDiemProperty, data.DacDiem);
            LoadProperty(KhoangCachProperty, data.KhoangCach);
            LoadProperty(EmailProperty, data.Email);
            LoadProperty(FaxProperty, data.Fax);
            LoadProperty(IDLoaiProperty, data.IDLoai);
            LoadProperty(GiuongTKProperty, data.GiuongTK);
            LoadProperty(GiuongKHProperty, data.GiuongKH);
            LoadProperty(KhoaLSProperty, data.KhoaLS);
            LoadProperty(KhoaCLSProperty, data.KhoaCLS);
            LoadProperty(PhongProperty, data.Phong);
            LoadProperty(GhiChuProperty, data.GhiChu);
            LoadProperty(SuDungProperty, data.SuDung);
            var args = new DataPortalHookArgs(dr);
            OnFetchRead(args);
        }

        /// <summary>
        /// Inserts a new <see cref="DIC_BenhVien"/> object in the database.
        /// </summary>
        protected override void DataPortal_Insert()
        {
            using (var ctx = TransactionManager<SqlConnection, SqlTransaction>.GetManager("Connection"))
            {
                using (var cmd = new SqlCommand("dbo.DIC_BenhVien_Add", ctx.Connection))
                {
                    cmd.Transaction = ctx.Transaction;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@ID", ReadProperty(IDProperty)).Direction = ParameterDirection.Output;
                    cmd.Parameters.AddWithValue("@Ma", ReadProperty(MaProperty) == null ? (object)DBNull.Value : ReadProperty(MaProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@Ten", ReadProperty(TenProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@IDTinh", ReadProperty(IDTinhProperty)).DbType = DbType.Int64;
                    cmd.Parameters.AddWithValue("@DienTich", ReadProperty(DienTichProperty) == null ? (object)DBNull.Value : ReadProperty(DienTichProperty).Value).DbType = DbType.Decimal;
                    cmd.Parameters.AddWithValue("@DacDiem", ReadProperty(DacDiemProperty) == null ? (object)DBNull.Value : ReadProperty(DacDiemProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@KhoangCach", ReadProperty(KhoangCachProperty) == null ? (object)DBNull.Value : ReadProperty(KhoangCachProperty).Value).DbType = DbType.Decimal;
                    cmd.Parameters.AddWithValue("@Email", ReadProperty(EmailProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@Fax", ReadProperty(FaxProperty) == null ? (object)DBNull.Value : ReadProperty(FaxProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@IDLoai", ReadProperty(IDLoaiProperty) == null ? (object)DBNull.Value : ReadProperty(IDLoaiProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@GiuongTK", ReadProperty(GiuongTKProperty) == null ? (object)DBNull.Value : ReadProperty(GiuongTKProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@GiuongKH", ReadProperty(GiuongKHProperty) == null ? (object)DBNull.Value : ReadProperty(GiuongKHProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@KhoaLS", ReadProperty(KhoaLSProperty) == null ? (object)DBNull.Value : ReadProperty(KhoaLSProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@KhoaCLS", ReadProperty(KhoaCLSProperty) == null ? (object)DBNull.Value : ReadProperty(KhoaCLSProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@Phong", ReadProperty(PhongProperty) == null ? (object)DBNull.Value : ReadProperty(PhongProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@GhiChu", ReadProperty(GhiChuProperty) == null ? (object)DBNull.Value : ReadProperty(GhiChuProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@SuDung", ReadProperty(SuDungProperty) == null ? (object)DBNull.Value : ReadProperty(SuDungProperty).Value).DbType = DbType.Boolean;
                    var args = new DataPortalHookArgs(cmd);
                    OnInsertPre(args);
                    cmd.ExecuteNonQuery();
                    OnInsertPost(args);
                    LoadProperty(IDProperty, (long) cmd.Parameters["@ID"].Value);
                }
                ctx.Commit();
            }
        }

        /// <summary>
        /// Updates in the database all changes made to the <see cref="DIC_BenhVien"/> object.
        /// </summary>
        protected override void DataPortal_Update()
        {
            using (var ctx = TransactionManager<SqlConnection, SqlTransaction>.GetManager("Connection"))
            {
                using (var cmd = new SqlCommand("dbo.DIC_BenhVien_Upd", ctx.Connection))
                {
                    cmd.Transaction = ctx.Transaction;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@ID", ReadProperty(IDProperty)).DbType = DbType.Int64;
                    cmd.Parameters.AddWithValue("@Ma", ReadProperty(MaProperty) == null ? (object)DBNull.Value : ReadProperty(MaProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@Ten", ReadProperty(TenProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@IDTinh", ReadProperty(IDTinhProperty)).DbType = DbType.Int64;
                    cmd.Parameters.AddWithValue("@DienTich", ReadProperty(DienTichProperty) == null ? (object)DBNull.Value : ReadProperty(DienTichProperty).Value).DbType = DbType.Decimal;
                    cmd.Parameters.AddWithValue("@DacDiem", ReadProperty(DacDiemProperty) == null ? (object)DBNull.Value : ReadProperty(DacDiemProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@KhoangCach", ReadProperty(KhoangCachProperty) == null ? (object)DBNull.Value : ReadProperty(KhoangCachProperty).Value).DbType = DbType.Decimal;
                    cmd.Parameters.AddWithValue("@Email", ReadProperty(EmailProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@Fax", ReadProperty(FaxProperty) == null ? (object)DBNull.Value : ReadProperty(FaxProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@IDLoai", ReadProperty(IDLoaiProperty) == null ? (object)DBNull.Value : ReadProperty(IDLoaiProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@GiuongTK", ReadProperty(GiuongTKProperty) == null ? (object)DBNull.Value : ReadProperty(GiuongTKProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@GiuongKH", ReadProperty(GiuongKHProperty) == null ? (object)DBNull.Value : ReadProperty(GiuongKHProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@KhoaLS", ReadProperty(KhoaLSProperty) == null ? (object)DBNull.Value : ReadProperty(KhoaLSProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@KhoaCLS", ReadProperty(KhoaCLSProperty) == null ? (object)DBNull.Value : ReadProperty(KhoaCLSProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@Phong", ReadProperty(PhongProperty) == null ? (object)DBNull.Value : ReadProperty(PhongProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@GhiChu", ReadProperty(GhiChuProperty) == null ? (object)DBNull.Value : ReadProperty(GhiChuProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@SuDung", ReadProperty(SuDungProperty) == null ? (object)DBNull.Value : ReadProperty(SuDungProperty).Value).DbType = DbType.Boolean;
                    var args = new DataPortalHookArgs(cmd);
                    OnUpdatePre(args);
                    cmd.ExecuteNonQuery();
                    OnUpdatePost(args);
                }
                ctx.Commit();
            }
        }

        /// <summary>
        /// Self deletes the <see cref="DIC_BenhVien"/> object.
        /// </summary>
        protected override void DataPortal_DeleteSelf()
        {
            DataPortal_Delete(ID);
        }

        /// <summary>
        /// Deletes the <see cref="DIC_BenhVien"/> object from database.
        /// </summary>
        /// <param name="id">The delete criteria.</param>
        protected void DataPortal_Delete(Int64 id)
        {
            using (var ctx = TransactionManager<SqlConnection, SqlTransaction>.GetManager("Connection"))
            {
                using (var cmd = new SqlCommand("dbo.DIC_BenhVien_Delete", ctx.Connection))
                {
                    cmd.Transaction = ctx.Transaction;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@ID", id).DbType = DbType.Int64;
                    var args = new DataPortalHookArgs(cmd, id);
                    OnDeletePre(args);
                    cmd.ExecuteNonQuery();
                    OnDeletePost(args);
                }
                ctx.Commit();
            }
        }

        #endregion

        #region Pseudo Events

        /// <summary>
        /// Occurs after setting all defaults for object creation.
        /// </summary>
        partial void OnCreate(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Delete, after setting query parameters and before the delete operation.
        /// </summary>
        partial void OnDeletePre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Delete, after the delete operation, before Commit().
        /// </summary>
        partial void OnDeletePost(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after setting query parameters and before the fetch operation.
        /// </summary>
        partial void OnFetchPre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after the fetch operation (object or collection is fully loaded and set up).
        /// </summary>
        partial void OnFetchPost(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after the low level fetch operation, before the data reader is destroyed.
        /// </summary>
        partial void OnFetchRead(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after setting query parameters and before the update operation.
        /// </summary>
        partial void OnUpdatePre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Insert, after the update operation, before setting back row identifiers (RowVersion) and Commit().
        /// </summary>
        partial void OnUpdatePost(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Insert, after setting query parameters and before the insert operation.
        /// </summary>
        partial void OnInsertPre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Insert, after the insert operation, before setting back row identifiers (ID and RowVersion) and Commit().
        /// </summary>
        partial void OnInsertPost(DataPortalHookArgs args);

        #endregion

    }
}
