//  This file was generated by CSLA Object Generator - CslaGenFork v4.3.0
//
// Filename:    DT_LienTuc_LopHoc_Info
// ObjectType:  DT_LienTuc_LopHoc_Info
// CSLAType:    EditableChild

using System;
using System.Data;
using System.Data.SqlClient;
using Csla;
using Csla.Data;using NETLINK.LIB;

namespace ModuleDaoTao.LIB
{

    /// <summary>
    /// DT_LienTuc_LopHoc_Info (editable child object).<br/>
    /// This is a generated base class of <see cref="DT_LienTuc_LopHoc_Info"/> business object.
    /// </summary>
    /// <remarks>
    /// This class is an item of <see cref="DT_LienTuc_LopHoc_Coll"/> collection.
    /// </remarks>
    [Serializable]
    public partial class DT_LienTuc_LopHoc_Info : BusinessBase<DT_LienTuc_LopHoc_Info>
    {

        #region Business Properties

        /// <summary>
        /// Maintains metadata about <see cref="MaLop"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> MaLopProperty = RegisterProperty<string>(p => p.MaLop, "Ma Lop");
        /// <summary>
        /// Gets or sets the Ma Lop.
        /// </summary>
        /// <value>The Ma Lop.</value>
        public string MaLop
        {
            get { return GetProperty(MaLopProperty); }
            set { SetProperty(MaLopProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="TenLop"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> TenLopProperty = RegisterProperty<string>(p => p.TenLop, "Ten Lop");
        /// <summary>
        /// Gets or sets the Ten Lop.
        /// </summary>
        /// <value>The Ten Lop.</value>
        public string TenLop
        {
            get { return GetProperty(TenLopProperty); }
            set { SetProperty(TenLopProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="DoiTuong"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> DoiTuongProperty = RegisterProperty<string>(p => p.DoiTuong, "Doi Tuong");
        /// <summary>
        /// Gets or sets the Doi Tuong.
        /// </summary>
        /// <value>The Doi Tuong.</value>
        public string DoiTuong
        {
            get { return GetProperty(DoiTuongProperty); }
            set { SetProperty(DoiTuongProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="NguonKinhPhi"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> NguonKinhPhiProperty = RegisterProperty<string>(p => p.NguonKinhPhi, "Nguon Kinh Phi");
        /// <summary>
        /// Gets or sets the Nguon Kinh Phi.
        /// </summary>
        /// <value>The Nguon Kinh Phi.</value>
        public string NguonKinhPhi
        {
            get { return GetProperty(NguonKinhPhiProperty); }
            set { SetProperty(NguonKinhPhiProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="idCanBoPhuTrach"/> property.
        /// </summary>
        public static readonly PropertyInfo<Int64?> IdCanBoPhuTrachProperty = RegisterProperty<Int64?>(p => p.IdCanBoPhuTrach, "id Can Bo Phu Trach");
        /// <summary>
        /// Gets or sets the id Can Bo Phu Trach.
        /// </summary>
        /// <value>The id Can Bo Phu Trach.</value>
        public Int64? IdCanBoPhuTrach
        {
            get { return GetProperty(IdCanBoPhuTrachProperty); }
            set { SetProperty(IdCanBoPhuTrachProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="idCanBoPhoiHop"/> property.
        /// </summary>
        public static readonly PropertyInfo<Int64?> IdCanBoPhoiHopProperty = RegisterProperty<Int64?>(p => p.IdCanBoPhoiHop, "id Can Bo Phoi Hop");
        /// <summary>
        /// Gets or sets the id Can Bo Phoi Hop.
        /// </summary>
        /// <value>The id Can Bo Phoi Hop.</value>
        public Int64? IdCanBoPhoiHop
        {
            get { return GetProperty(IdCanBoPhoiHopProperty); }
            set { SetProperty(IdCanBoPhoiHopProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="NgayBatDau"/> property.
        /// </summary>
        public static readonly PropertyInfo<SmartDate> NgayBatDauProperty = RegisterProperty<SmartDate>(p => p.NgayBatDau, "Ngay Bat Dau");
        /// <summary>
        /// Gets or sets the Ngay Bat Dau.
        /// </summary>
        /// <value>The Ngay Bat Dau.</value>
        public string NgayBatDau
        {
            get { return GetPropertyConvert<SmartDate, String>(NgayBatDauProperty); }
            set { SetPropertyConvert<SmartDate, String>(NgayBatDauProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="NgayKetThuc"/> property.
        /// </summary>
        public static readonly PropertyInfo<SmartDate> NgayKetThucProperty = RegisterProperty<SmartDate>(p => p.NgayKetThuc, "Ngay Ket Thuc");
        /// <summary>
        /// Gets or sets the Ngay Ket Thuc.
        /// </summary>
        /// <value>The Ngay Ket Thuc.</value>
        public string NgayKetThuc
        {
            get { return GetPropertyConvert<SmartDate, String>(NgayKetThucProperty); }
            set { SetPropertyConvert<SmartDate, String>(NgayKetThucProperty, value); }
        }
        /// <summary>
        /// Maintains metadata about <see cref="NgayBatDau"/> property.
        /// </summary>
        public static readonly PropertyInfo<DateTime> ShowNgayBatDauProperty = RegisterProperty<DateTime>(p => p.ShowNgayBatDau, "Ngay Bat Dau");
        /// <summary>
        /// Gets or sets the Ngay Bat Dau.
        /// </summary>
        /// <value>The Ngay Bat Dau.</value>
        public DateTime ShowNgayBatDau
        {
            get { return GetProperty(ShowNgayBatDauProperty); }
            set { SetProperty(ShowNgayBatDauProperty, value); }
        }
        /// <summary>
        /// Maintains metadata about <see cref="NgayBatDau"/> property.
        /// </summary>
        public static readonly PropertyInfo<DateTime> ShowNgayKetThucProperty = RegisterProperty<DateTime>(p => p.ShowNgayKetThuc, "Ngay Bat Dau");
        /// <summary>
        /// Gets or sets the Ngay Bat Dau.
        /// </summary>
        /// <value>The Ngay Bat Dau.</value>
        public DateTime ShowNgayKetThuc
        {
            get { return GetProperty(ShowNgayKetThucProperty); }
            set { SetProperty(ShowNgayKetThucProperty, value); }
        }
        /// <summary>
        /// Maintains metadata about <see cref="HocPhi"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> HocPhiProperty = RegisterProperty<string>(p => p.HocPhi, "Hoc Phi");
        /// <summary>
        /// Gets or sets the Hoc Phi.
        /// </summary>
        /// <value>The Hoc Phi.</value>
        public string HocPhi
        {
            get { return GetProperty(HocPhiProperty); }
            set { SetProperty(HocPhiProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="idCanBoGiangVien1"/> property.
        /// </summary>
        public static readonly PropertyInfo<Int64?> IdCanBoGiangVien1Property = RegisterProperty<Int64?>(p => p.IdCanBoGiangVien1, "id Can Bo Giang Vien1");
        /// <summary>
        /// Gets or sets the id Can Bo Giang Vien1.
        /// </summary>
        /// <value>The id Can Bo Giang Vien1.</value>
        public Int64? IdCanBoGiangVien1
        {
            get { return GetProperty(IdCanBoGiangVien1Property); }
            set { SetProperty(IdCanBoGiangVien1Property, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="idCanBoGiangVien2"/> property.
        /// </summary>
        public static readonly PropertyInfo<Int64?> IdCanBoGiangVien2Property = RegisterProperty<Int64?>(p => p.IdCanBoGiangVien2, "id Can Bo Giang Vien2");
        /// <summary>
        /// Gets or sets the id Can Bo Giang Vien2.
        /// </summary>
        /// <value>The id Can Bo Giang Vien2.</value>
        public Int64? IdCanBoGiangVien2
        {
            get { return GetProperty(IdCanBoGiangVien2Property); }
            set { SetProperty(IdCanBoGiangVien2Property, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="idCanBoGiangVien3"/> property.
        /// </summary>
        public static readonly PropertyInfo<Int64?> IdCanBoGiangVien3Property = RegisterProperty<Int64?>(p => p.IdCanBoGiangVien3, "id Can Bo Giang Vien3");
        /// <summary>
        /// Gets or sets the id Can Bo Giang Vien3.
        /// </summary>
        /// <value>The id Can Bo Giang Vien3.</value>
        public Int64? IdCanBoGiangVien3
        {
            get { return GetProperty(IdCanBoGiangVien3Property); }
            set { SetProperty(IdCanBoGiangVien3Property, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="idCanBoGiangVien4"/> property.
        /// </summary>
        public static readonly PropertyInfo<Int64?> IdCanBoGiangVien4Property = RegisterProperty<Int64?>(p => p.IdCanBoGiangVien4, "id Can Bo Giang Vien4");
        /// <summary>
        /// Gets or sets the id Can Bo Giang Vien4.
        /// </summary>
        /// <value>The id Can Bo Giang Vien4.</value>
        public Int64? IdCanBoGiangVien4
        {
            get { return GetProperty(IdCanBoGiangVien4Property); }
            set { SetProperty(IdCanBoGiangVien4Property, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="idCanBoGiangVien5"/> property.
        /// </summary>
        public static readonly PropertyInfo<Int64?> IdCanBoGiangVien5Property = RegisterProperty<Int64?>(p => p.IdCanBoGiangVien5, "id Can Bo Giang Vien5");
        /// <summary>
        /// Gets or sets the id Can Bo Giang Vien5.
        /// </summary>
        /// <value>The id Can Bo Giang Vien5.</value>
        public Int64? IdCanBoGiangVien5
        {
            get { return GetProperty(IdCanBoGiangVien5Property); }
            set { SetProperty(IdCanBoGiangVien5Property, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="idKhungLopHoc"/> property.
        /// </summary>
        public static readonly PropertyInfo<int?> IdKhungLopHocProperty = RegisterProperty<int?>(p => p.IdKhungLopHoc, "id Khung Lop Hoc");
        /// <summary>
        /// Gets or sets the id Khung Lop Hoc.
        /// </summary>
        /// <value>The id Khung Lop Hoc.</value>
        public int? IdKhungLopHoc
        {
            get { return GetProperty(IdKhungLopHocProperty); }
            set { SetProperty(IdKhungLopHocProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="MaLop"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> KhoaHocProperty = RegisterProperty<string>(p => p.KhoaHoc, "Khoa Hoc");
        /// <summary>
        /// Gets or sets the Ma Lop.
        /// </summary>
        /// <value>The Ma Lop.</value>
        public string KhoaHoc
        {
            get { return GetProperty(KhoaHocProperty); }
            set { SetProperty(KhoaHocProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="idKhungLopHoc"/> property.
        /// </summary>
        public static readonly PropertyInfo<int?> IdNguonKinhPhiProperty = RegisterProperty<int?>(p => p.IdNguonKinhPhi, "id Nguon Kinh Phi");
        /// <summary>
        /// Gets or sets the id Khung Lop Hoc.
        /// </summary>
        /// <value>The id Khung Lop Hoc.</value>
        public int? IdNguonKinhPhi
        {
            get { return GetProperty(IdNguonKinhPhiProperty); }
            set { SetProperty(IdNguonKinhPhiProperty, value); }
        }
       /// <summary>
        /// Maintains metadata about <see cref="LastEdited_User"/> property.
        /// </summary>
        public static readonly PropertyInfo<Int64?> LastEdited_UserProperty = RegisterProperty<Int64?>(p => p.LastEdited_User, "Last Edited User");
        /// <summary>
        /// Gets or sets the Last Edited User.
        /// </summary>
        /// <value>The Last Edited User.</value>
        public Int64? LastEdited_User
        {
            get { return GetProperty(LastEdited_UserProperty); }
            set { SetProperty(LastEdited_UserProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="LastEdited_Date"/> property.
        /// </summary>
        public static readonly PropertyInfo<SmartDate> LastEdited_DateProperty = RegisterProperty<SmartDate>(p => p.LastEdited_Date, "Last Edited Date");
        /// <summary>
        /// Gets or sets the Last Edited Date.
        /// </summary>
        /// <value>The Last Edited Date.</value>
        public string LastEdited_Date
        {
            get { return GetPropertyConvert<SmartDate, String>(LastEdited_DateProperty); }
            set { SetPropertyConvert<SmartDate, String>(LastEdited_DateProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="TongSoTiet"/> property.
        /// </summary>
        public static readonly PropertyInfo<int?> TongSoTietProperty = RegisterProperty<int?>(p => p.TongSoTiet, "Tong So Tiet");
        /// <summary>
        /// Gets or sets the Tong So Tiet.
        /// </summary>
        /// <value>The Tong So Tiet.</value>
        public int? TongSoTiet
        {
            get { return GetProperty(TongSoTietProperty); }
            set { SetProperty(TongSoTietProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="Backup01"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> Backup01Property = RegisterProperty<string>(p => p.Backup01, "Backup01");
        /// <summary>
        /// Gets or sets the Backup01.
        /// </summary>
        /// <value>The Backup01.</value>
        public string Backup01
        {
            get { return GetProperty(Backup01Property); }
            set { SetProperty(Backup01Property, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="Backup02"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> Backup02Property = RegisterProperty<string>(p => p.Backup02, "Backup02");
        /// <summary>
        /// Gets or sets the Backup02.
        /// </summary>
        /// <value>The Backup02.</value>
        public string Backup02
        {
            get { return GetProperty(Backup02Property); }
            set { SetProperty(Backup02Property, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="Backup03"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> Backup03Property = RegisterProperty<string>(p => p.Backup03, "Backup03");
        /// <summary>
        /// Gets or sets the Backup03.
        /// </summary>
        /// <value>The Backup03.</value>
        public string Backup03
        {
            get { return GetProperty(Backup03Property); }
            set { SetProperty(Backup03Property, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="Backup04"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> Backup04Property = RegisterProperty<string>(p => p.Backup04, "Backup04");
        /// <summary>
        /// Gets or sets the Backup04.
        /// </summary>
        /// <value>The Backup04.</value>
        public string Backup04
        {
            get { return GetProperty(Backup04Property); }
            set { SetProperty(Backup04Property, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="Backup04"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> TenCanBoPhuTrachProperty = RegisterProperty<string>(p => p.TenCanBoPhuTrach, "TenCanBoPhuTrachProperty");
        /// <summary>
        /// Gets or sets the Backup04.
        /// </summary>
        /// <value>The Backup04.</value>
        public string TenCanBoPhuTrach
        {
            get { return GetProperty(TenCanBoPhuTrachProperty); }
            set { SetProperty(TenCanBoPhuTrachProperty, value); }
        }
        /// <summary>
        /// Maintains metadata about <see cref="Backup04"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> TenChuyenKhoaLopHocProperty = RegisterProperty<string>(p => p.TenChuyenKhoaLopHoc, "TenCanBoPhuTrachProperty");
        /// <summary>
        /// Gets or sets the Backup04.
        /// </summary>
        /// <value>The Backup04.</value>
        public string TenChuyenKhoaLopHoc
        {
            get { return GetProperty(TenChuyenKhoaLopHocProperty); }
            set { SetProperty(TenChuyenKhoaLopHocProperty, value); }
        }
        /// <summary>
        /// Maintains metadata about <see cref="Backup04"/> property.
        /// </summary>
        public static readonly PropertyInfo<Int64> IDChuyenKhoaLopHocProperty = RegisterProperty<Int64>(p => p.IDChuyenKhoaLopHoc, "TenCanBoPhuTrachProperty");
        /// <summary>
        /// Gets or sets the Backup04.
        /// </summary>
        /// <value>The Backup04.</value>
        public Int64 IDChuyenKhoaLopHoc
        {
            get { return GetProperty(IDChuyenKhoaLopHocProperty); }
            set { SetProperty(IDChuyenKhoaLopHocProperty, value); }
        }
        /// <summary>
        /// Maintains metadata about <see cref="Backup04"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> TenCanBoPhoiHopProperty = RegisterProperty<string>(p => p.TenCanBoPhoiHop, "TenCanBoPhuTrachProperty");
        /// <summary>
        /// Gets or sets the Backup04.
        /// </summary>
        /// <value>The Backup04.</value>
        public string TenCanBoPhoiHop
        {
            get { return GetProperty(TenCanBoPhoiHopProperty); }
            set { SetProperty(TenCanBoPhoiHopProperty, value); }
        }
        /// <summary>
        /// Maintains metadata about <see cref="Backup05"/> property.
        /// </summary>
        public static readonly PropertyInfo<int?> Backup05Property = RegisterProperty<int?>(p => p.Backup05, "Backup05");
        /// <summary>
        /// Gets or sets the Backup05.
        /// </summary>
        /// <value>The Backup05.</value>
        public int? Backup05
        {
            get { return GetProperty(Backup05Property); }
            set { SetProperty(Backup05Property, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="Backup06"/> property.
        /// </summary>
        public static readonly PropertyInfo<int?> Backup06Property = RegisterProperty<int?>(p => p.Backup06, "Backup06");
        /// <summary>
        /// Gets or sets the Backup06.
        /// </summary>
        /// <value>The Backup06.</value>
        public int? Backup06
        {
            get { return GetProperty(Backup06Property); }
            set { SetProperty(Backup06Property, value); }
        }
        /// <summary>
        /// Maintains metadata about <see cref="SoBang"/> property.
        /// </summary>
        public static readonly PropertyInfo<bool> CheckedProperty = RegisterProperty<bool>(p => p.Checked, "Checked");
        /// <summary>
        /// Gets or sets the So Bang.
        /// </summary>
        /// <value>The So Bang.</value>
        public bool Checked
        {
            get { return GetProperty(CheckedProperty); }
            set { SetProperty(CheckedProperty, value); }
        }
        public static readonly PropertyInfo<Int32> TongSoProperty = RegisterProperty<Int32>(p => p.TongSo, "");
        /// <summary>
        /// Gets or sets the So Bang.
        /// </summary>
        /// <value>The So Bang.</value>
        public Int32 TongSo
        {
            get { return GetProperty(TongSoProperty); }
            set { SetProperty(TongSoProperty, value); }
        }
        #endregion

        #region Factory Methods

        /// <summary>
        /// Factory method. Creates a new <see cref="DT_LienTuc_LopHoc_Info"/> object.
        /// </summary>
        /// <returns>A reference to the created <see cref="DT_LienTuc_LopHoc_Info"/> object.</returns>
        internal static DT_LienTuc_LopHoc_Info NewDT_LienTuc_LopHoc_Info()
        {
            return DataPortal.CreateChild<DT_LienTuc_LopHoc_Info>();
        }

        /// <summary>
        /// Factory method. Asynchronously creates a new <see cref="DT_LienTuc_LopHoc_Info"/> object.
        /// </summary>
        /// <param name="callback">The completion callback method.</param>
        internal static void NewDT_LienTuc_LopHoc_Info(EventHandler<DataPortalResult<DT_LienTuc_LopHoc_Info>> callback)
        {
            DataPortal.BeginCreate<DT_LienTuc_LopHoc_Info>(callback);
        }

        /// <summary>
        /// Factory method. Loads a <see cref="DT_LienTuc_LopHoc_Info"/> object from the given SafeDataReader.
        /// </summary>
        /// <param name="dr">The SafeDataReader to use.</param>
        /// <returns>A reference to the fetched <see cref="DT_LienTuc_LopHoc_Info"/> object.</returns>
        internal static DT_LienTuc_LopHoc_Info GetDT_LienTuc_LopHoc_Info(SafeDataReader dr)
        {
            DT_LienTuc_LopHoc_Info obj = new DT_LienTuc_LopHoc_Info();
            // show the framework that this is a child object
            obj.MarkAsChild();
            obj.Fetch(dr);
            obj.MarkOld();
            // check all object rules and property rules
            obj.BusinessRules.CheckRules();
            return obj;
        }

        #endregion

        #region Constructor

        /// <summary>
        /// Initializes a new instance of the <see cref="DT_LienTuc_LopHoc_Info"/> class.
        /// </summary>
        /// <remarks> Do not use to create a Csla object. Use factory methods instead.</remarks>
        private DT_LienTuc_LopHoc_Info()
        {
            // Prevent direct creation

            // show the framework that this is a child object
            MarkAsChild();
        }

        #endregion

        #region Data Access

        /// <summary>
        /// Loads default values for the <see cref="DT_LienTuc_LopHoc_Info"/> object properties.
        /// </summary>
        [Csla.RunLocal]
        protected override void Child_Create()
        {
            LoadProperty(TenLopProperty, null);
            LoadProperty(DoiTuongProperty, null);
            LoadProperty(NguonKinhPhiProperty, null);
            LoadProperty(HocPhiProperty, null);
            LoadProperty(KhoaHocProperty, null);
            LoadProperty(LastEdited_DateProperty, null);
            LoadProperty(Backup01Property, null);
            LoadProperty(Backup02Property, null);
            LoadProperty(Backup03Property, null);
            LoadProperty(Backup04Property, null);
            var args = new DataPortalHookArgs();
            OnCreate(args);
            base.Child_Create();
        }

        /// <summary>
        /// Loads a <see cref="DT_LienTuc_LopHoc_Info"/> object from the given SafeDataReader.
        /// </summary>
        /// <param name="dr">The SafeDataReader to use.</param>
        DateTime ngaythang;
        private void Fetch(SafeDataReader dr)
        {
            // Value properties
            
            LoadProperty(MaLopProperty, dr.GetString("MaLop"));
            LoadProperty(TenLopProperty, dr.GetString("TenLop"));
            LoadProperty(DoiTuongProperty, dr.GetString("DoiTuong"));
            LoadProperty(NguonKinhPhiProperty, dr.GetString("NguonKinhPhi2"));
            LoadProperty(IdCanBoPhuTrachProperty, dr.GetInt64("IdCanBoPhuTrach"));
            LoadProperty(IdCanBoPhoiHopProperty, dr.GetInt64("IdCanBoPhoiHop"));
            LoadProperty(NgayBatDauProperty, dr.GetSmartDate("NgayBatDau"));
            LoadProperty(NgayKetThucProperty, dr.GetSmartDate("NgayKetThuc"));
            try
            {
                ngaythang = Convert.ToDateTime(dr.GetSmartDate("NgayKetThuc").ToString());
            }
            catch(Exception ex)
            {
            }
            LoadProperty(ShowNgayKetThucProperty, ngaythang);
            try
            {
                ngaythang = Convert.ToDateTime(dr.GetSmartDate("NgayBatDau").ToString());
            }
            catch (Exception ex)
            {
            }
            LoadProperty(ShowNgayBatDauProperty, ngaythang);
            LoadProperty(HocPhiProperty, dr.GetString("HocPhi"));
            LoadProperty(IdCanBoGiangVien1Property, dr.GetInt64("IdCanBoGiangVien1"));
            LoadProperty(IdCanBoGiangVien2Property, dr.GetInt64("IdCanBoGiangVien2"));
            LoadProperty(IdCanBoGiangVien3Property, dr.GetInt64("IdCanBoGiangVien3"));
            LoadProperty(IdCanBoGiangVien4Property, dr.GetInt64("IdCanBoGiangVien4"));
            LoadProperty(IdCanBoGiangVien5Property, dr.GetInt64("IdCanBoGiangVien5"));
            LoadProperty(IdKhungLopHocProperty, dr.GetInt32("IdKhungLopHoc"));
            LoadProperty(KhoaHocProperty, dr.GetString("KhoaHoc"));
            LoadProperty(IdNguonKinhPhiProperty, dr.GetInt32("IdNguonKinhPhi"));
            LoadProperty(LastEdited_UserProperty, dr.GetInt64("LastEdited_User"));
            LoadProperty(LastEdited_DateProperty, dr.GetSmartDate("LastEdited_Date"));
            LoadProperty(TongSoTietProperty, dr.GetInt32("TongSoTiet"));
            LoadProperty(Backup01Property, dr.GetString("Backup01"));
            LoadProperty(Backup02Property, dr.GetString("Backup02"));
            LoadProperty(Backup03Property, dr.GetString("Backup03"));
            LoadProperty(Backup04Property, dr.GetString("Backup04"));
            LoadProperty(Backup05Property, dr.GetInt32("Backup05"));
            LoadProperty(Backup06Property, dr.GetInt32("Backup06"));
            LoadProperty(TenCanBoPhuTrachProperty, dr.GetString("TenCanBoPhuTrach"));
            LoadProperty(TenChuyenKhoaLopHocProperty, dr.GetString("TenChuyenKhoaLopHoc"));
            LoadProperty(IDChuyenKhoaLopHocProperty, dr.GetInt64("IDChuyenKhoaLopHoc"));
            LoadProperty(TenCanBoPhoiHopProperty, dr.GetString("CanBoPhoiHop"));
            LoadProperty(TongSoProperty, dr.GetInt32("TongSo"));
            var args = new DataPortalHookArgs(dr);
            OnFetchRead(args);
        }

        /// <summary>
        /// Inserts a new <see cref="DT_LienTuc_LopHoc_Info"/> object in the database.
        /// </summary>
        private void Child_Insert()
        {
            using (var ctx = TransactionManager<SqlConnection, SqlTransaction>.GetManager("Connection"))
            {
                using (var cmd = new SqlCommand("dbo.DT_LienTuc_LopHoc_Info_add", ctx.Connection))
                {
                    cmd.Transaction = ctx.Transaction;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@MaLop", ReadProperty(MaLopProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@TenLop", ReadProperty(TenLopProperty) == null ? (object)DBNull.Value : ReadProperty(TenLopProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@DoiTuong", ReadProperty(DoiTuongProperty) == null ? (object)DBNull.Value : ReadProperty(DoiTuongProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@NguonKinhPhi", ReadProperty(NguonKinhPhiProperty) == null ? (object)DBNull.Value : ReadProperty(NguonKinhPhiProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@idCanBoPhuTrach", ReadProperty(IdCanBoPhuTrachProperty) == null ? (object)DBNull.Value : ReadProperty(IdCanBoPhuTrachProperty).Value).DbType = DbType.Int64;
                    cmd.Parameters.AddWithValue("@idCanBoPhoiHop", ReadProperty(IdCanBoPhoiHopProperty) == null ? (object)DBNull.Value : ReadProperty(IdCanBoPhoiHopProperty).Value).DbType = DbType.Int64;
                    cmd.Parameters.AddWithValue("@NgayBatDau", ReadProperty(NgayBatDauProperty)).DbType = DbType.DateTime;
                    cmd.Parameters.AddWithValue("@NgayKetThuc", ReadProperty(NgayKetThucProperty)).DbType = DbType.DateTime;
                    cmd.Parameters.AddWithValue("@HocPhi", ReadProperty(HocPhiProperty) == null ? (object)DBNull.Value : ReadProperty(HocPhiProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@idCanBoGiangVien1", ReadProperty(IdCanBoGiangVien1Property) == null ? (object)DBNull.Value : ReadProperty(IdCanBoGiangVien1Property).Value).DbType = DbType.Int64;
                    cmd.Parameters.AddWithValue("@idCanBoGiangVien2", ReadProperty(IdCanBoGiangVien2Property) == null ? (object)DBNull.Value : ReadProperty(IdCanBoGiangVien2Property).Value).DbType = DbType.Int64;
                    cmd.Parameters.AddWithValue("@idCanBoGiangVien3", ReadProperty(IdCanBoGiangVien3Property) == null ? (object)DBNull.Value : ReadProperty(IdCanBoGiangVien3Property).Value).DbType = DbType.Int64;
                    cmd.Parameters.AddWithValue("@idCanBoGiangVien4", ReadProperty(IdCanBoGiangVien4Property) == null ? (object)DBNull.Value : ReadProperty(IdCanBoGiangVien4Property).Value).DbType = DbType.Int64;
                    cmd.Parameters.AddWithValue("@idCanBoGiangVien5", ReadProperty(IdCanBoGiangVien5Property) == null ? (object)DBNull.Value : ReadProperty(IdCanBoGiangVien5Property).Value).DbType = DbType.Int64;
                    cmd.Parameters.AddWithValue("@idKhungLopHoc", ReadProperty(IdKhungLopHocProperty) == null ? (object)DBNull.Value : ReadProperty(IdKhungLopHocProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@KhoaHoc", ReadProperty(KhoaHocProperty) == null ? (object)DBNull.Value : ReadProperty(KhoaHocProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@IdNguonKinhPhi", ReadProperty(IdNguonKinhPhiProperty) == null ? (object)DBNull.Value : ReadProperty(IdNguonKinhPhiProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@LastEdited_User", ReadProperty(LastEdited_UserProperty) == null ? (object)DBNull.Value : ReadProperty(LastEdited_UserProperty).Value).DbType = DbType.Int64;
                    cmd.Parameters.AddWithValue("@LastEdited_Date", ReadProperty(LastEdited_DateProperty).DBValue).DbType = DbType.DateTime;
                    cmd.Parameters.AddWithValue("@TongSoTiet", ReadProperty(TongSoTietProperty) == null ? (object)DBNull.Value : ReadProperty(TongSoTietProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@Backup01", ReadProperty(Backup01Property) == null ? (object)DBNull.Value : ReadProperty(Backup01Property)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@Backup02", ReadProperty(Backup02Property) == null ? (object)DBNull.Value : ReadProperty(Backup02Property)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@Backup03", ReadProperty(Backup03Property) == null ? (object)DBNull.Value : ReadProperty(Backup03Property)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@Backup04", ReadProperty(Backup04Property) == null ? (object)DBNull.Value : ReadProperty(Backup04Property)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@Backup05", ReadProperty(Backup05Property) == null ? (object)DBNull.Value : ReadProperty(Backup05Property).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@Backup06", ReadProperty(Backup06Property) == null ? (object)DBNull.Value : ReadProperty(Backup06Property).Value).DbType = DbType.Int32;
                    var args = new DataPortalHookArgs(cmd);
                    OnInsertPre(args);
                    cmd.ExecuteNonQuery();
                    OnInsertPost(args);
                }
            }
        }

        /// <summary>
        /// Updates in the database all changes made to the <see cref="DT_LienTuc_LopHoc_Info"/> object.
        /// </summary>
        private void Child_Update()
        {
            if (!IsDirty)
                return;

            using (var ctx = TransactionManager<SqlConnection, SqlTransaction>.GetManager("Connection"))
            {
                using (var cmd = new SqlCommand("dbo.DT_LienTuc_LopHoc_Info_update", ctx.Connection))
                {
                    cmd.Transaction = ctx.Transaction;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@MaLop", ReadProperty(MaLopProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@TenLop", ReadProperty(TenLopProperty) == null ? (object)DBNull.Value : ReadProperty(TenLopProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@DoiTuong", ReadProperty(DoiTuongProperty) == null ? (object)DBNull.Value : ReadProperty(DoiTuongProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@NguonKinhPhi", ReadProperty(NguonKinhPhiProperty) == null ? (object)DBNull.Value : ReadProperty(NguonKinhPhiProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@idCanBoPhuTrach", ReadProperty(IdCanBoPhuTrachProperty) == null ? (object)DBNull.Value : ReadProperty(IdCanBoPhuTrachProperty).Value).DbType = DbType.Int64;
                    cmd.Parameters.AddWithValue("@idCanBoPhoiHop", ReadProperty(IdCanBoPhoiHopProperty) == null ? (object)DBNull.Value : ReadProperty(IdCanBoPhoiHopProperty).Value).DbType = DbType.Int64;
                    cmd.Parameters.AddWithValue("@NgayBatDau", ReadProperty(NgayBatDauProperty)).DbType = DbType.DateTime;
                    cmd.Parameters.AddWithValue("@NgayKetThuc", ReadProperty(NgayKetThucProperty)).DbType = DbType.DateTime;
                    cmd.Parameters.AddWithValue("@HocPhi", ReadProperty(HocPhiProperty) == null ? (object)DBNull.Value : ReadProperty(HocPhiProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@idCanBoGiangVien1", ReadProperty(IdCanBoGiangVien1Property) == null ? (object)DBNull.Value : ReadProperty(IdCanBoGiangVien1Property).Value).DbType = DbType.Int64;
                    cmd.Parameters.AddWithValue("@idCanBoGiangVien2", ReadProperty(IdCanBoGiangVien2Property) == null ? (object)DBNull.Value : ReadProperty(IdCanBoGiangVien2Property).Value).DbType = DbType.Int64;
                    cmd.Parameters.AddWithValue("@idCanBoGiangVien3", ReadProperty(IdCanBoGiangVien3Property) == null ? (object)DBNull.Value : ReadProperty(IdCanBoGiangVien3Property).Value).DbType = DbType.Int64;
                    cmd.Parameters.AddWithValue("@idCanBoGiangVien4", ReadProperty(IdCanBoGiangVien4Property) == null ? (object)DBNull.Value : ReadProperty(IdCanBoGiangVien4Property).Value).DbType = DbType.Int64;
                    cmd.Parameters.AddWithValue("@idCanBoGiangVien5", ReadProperty(IdCanBoGiangVien5Property) == null ? (object)DBNull.Value : ReadProperty(IdCanBoGiangVien5Property).Value).DbType = DbType.Int64;
                    cmd.Parameters.AddWithValue("@idKhungLopHoc", ReadProperty(IdKhungLopHocProperty) == null ? (object)DBNull.Value : ReadProperty(IdKhungLopHocProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@KhoaHoc", ReadProperty(KhoaHocProperty) == null ? (object)DBNull.Value : ReadProperty(KhoaHocProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@IdNguonKinhPhi", ReadProperty(IdNguonKinhPhiProperty) == null ? (object)DBNull.Value : ReadProperty(IdNguonKinhPhiProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@LastEdited_User", ReadProperty(LastEdited_UserProperty) == null ? (object)DBNull.Value : ReadProperty(LastEdited_UserProperty).Value).DbType = DbType.Int64;
                    cmd.Parameters.AddWithValue("@LastEdited_Date", ReadProperty(LastEdited_DateProperty).DBValue).DbType = DbType.DateTime;
                    cmd.Parameters.AddWithValue("@TongSoTiet", ReadProperty(TongSoTietProperty) == null ? (object)DBNull.Value : ReadProperty(TongSoTietProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@Backup01", ReadProperty(Backup01Property) == null ? (object)DBNull.Value : ReadProperty(Backup01Property)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@Backup02", ReadProperty(Backup02Property) == null ? (object)DBNull.Value : ReadProperty(Backup02Property)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@Backup03", ReadProperty(Backup03Property) == null ? (object)DBNull.Value : ReadProperty(Backup03Property)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@Backup04", ReadProperty(Backup04Property) == null ? (object)DBNull.Value : ReadProperty(Backup04Property)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@Backup05", ReadProperty(Backup05Property) == null ? (object)DBNull.Value : ReadProperty(Backup05Property).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@Backup06", ReadProperty(Backup06Property) == null ? (object)DBNull.Value : ReadProperty(Backup06Property).Value).DbType = DbType.Int32;
                    var args = new DataPortalHookArgs(cmd);
                    OnUpdatePre(args);
                    cmd.ExecuteNonQuery();
                    OnUpdatePost(args);
                }
            }
        }

        /// <summary>
        /// Self deletes the <see cref="DT_LienTuc_LopHoc_Info"/> object from database.
        /// </summary>
        private void Child_DeleteSelf()
        {
            using (var ctx = TransactionManager<SqlConnection, SqlTransaction>.GetManager("Connection"))
            {
                using (var cmd = new SqlCommand("dbo.DT_LienTuc_LopHoc_Info_delete", ctx.Connection))
                {
                    cmd.Transaction = ctx.Transaction;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@MaLop", ReadProperty(MaLopProperty)).DbType = DbType.String;
                    var args = new DataPortalHookArgs(cmd);
                    OnDeletePre(args);
                    cmd.ExecuteNonQuery();
                    OnDeletePost(args);
                }
            }
        }

        #endregion

        #region Pseudo Events

        /// <summary>
        /// Occurs after setting all defaults for object creation.
        /// </summary>
        partial void OnCreate(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Delete, after setting query parameters and before the delete operation.
        /// </summary>
        partial void OnDeletePre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Delete, after the delete operation, before Commit().
        /// </summary>
        partial void OnDeletePost(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after setting query parameters and before the fetch operation.
        /// </summary>
        partial void OnFetchPre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after the fetch operation (object or collection is fully loaded and set up).
        /// </summary>
        partial void OnFetchPost(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after the low level fetch operation, before the data reader is destroyed.
        /// </summary>
        partial void OnFetchRead(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after setting query parameters and before the update operation.
        /// </summary>
        partial void OnUpdatePre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Insert, after the update operation, before setting back row identifiers (RowVersion) and Commit().
        /// </summary>
        partial void OnUpdatePost(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Insert, after setting query parameters and before the insert operation.
        /// </summary>
        partial void OnInsertPre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Insert, after the insert operation, before setting back row identifiers (ID and RowVersion) and Commit().
        /// </summary>
        partial void OnInsertPost(DataPortalHookArgs args);

        #endregion

    }
}
