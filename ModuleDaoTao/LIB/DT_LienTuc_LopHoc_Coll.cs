//  This file was generated by CSLA Object Generator - CslaGenFork v4.3.0
//
// Filename:    DT_LienTuc_LopHoc_Coll
// ObjectType:  DT_LienTuc_LopHoc_Coll
// CSLAType:    EditableRootCollection

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;
using Csla;
using Csla.Data;using NETLINK.LIB;

namespace ModuleDaoTao.LIB
{

    /// <summary>
    /// DT_LienTuc_LopHoc_Coll (editable root list).<br/>
    /// This is a generated base class of <see cref="DT_LienTuc_LopHoc_Coll"/> business object.
    /// </summary>
    /// <remarks>
    /// The items of the collection are <see cref="DT_LienTuc_LopHoc_Info"/> objects.
    /// </remarks>
    [Serializable]
    public partial class DT_LienTuc_LopHoc_Coll : BusinessBindingListBase<DT_LienTuc_LopHoc_Coll, DT_LienTuc_LopHoc_Info>
    {

        #region Collection Business Methods

        /// <summary>
        /// Removes a <see cref="DT_LienTuc_LopHoc_Info"/> item from the collection.
        /// </summary>
        /// <param name="maLop">The MaLop of the item to be removed.</param>
        public void Remove(string maLop)
        {
            foreach (var dT_LienTuc_LopHoc_Info in this)
            {
                if (dT_LienTuc_LopHoc_Info.MaLop == maLop)
                {
                    Remove(dT_LienTuc_LopHoc_Info);
                    break;
                }
            }
        }

        /// <summary>
        /// Determines whether a <see cref="DT_LienTuc_LopHoc_Info"/> item is in the collection.
        /// </summary>
        /// <param name="maLop">The MaLop of the item to search for.</param>
        /// <returns><c>true</c> if the DT_LienTuc_LopHoc_Info is a collection item; otherwise, <c>false</c>.</returns>
        public bool Contains(string maLop)
        {
            foreach (var dT_LienTuc_LopHoc_Info in this)
            {
                if (dT_LienTuc_LopHoc_Info.MaLop == maLop)
                {
                    return true;
                }
            }
            return false;
        }

        /// <summary>
        /// Determines whether a <see cref="DT_LienTuc_LopHoc_Info"/> item is in the collection's DeletedList.
        /// </summary>
        /// <param name="maLop">The MaLop of the item to search for.</param>
        /// <returns><c>true</c> if the DT_LienTuc_LopHoc_Info is a deleted collection item; otherwise, <c>false</c>.</returns>
        public bool ContainsDeleted(string maLop)
        {
            foreach (var dT_LienTuc_LopHoc_Info in this.DeletedList)
            {
                if (dT_LienTuc_LopHoc_Info.MaLop == maLop)
                {
                    return true;
                }
            }
            return false;
        }

        #endregion

        #region Factory Methods

        /// <summary>
        /// Factory method. Creates a new <see cref="DT_LienTuc_LopHoc_Coll"/> collection.
        /// </summary>
        /// <returns>A reference to the created <see cref="DT_LienTuc_LopHoc_Coll"/> collection.</returns>
        public static DT_LienTuc_LopHoc_Coll NewDT_LienTuc_LopHoc_Coll()
        {
            return DataPortal.Create<DT_LienTuc_LopHoc_Coll>();
        }

        /// <summary>
        /// Factory method. Loads a <see cref="DT_LienTuc_LopHoc_Coll"/> collection.
        /// </summary>
        /// <returns>A reference to the fetched <see cref="DT_LienTuc_LopHoc_Coll"/> collection.</returns>
        public static DT_LienTuc_LopHoc_Coll GetDT_LienTuc_LopHoc_Coll()
        {
            return DataPortal.Fetch<DT_LienTuc_LopHoc_Coll>();
        }
        public static DT_LienTuc_LopHoc_Coll GetDT_LienTuc_LopHoc_Coll(int nam, long id)
        {
            return DataPortal.Fetch<DT_LienTuc_LopHoc_Coll>(new Cria(nam,id));
        }

        public static DT_LienTuc_KhungLopHoc_Coll GetDT_LienTuc_KhungLopHoc_Coll(BusinessFunction function)
        {
            return DataPortal.Fetch<DT_LienTuc_KhungLopHoc_Coll>(function);
        }
        public static DT_LienTuc_LopHoc_Coll GetDT_LienTuc_LopHoc_CollNamAndPhong(int nam)
        {
            return DataPortal.Fetch<DT_LienTuc_LopHoc_Coll>(new CriaNP(nam));
        }
        public static DT_LienTuc_LopHoc_Coll GetDT_LienTuc_LopHoc_Coll_Diem(int nam, int id)
        {
            return DataPortal.Fetch<DT_LienTuc_LopHoc_Coll>(new CriaNP_Diem(nam,id));
        }
        //public static DT_LienTuc_LopHoc_Coll GetDT_LienTuc_LopHoc_Coll_TenLop()
        //{
        //    return DataPortal.Fetch<DT_LienTuc_LopHoc_Coll>(new CriaTenLop());
        //}
        public static int GetDT_LienTuc_LopHoc_Coll_Count(BusinessFunction function)
        {
            return DataPortal_FetchCount(function);
        }

        /// <summary>
        /// Factory method. Asynchronously creates a new <see cref="DT_LienTuc_LopHoc_Coll"/> collection.
        /// </summary>
        /// <param name="callback">The completion callback method.</param>
        public static void NewDT_LienTuc_LopHoc_Coll(EventHandler<DataPortalResult<DT_LienTuc_LopHoc_Coll>> callback)
        {
            DataPortal.BeginCreate<DT_LienTuc_LopHoc_Coll>(callback);
        }

        /// <summary>
        /// Factory method. Asynchronously loads a <see cref="DT_LienTuc_LopHoc_Coll"/> collection.
        /// </summary>
        /// <param name="callback">The completion callback method.</param>
        public static void GetDT_LienTuc_LopHoc_Coll(EventHandler<DataPortalResult<DT_LienTuc_LopHoc_Coll>> callback)
        {
            DataPortal.BeginFetch<DT_LienTuc_LopHoc_Coll>(callback);
        }
        public static void GetDT_LienTuc_LopHoc_Coll(Cria cr, EventHandler<DataPortalResult<DT_LienTuc_LopHoc_Coll>> callback)
        {
            DataPortal.BeginFetch<DT_LienTuc_LopHoc_Coll>(cr,callback);
        }

        #endregion

         

        #region Constructor

        /// <summary>
        /// Initializes a new instance of the <see cref="DT_LienTuc_LopHoc_Coll"/> class.
        /// </summary>
        /// <remarks> Do not use to create a Csla object. Use factory methods instead.</remarks>
        private DT_LienTuc_LopHoc_Coll()
        {
            // Prevent direct creation

            var rlce = RaiseListChangedEvents;
            RaiseListChangedEvents = false;
            AllowNew = true;
            AllowEdit = true;
            AllowRemove = true;
            RaiseListChangedEvents = rlce;
        }

        #endregion

        #region Data Access

        
        public class Cria
        {
            private int _nam;

            public int Nam
            {
                get { return _nam; }
                set { _nam = value; }
            }
            private long _id;

            public long Id
            {
                get { return _id; }
                set { _id = value; }
            }
            public Cria()
            { }
            public Cria(int nam, long id)
            {
                this._id = id;
                this._nam = nam;
            }
        }

        public class CriaNP
        {
            private int _nam;

            public int Nam
            {
                get { return _nam; }
                set { _nam = value; }
            }
            private int _id;

            public int Id
            {
                get { return _id; }
                set { _id = value; }
            }
            public CriaNP()
            { }
            public CriaNP(int nam)
            {
                this._nam = nam;
            }
            public CriaNP(int nam, int id)
            {
                this._nam = nam;
                this._id = id;
            }

        }
        public class CriaNP_Diem
        {
            private int _nam;

            public int Nam
            {
                get { return _nam; }
                set { _nam = value; }
            }
            private int _id;

            public int Id
            {
                get { return _id; }
                set { _id = value; }
            }
            public CriaNP_Diem()
            { }
            public CriaNP_Diem(int nam, int id)
            {
                this._nam = nam;
                this._id = id;
            }

        }
        /// <summary>
        /// Loads a <see cref="DT_LienTuc_LopHoc_Coll"/> collection from the database.
        /// </summary>
        protected void DataPortal_Fetch()
        {
            using (var ctx = ConnectionManager<SqlConnection>.GetManager("Connection"))
            {
                using (var cmd = new SqlCommand("dbo.DT_LienTuc_LopHoc_Coll_get", ctx.Connection))
                {
                    cmd.CommandType = CommandType.StoredProcedure;
                    var args = new DataPortalHookArgs(cmd);
                    OnFetchPre(args);
                    LoadCollection(cmd);
                    OnFetchPost(args);
                }
            }
        }

        protected void DataPortal_Fetch(Cria cr)
        {
            using (var ctx = ConnectionManager<SqlConnection>.GetManager("Connection"))
            {
                using (var cmd = new SqlCommand("dbo.DT_LienTuc_LopHoc_Coll_getbyNamAndId", ctx.Connection))
                {
                    cmd.CommandType = CommandType.StoredProcedure;
                    var args = new DataPortalHookArgs(cmd);
                    SqlParameter parameter = new SqlParameter("@id", SqlDbType.BigInt);
                    parameter.Value = cr.Id;
                    cmd.Parameters.Add(parameter);
                    SqlParameter parameter1 = new SqlParameter("@nam", SqlDbType.Int);
                    parameter1.Value = cr.Nam;
                    cmd.Parameters.Add(parameter1);

                    OnFetchPre(args);
                    LoadCollection(cmd);
                    OnFetchPost(args);
                }
            }
        }

        protected void DataPortal_Fetch(CriaNP cr)
        {
            using (var ctx = ConnectionManager<SqlConnection>.GetManager("Connection"))
            {
                using (var cmd = new SqlCommand("dbo.DT_LienTuc_LopHoc_Coll_getbyNam", ctx.Connection))
                {
                    cmd.CommandType = CommandType.StoredProcedure;
                    var args = new DataPortalHookArgs(cmd);
                    SqlParameter parameter1 = new SqlParameter("@nam", SqlDbType.Int);
                    parameter1.Value = cr.Nam;
                    cmd.Parameters.Add(parameter1);

                    OnFetchPre(args);
                    LoadCollection(cmd);
                    OnFetchPost(args);
                }
            }
        }
        protected void DataPortal_Fetch(CriaNP_Diem cr)
        {
            using (var ctx = ConnectionManager<SqlConnection>.GetManager("Connection"))
            {
                using (var cmd = new SqlCommand("dbo.DT_LienTuc_LopHoc_Coll_get", ctx.Connection))
                {
                    cmd.CommandType = CommandType.StoredProcedure;
                    var args = new DataPortalHookArgs(cmd);
                    SqlParameter parameter1 = new SqlParameter("@Nam", SqlDbType.Int);
                    parameter1.Value = cr.Nam;
                    cmd.Parameters.Add(parameter1);
                    SqlParameter parameter2 = new SqlParameter("@BoPhan", SqlDbType.Int);
                    parameter1.Value = cr.Nam;
                    cmd.Parameters.Add(parameter2);

                    OnFetchPre(args);
                    LoadCollection(cmd);
                    OnFetchPost(args);
                }
            }
        }
        /// <summary>
        /// get Count
        /// </summary>
        /// <param name="function"></param>
        /// <returns></returns>
        public static int DataPortal_FetchCount(BusinessFunction function)
        {
            using (var ctx = ConnectionManager<SqlConnection>.GetManager("Connection"))
            {
                using (var cmd = new SqlCommand("dbo.DT_LienTuc_LopHoc_Coll_getByYear", ctx.Connection))
                {
                    cmd.CommandType = CommandType.StoredProcedure;

                    SqlParameter parameter = new SqlParameter("@year", SqlDbType.Int);
                    parameter.Value = function.ItemFilterCondition_Int;
                    cmd.Parameters.Add(parameter);

                    SqlParameter parameter1 = new SqlParameter("@idChuyenKhoaLop", SqlDbType.Int);
                    parameter1.Value = function.ItemFilterCondition_Int2;
                    cmd.Parameters.Add(parameter1);
                    object re = cmd.ExecuteScalar();
                    int result = 0;
                    if (re != null && int.TryParse(re.ToString(), out result))
                    {
                        return result;
                    }
                    else
                    {
                        return 0;
                    }
                        
                   
                }
            }
        }

        private void LoadCollection(SqlCommand cmd)
        {
            using (var dr = new SafeDataReader(cmd.ExecuteReader()))
            {
                Fetch(dr);
            }
        }

        /// <summary>
        /// Loads all <see cref="DT_LienTuc_LopHoc_Coll"/> collection items from the given SafeDataReader.
        /// </summary>
        /// <param name="dr">The SafeDataReader to use.</param>
        private void Fetch(SafeDataReader dr)
        {
            var rlce = RaiseListChangedEvents;
            RaiseListChangedEvents = false;
            while (dr.Read())
            {
                Add(DT_LienTuc_LopHoc_Info.GetDT_LienTuc_LopHoc_Info(dr));
            }
            RaiseListChangedEvents = rlce;
        }

        /// <summary>
        /// Updates in the database all changes made to the <see cref="DT_LienTuc_LopHoc_Coll"/> object.
        /// </summary>
        protected override void DataPortal_Update()
        {
            using (var ctx = TransactionManager<SqlConnection, SqlTransaction>.GetManager("Connection"))
            {
                base.Child_Update();
                ctx.Commit();
            }
        }

        #endregion

        #region Pseudo Events

        /// <summary>
        /// Occurs after setting query parameters and before the fetch operation.
        /// </summary>
        partial void OnFetchPre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after the fetch operation (object or collection is fully loaded and set up).
        /// </summary>
        partial void OnFetchPost(DataPortalHookArgs args);

        #endregion

    }
}
