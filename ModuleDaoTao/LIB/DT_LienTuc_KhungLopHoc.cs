//  This file was generated by CSLA Object Generator - CslaGenFork v4.3.0
//
// Filename:    DT_LienTuc_KhungLopHoc
// ObjectType:  DT_LienTuc_KhungLopHoc
// CSLAType:    EditableRoot

using System;
using System.Data;
using System.Data.SqlClient;
using Csla;
using Csla.Data;using NETLINK.LIB;

namespace ModuleDaoTao.LIB
{

    /// <summary>
    /// DT_LienTuc_KhungLopHoc (editable root object).<br/>
    /// This is a generated base class of <see cref="DT_LienTuc_KhungLopHoc"/> business object.
    /// </summary>
    [Serializable]
    public partial class DT_LienTuc_KhungLopHoc : BusinessBase<DT_LienTuc_KhungLopHoc>
    {

        #region Static Fields

        private static int _lastID;

        #endregion

        #region Business Properties

        /// <summary>
        /// Maintains metadata about <see cref="id"/> property.
        /// </summary>
        public static readonly PropertyInfo<int> IdProperty = RegisterProperty<int>(p => p.Id, "id");
        /// <summary>
        /// Gets the id.
        /// </summary>
        /// <value>The id.</value>
        public int Id
        {
            get { return GetProperty(IdProperty); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="TenLop"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> TenLopProperty = RegisterProperty<string>(p => p.TenLop, "Ten Lop");
        /// <summary>
        /// Gets or sets the Ten Lop.
        /// </summary>
        /// <value>The Ten Lop.</value>
        public string TenLop
        {
            get { return GetProperty(TenLopProperty); }
            set { SetProperty(TenLopProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="idChuyenKhoa"/> property.
        /// </summary>
        public static readonly PropertyInfo<Int64?> IdChuyenKhoaProperty = RegisterProperty<Int64?>(p => p.IdChuyenKhoa, "id Chuyen Khoa");
        /// <summary>
        /// Gets or sets the id Chuyen Khoa.
        /// </summary>
        /// <value>The id Chuyen Khoa.</value>
        public Int64? IdChuyenKhoa
        {
            get { return GetProperty(IdChuyenKhoaProperty); }
            set { SetProperty(IdChuyenKhoaProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="HocPhi"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> HocPhiProperty = RegisterProperty<string>(p => p.HocPhi, "Hoc Phi");
        /// <summary>
        /// Gets or sets the Hoc Phi.
        /// </summary>
        /// <value>The Hoc Phi.</value>
        public string HocPhi
        {
            get { return GetProperty(HocPhiProperty); }
            set { SetProperty(HocPhiProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="TenLop"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> ChuyenKhoaProperty = RegisterProperty<string>(p => p.ChuyenKhoa, "Chuyen Khoa");
        /// <summary>
        /// Gets or sets the Ten Lop.
        /// </summary>
        /// <value>The Ten Lop.</value>
        public string ChuyenKhoa
        {
            get { return GetProperty(ChuyenKhoaProperty); }
            set { SetProperty(ChuyenKhoaProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="TenLop"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> ThoiGianHocProperty = RegisterProperty<string>(p => p.ThoiGianHoc, "Thoi Gian Hoc");
        /// <summary>
        /// Gets or sets the Ten Lop.
        /// </summary>
        /// <value>The Ten Lop.</value>
        public string ThoiGianHoc
        {
            get { return GetProperty(ThoiGianHocProperty); }
            set { SetProperty(ThoiGianHocProperty, value); }
        }

        #endregion

        #region Factory Methods

        /// <summary>
        /// Factory method. Creates a new <see cref="DT_LienTuc_KhungLopHoc"/> object.
        /// </summary>
        /// <returns>A reference to the created <see cref="DT_LienTuc_KhungLopHoc"/> object.</returns>
        public static DT_LienTuc_KhungLopHoc NewDT_LienTuc_KhungLopHoc()
        {
            return DataPortal.Create<DT_LienTuc_KhungLopHoc>();
        }

        /// <summary>
        /// Factory method. Loads a <see cref="DT_LienTuc_KhungLopHoc"/> object, based on given parameters.
        /// </summary>
        /// <param name="id">The Id parameter of the DT_LienTuc_KhungLopHoc to fetch.</param>
        /// <returns>A reference to the fetched <see cref="DT_LienTuc_KhungLopHoc"/> object.</returns>
        public static DT_LienTuc_KhungLopHoc GetDT_LienTuc_KhungLopHoc(int id)
        {
            return DataPortal.Fetch<DT_LienTuc_KhungLopHoc>(id);
        }

        /// <summary>
        /// Factory method. Deletes a <see cref="DT_LienTuc_KhungLopHoc"/> object, based on given parameters.
        /// </summary>
        /// <param name="id">The Id of the DT_LienTuc_KhungLopHoc to delete.</param>
        public static void DeleteDT_LienTuc_KhungLopHoc(int id)
        {
            DataPortal.Delete<DT_LienTuc_KhungLopHoc>(id);
        }

        /// <summary>
        /// Factory method. Asynchronously creates a new <see cref="DT_LienTuc_KhungLopHoc"/> object.
        /// </summary>
        /// <param name="callback">The completion callback method.</param>
        public static void NewDT_LienTuc_KhungLopHoc(EventHandler<DataPortalResult<DT_LienTuc_KhungLopHoc>> callback)
        {
            DataPortal.BeginCreate<DT_LienTuc_KhungLopHoc>(callback);
        }

        /// <summary>
        /// Factory method. Asynchronously loads a <see cref="DT_LienTuc_KhungLopHoc"/> object, based on given parameters.
        /// </summary>
        /// <param name="id">The Id parameter of the DT_LienTuc_KhungLopHoc to fetch.</param>
        /// <param name="callback">The completion callback method.</param>
        public static void GetDT_LienTuc_KhungLopHoc(int id, EventHandler<DataPortalResult<DT_LienTuc_KhungLopHoc>> callback)
        {
            DataPortal.BeginFetch<DT_LienTuc_KhungLopHoc>(id, callback);
        }

        /// <summary>
        /// Factory method. Asynchronously deletes a <see cref="DT_LienTuc_KhungLopHoc"/> object, based on given parameters.
        /// </summary>
        /// <param name="id">The Id of the DT_LienTuc_KhungLopHoc to delete.</param>
        /// <param name="callback">The completion callback method.</param>
        public static void DeleteDT_LienTuc_KhungLopHoc(int id, EventHandler<DataPortalResult<DT_LienTuc_KhungLopHoc>> callback)
        {
            DataPortal.BeginDelete<DT_LienTuc_KhungLopHoc>(id, callback);
        }

        #endregion

        #region Constructor

        /// <summary>
        /// Initializes a new instance of the <see cref="DT_LienTuc_KhungLopHoc"/> class.
        /// </summary>
        /// <remarks> Do not use to create a Csla object. Use factory methods instead.</remarks>
        private DT_LienTuc_KhungLopHoc()
        {
            // Prevent direct creation
        }

        #endregion

        #region Data Access

        /// <summary>
        /// Loads default values for the <see cref="DT_LienTuc_KhungLopHoc"/> object properties.
        /// </summary>
        [Csla.RunLocal]
        protected override void DataPortal_Create()
        {
            LoadProperty(IdProperty, System.Threading.Interlocked.Decrement(ref _lastID));
            LoadProperty(TenLopProperty, null);
            LoadProperty(HocPhiProperty, null);
            LoadProperty(ChuyenKhoaProperty, null);
            LoadProperty(ThoiGianHocProperty, null);
            var args = new DataPortalHookArgs();
            OnCreate(args);
            base.DataPortal_Create();
        }

        /// <summary>
        /// Loads a <see cref="DT_LienTuc_KhungLopHoc"/> object from the database, based on given criteria.
        /// </summary>
        /// <param name="id">The id.</param>
        protected void DataPortal_Fetch(int id)
        {
            using (var ctx = ConnectionManager<SqlConnection>.GetManager("Connection"))
            {
                using (var cmd = new SqlCommand("dbo.DT_LienTuc_KhungLopHoc_get", ctx.Connection))
                {
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@id", id).DbType = DbType.Int32;
                    var args = new DataPortalHookArgs(cmd, id);
                    OnFetchPre(args);
                    Fetch(cmd);
                    OnFetchPost(args);
                }
            }
            // check all object rules and property rules
            BusinessRules.CheckRules();
        }

        private void Fetch(SqlCommand cmd)
        {
            using (var dr = new SafeDataReader(cmd.ExecuteReader()))
            {
                if (dr.Read())
                {
                    Fetch(dr);
                }
            }
        }

        /// <summary>
        /// Loads a <see cref="DT_LienTuc_KhungLopHoc"/> object from the given SafeDataReader.
        /// </summary>
        /// <param name="dr">The SafeDataReader to use.</param>
        private void Fetch(SafeDataReader dr)
        {
            // Value properties
            LoadProperty(IdProperty, dr.GetInt32("Id"));
            LoadProperty(TenLopProperty, dr.GetString("TenLop"));
            LoadProperty(IdChuyenKhoaProperty, dr.GetInt64("IdChuyenKhoa"));
            LoadProperty(HocPhiProperty, dr.GetString("HocPhi"));
            LoadProperty(ChuyenKhoaProperty, dr.GetString("ChuyenKhoa"));
            LoadProperty(ThoiGianHocProperty, dr.GetString("ThoiGianHoc"));
            var args = new DataPortalHookArgs(dr);
            OnFetchRead(args);
        }

        /// <summary>
        /// Inserts a new <see cref="DT_LienTuc_KhungLopHoc"/> object in the database.
        /// </summary>
        protected override void DataPortal_Insert()
        {
            using (var ctx = TransactionManager<SqlConnection, SqlTransaction>.GetManager("Connection"))
            {
                using (var cmd = new SqlCommand("dbo.DT_LienTuc_KhungLopHoc_add", ctx.Connection))
                {
                    cmd.Transaction = ctx.Transaction;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@id", ReadProperty(IdProperty)).Direction = ParameterDirection.Output;
                    cmd.Parameters.AddWithValue("@TenLop", ReadProperty(TenLopProperty) == null ? (object)DBNull.Value : ReadProperty(TenLopProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@idChuyenKhoa", ReadProperty(IdChuyenKhoaProperty) == null ? (object)DBNull.Value : ReadProperty(IdChuyenKhoaProperty).Value).DbType = DbType.Int64;
                    cmd.Parameters.AddWithValue("@HocPhi", ReadProperty(HocPhiProperty) == null ? (object)DBNull.Value : ReadProperty(HocPhiProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@ThoiGianHoc", ReadProperty(ThoiGianHocProperty) == null ? (object)DBNull.Value : ReadProperty(ThoiGianHocProperty)).DbType = DbType.String;
                    var args = new DataPortalHookArgs(cmd);
                    OnInsertPre(args);
                    cmd.ExecuteNonQuery();
                    OnInsertPost(args);
                    LoadProperty(IdProperty, (int) cmd.Parameters["@id"].Value);
                }
                ctx.Commit();
            }
        }

        /// <summary>
        /// Updates in the database all changes made to the <see cref="DT_LienTuc_KhungLopHoc"/> object.
        /// </summary>
        protected override void DataPortal_Update()
        {
            using (var ctx = TransactionManager<SqlConnection, SqlTransaction>.GetManager("Connection"))
            {
                using (var cmd = new SqlCommand("dbo.DT_LienTuc_KhungLopHoc_update", ctx.Connection))
                {
                    cmd.Transaction = ctx.Transaction;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@id", ReadProperty(IdProperty)).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@TenLop", ReadProperty(TenLopProperty) == null ? (object)DBNull.Value : ReadProperty(TenLopProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@idChuyenKhoa", ReadProperty(IdChuyenKhoaProperty) == null ? (object)DBNull.Value : ReadProperty(IdChuyenKhoaProperty).Value).DbType = DbType.Int64;
                    cmd.Parameters.AddWithValue("@HocPhi", ReadProperty(HocPhiProperty) == null ? (object)DBNull.Value : ReadProperty(HocPhiProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@ThoiGianHoc", ReadProperty(ThoiGianHocProperty) == null ? (object)DBNull.Value : ReadProperty(ThoiGianHocProperty)).DbType = DbType.String;
                    var args = new DataPortalHookArgs(cmd);
                    OnUpdatePre(args);
                    cmd.ExecuteNonQuery();
                    OnUpdatePost(args);
                }
                ctx.Commit();
            }
        }

        /// <summary>
        /// Self deletes the <see cref="DT_LienTuc_KhungLopHoc"/> object.
        /// </summary>
        protected override void DataPortal_DeleteSelf()
        {
            DataPortal_Delete(Id);
        }

        /// <summary>
        /// Deletes the <see cref="DT_LienTuc_KhungLopHoc"/> object from database.
        /// </summary>
        /// <param name="id">The delete criteria.</param>
        protected void DataPortal_Delete(int id)
        {
            using (var ctx = TransactionManager<SqlConnection, SqlTransaction>.GetManager("Connection"))
            {
                using (var cmd = new SqlCommand("dbo.DT_LienTuc_KhungLopHoc_delete", ctx.Connection))
                {
                    cmd.Transaction = ctx.Transaction;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@id", id).DbType = DbType.Int32;
                    var args = new DataPortalHookArgs(cmd, id);
                    OnDeletePre(args);
                    cmd.ExecuteNonQuery();
                    OnDeletePost(args);
                }
                ctx.Commit();
            }
        }

        #endregion

        #region Pseudo Events

        /// <summary>
        /// Occurs after setting all defaults for object creation.
        /// </summary>
        partial void OnCreate(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Delete, after setting query parameters and before the delete operation.
        /// </summary>
        partial void OnDeletePre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Delete, after the delete operation, before Commit().
        /// </summary>
        partial void OnDeletePost(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after setting query parameters and before the fetch operation.
        /// </summary>
        partial void OnFetchPre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after the fetch operation (object or collection is fully loaded and set up).
        /// </summary>
        partial void OnFetchPost(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after the low level fetch operation, before the data reader is destroyed.
        /// </summary>
        partial void OnFetchRead(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after setting query parameters and before the update operation.
        /// </summary>
        partial void OnUpdatePre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Insert, after the update operation, before setting back row identifiers (RowVersion) and Commit().
        /// </summary>
        partial void OnUpdatePost(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Insert, after setting query parameters and before the insert operation.
        /// </summary>
        partial void OnInsertPre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Insert, after the insert operation, before setting back row identifiers (ID and RowVersion) and Commit().
        /// </summary>
        partial void OnInsertPost(DataPortalHookArgs args);

        #endregion

    }
}
