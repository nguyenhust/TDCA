//  This file was generated by CSLA Object Generator - CslaGenFork v4.3.0
//
// Filename:    DT_ChinhQuy_TamTru_Info
// ObjectType:  DT_ChinhQuy_TamTru_Info
// CSLAType:    EditableChild

using System;
using System.Data;
using System.Data.SqlClient;
using Csla;
using Csla.Data;
using NETLINK.LIB;

namespace ModuleDaoTao.LIB
{

    /// <summary>
    /// DT_ChinhQuy_TamTru_Info (editable child object).<br/>
    /// This is a generated base class of <see cref="DT_ChinhQuy_TamTru_Info"/> business object.
    /// </summary>
    /// <remarks>
    /// This class is an item of <see cref="DT_ChinhQuy_TamTru_Coll"/> collection.
    /// </remarks>
    [Serializable]
    public partial class DT_ChinhQuy_TamTru_Info : BusinessBase<DT_ChinhQuy_TamTru_Info>
    {

        #region Static Fields

        private static int _lastID;

        #endregion

        #region Business Properties

        /// <summary>
        /// Maintains metadata about <see cref="idHocVien"/> property.
        /// </summary>
        public static readonly PropertyInfo<int> IdHocVienProperty = RegisterProperty<int>(p => p.IdHocVien, "id Hoc Vien");
        /// <summary>
        /// Gets or sets the id Hoc Vien.
        /// </summary>
        /// <value>The id Hoc Vien.</value>
        public int IdHocVien
        {
            get { return GetProperty(IdHocVienProperty); }
            set { SetProperty(IdHocVienProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="NgayDangKi"/> property.
        /// </summary>
        public static readonly PropertyInfo<SmartDate> NgayDangKiProperty = RegisterProperty<SmartDate>(p => p.NgayDangKi, "Ngay Dang Ki");
        /// <summary>
        /// Gets or sets the Ngay Dang Ki.
        /// </summary>
        /// <value>The Ngay Dang Ki.</value>
        public string NgayDangKi
        {
            get { return GetPropertyConvert<SmartDate, String>(NgayDangKiProperty); }
            set { SetPropertyConvert<SmartDate, String>(NgayDangKiProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="TenChuNhaTro"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> TenChuNhaTroProperty = RegisterProperty<string>(p => p.TenChuNhaTro, "Ten Chu Nha Tro");
        /// <summary>
        /// Gets or sets the Ten Chu Nha Tro.
        /// </summary>
        /// <value>The Ten Chu Nha Tro.</value>
        public string TenChuNhaTro
        {
            get { return GetProperty(TenChuNhaTroProperty); }
            set { SetProperty(TenChuNhaTroProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="DiaChi"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> DiaChiProperty = RegisterProperty<string>(p => p.DiaChi, "Dia Chi");
        /// <summary>
        /// Gets or sets the Dia Chi.
        /// </summary>
        /// <value>The Dia Chi.</value>
        public string DiaChi
        {
            get { return GetProperty(DiaChiProperty); }
            set { SetProperty(DiaChiProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="DienThoai"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> DienThoaiProperty = RegisterProperty<string>(p => p.DienThoai, "Dien Thoai");
        /// <summary>
        /// Gets or sets the Dien Thoai.
        /// </summary>
        /// <value>The Dien Thoai.</value>
        public string DienThoai
        {
            get { return GetProperty(DienThoaiProperty); }
            set { SetProperty(DienThoaiProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="ID"/> property.
        /// </summary>
        public static readonly PropertyInfo<int> IDProperty = RegisterProperty<int>(p => p.ID, "ID");
        /// <summary>
        /// Gets the ID.
        /// </summary>
        /// <value>The ID.</value>
        public int ID
        {
            get { return GetProperty(IDProperty); }
        }

        #endregion

        #region Factory Methods

        /// <summary>
        /// Factory method. Creates a new <see cref="DT_ChinhQuy_TamTru_Info"/> object.
        /// </summary>
        /// <returns>A reference to the created <see cref="DT_ChinhQuy_TamTru_Info"/> object.</returns>
        internal static DT_ChinhQuy_TamTru_Info NewDT_ChinhQuy_TamTru_Info()
        {
            return DataPortal.CreateChild<DT_ChinhQuy_TamTru_Info>();
        }

        /// <summary>
        /// Factory method. Asynchronously creates a new <see cref="DT_ChinhQuy_TamTru_Info"/> object.
        /// </summary>
        /// <param name="callback">The completion callback method.</param>
        internal static void NewDT_ChinhQuy_TamTru_Info(EventHandler<DataPortalResult<DT_ChinhQuy_TamTru_Info>> callback)
        {
            DataPortal.BeginCreate<DT_ChinhQuy_TamTru_Info>(callback);
        }

        /// <summary>
        /// Factory method. Loads a <see cref="DT_ChinhQuy_TamTru_Info"/> object from the given SafeDataReader.
        /// </summary>
        /// <param name="dr">The SafeDataReader to use.</param>
        /// <returns>A reference to the fetched <see cref="DT_ChinhQuy_TamTru_Info"/> object.</returns>
        internal static DT_ChinhQuy_TamTru_Info GetDT_ChinhQuy_TamTru_Info(SafeDataReader dr)
        {
            DT_ChinhQuy_TamTru_Info obj = new DT_ChinhQuy_TamTru_Info();
            // show the framework that this is a child object
            obj.MarkAsChild();
            obj.Fetch(dr);
            obj.MarkOld();
            // check all object rules and property rules
            obj.BusinessRules.CheckRules();
            return obj;
        }

        #endregion

        #region Constructor

        /// <summary>
        /// Initializes a new instance of the <see cref="DT_ChinhQuy_TamTru_Info"/> class.
        /// </summary>
        /// <remarks> Do not use to create a Csla object. Use factory methods instead.</remarks>
        private DT_ChinhQuy_TamTru_Info()
        {
            // Prevent direct creation

            // show the framework that this is a child object
            MarkAsChild();
        }

        #endregion

        #region Data Access

        /// <summary>
        /// Loads default values for the <see cref="DT_ChinhQuy_TamTru_Info"/> object properties.
        /// </summary>
        [Csla.RunLocal]
        protected override void Child_Create()
        {
            LoadProperty(NgayDangKiProperty, null);
            LoadProperty(TenChuNhaTroProperty, null);
            LoadProperty(DiaChiProperty, null);
            LoadProperty(DienThoaiProperty, null);
            LoadProperty(IDProperty, System.Threading.Interlocked.Decrement(ref _lastID));
            var args = new DataPortalHookArgs();
            OnCreate(args);
            base.Child_Create();
        }

        /// <summary>
        /// Loads a <see cref="DT_ChinhQuy_TamTru_Info"/> object from the given SafeDataReader.
        /// </summary>
        /// <param name="dr">The SafeDataReader to use.</param>
        private void Fetch(SafeDataReader dr)
        {
            // Value properties
            LoadProperty(IdHocVienProperty, dr.GetInt32("IdHocVien"));
            LoadProperty(NgayDangKiProperty, dr.GetSmartDate("NgayDangKi"));
            LoadProperty(TenChuNhaTroProperty, dr.GetString("TenChuNhaTro"));
            LoadProperty(DiaChiProperty, dr.GetString("DiaChi"));
            LoadProperty(DienThoaiProperty, dr.GetString("DienThoai"));
            LoadProperty(IDProperty, dr.GetInt32("ID"));
            var args = new DataPortalHookArgs(dr);
            OnFetchRead(args);
        }

        /// <summary>
        /// Inserts a new <see cref="DT_ChinhQuy_TamTru_Info"/> object in the database.
        /// </summary>
        private void Child_Insert()
        {
            using (var ctx = TransactionManager<SqlConnection, SqlTransaction>.GetManager("Connection"))
            {
                using (var cmd = new SqlCommand("dbo.DT_ChinhQuy_TamTru_Info_add", ctx.Connection))
                {
                    cmd.Transaction = ctx.Transaction;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@idHocVien", ReadProperty(IdHocVienProperty)).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@NgayDangKi", ReadProperty(NgayDangKiProperty).DBValue).DbType = DbType.DateTime;
                    cmd.Parameters.AddWithValue("@TenChuNhaTro", ReadProperty(TenChuNhaTroProperty) == null ? (object)DBNull.Value : ReadProperty(TenChuNhaTroProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@DiaChi", ReadProperty(DiaChiProperty) == null ? (object)DBNull.Value : ReadProperty(DiaChiProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@DienThoai", ReadProperty(DienThoaiProperty) == null ? (object)DBNull.Value : ReadProperty(DienThoaiProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@ID", ReadProperty(IDProperty)).Direction = ParameterDirection.Output;
                    var args = new DataPortalHookArgs(cmd);
                    OnInsertPre(args);
                    cmd.ExecuteNonQuery();
                    OnInsertPost(args);
                    LoadProperty(IDProperty, (int) cmd.Parameters["@ID"].Value);
                }
            }
        }

        /// <summary>
        /// Updates in the database all changes made to the <see cref="DT_ChinhQuy_TamTru_Info"/> object.
        /// </summary>
        private void Child_Update()
        {
            if (!IsDirty)
                return;

            using (var ctx = TransactionManager<SqlConnection, SqlTransaction>.GetManager("Connection"))
            {
                using (var cmd = new SqlCommand("dbo.DT_ChinhQuy_TamTru_Info_update", ctx.Connection))
                {
                    cmd.Transaction = ctx.Transaction;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@idHocVien", ReadProperty(IdHocVienProperty)).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@NgayDangKi", ReadProperty(NgayDangKiProperty).DBValue).DbType = DbType.DateTime;
                    cmd.Parameters.AddWithValue("@TenChuNhaTro", ReadProperty(TenChuNhaTroProperty) == null ? (object)DBNull.Value : ReadProperty(TenChuNhaTroProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@DiaChi", ReadProperty(DiaChiProperty) == null ? (object)DBNull.Value : ReadProperty(DiaChiProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@DienThoai", ReadProperty(DienThoaiProperty) == null ? (object)DBNull.Value : ReadProperty(DienThoaiProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@ID", ReadProperty(IDProperty)).DbType = DbType.Int32;
                    var args = new DataPortalHookArgs(cmd);
                    OnUpdatePre(args);
                    cmd.ExecuteNonQuery();
                    OnUpdatePost(args);
                }
            }
        }

        /// <summary>
        /// Self deletes the <see cref="DT_ChinhQuy_TamTru_Info"/> object from database.
        /// </summary>
        private void Child_DeleteSelf()
        {
            using (var ctx = TransactionManager<SqlConnection, SqlTransaction>.GetManager("Connection"))
            {
                using (var cmd = new SqlCommand("dbo.DT_ChinhQuy_TamTru_Info_delete", ctx.Connection))
                {
                    cmd.Transaction = ctx.Transaction;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@ID", ReadProperty(IDProperty)).DbType = DbType.Int32;
                    var args = new DataPortalHookArgs(cmd);
                    OnDeletePre(args);
                    cmd.ExecuteNonQuery();
                    OnDeletePost(args);
                }
            }
        }

        #endregion

        #region Pseudo Events

        /// <summary>
        /// Occurs after setting all defaults for object creation.
        /// </summary>
        partial void OnCreate(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Delete, after setting query parameters and before the delete operation.
        /// </summary>
        partial void OnDeletePre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Delete, after the delete operation, before Commit().
        /// </summary>
        partial void OnDeletePost(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after setting query parameters and before the fetch operation.
        /// </summary>
        partial void OnFetchPre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after the fetch operation (object or collection is fully loaded and set up).
        /// </summary>
        partial void OnFetchPost(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after the low level fetch operation, before the data reader is destroyed.
        /// </summary>
        partial void OnFetchRead(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after setting query parameters and before the update operation.
        /// </summary>
        partial void OnUpdatePre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Insert, after the update operation, before setting back row identifiers (RowVersion) and Commit().
        /// </summary>
        partial void OnUpdatePost(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Insert, after setting query parameters and before the insert operation.
        /// </summary>
        partial void OnInsertPre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Insert, after the insert operation, before setting back row identifiers (ID and RowVersion) and Commit().
        /// </summary>
        partial void OnInsertPost(DataPortalHookArgs args);

        #endregion

    }
}
