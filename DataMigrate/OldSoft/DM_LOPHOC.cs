//  This file was generated by CSLA Object Generator - CslaGenFork v4.3.0
//
// Filename:    DM_LOPHOC
// ObjectType:  DM_LOPHOC
// CSLAType:    EditableRoot

using System;
using System.Data;
using System.Data.SqlClient;
using Csla;
using Csla.Data;

using NETLINK.LIB;
namespace oldSoft
{

    /// <summary>
    /// DM_LOPHOC (editable root object).<br/>
    /// This is a generated base class of <see cref="DM_LOPHOC"/> business object.
    /// </summary>
    [Serializable]
    public partial class DM_LOPHOC : BusinessBase<DM_LOPHOC>
    {

        #region Business Properties

        /// <summary>
        /// Maintains metadata about <see cref="DM_LOPHOC_ID"/> property.
        /// </summary>
        public static readonly PropertyInfo<int> DM_LOPHOC_IDProperty = RegisterProperty<int>(p => p.DM_LOPHOC_ID, "DM LOPHOC ID");
        /// <summary>
        /// CDT.DM_LOPHOC.DM_LOPHOC_ID
        /// </summary>
        /// <value>The DM LOPHOC ID.</value>
        public int DM_LOPHOC_ID
        {
            get { return GetProperty(DM_LOPHOC_IDProperty); }
            set { SetProperty(DM_LOPHOC_IDProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="TEN_LH"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> TEN_LHProperty = RegisterProperty<string>(p => p.TEN_LH, "TEN LH");
        /// <summary>
        /// CDT.DM_LOPHOC.TEN_LH
        /// </summary>
        /// <value>The TEN LH.</value>
        public string TEN_LH
        {
            get { return GetProperty(TEN_LHProperty); }
            set { SetProperty(TEN_LHProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="NOI_DUNG"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> NOI_DUNGProperty = RegisterProperty<string>(p => p.NOI_DUNG, "NOI DUNG");
        /// <summary>
        /// CDT.DM_LOPHOC.NOI_DUNG
        /// </summary>
        /// <value>The NOI DUNG.</value>
        public string NOI_DUNG
        {
            get { return GetProperty(NOI_DUNGProperty); }
            set { SetProperty(NOI_DUNGProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="TAI_LIEU"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> TAI_LIEUProperty = RegisterProperty<string>(p => p.TAI_LIEU, "TAI LIEU");
        /// <summary>
        /// CDT.DM_LOPHOC.TAI_LIEU
        /// </summary>
        /// <value>The TAI LIEU.</value>
        public string TAI_LIEU
        {
            get { return GetProperty(TAI_LIEUProperty); }
            set { SetProperty(TAI_LIEUProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="THOI_GIAN"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> THOI_GIANProperty = RegisterProperty<string>(p => p.THOI_GIAN, "THOI GIAN");
        /// <summary>
        /// CDT.DM_LOPHOC.THOI_GIAN
        /// </summary>
        /// <value>The THOI GIAN.</value>
        public string THOI_GIAN
        {
            get { return GetProperty(THOI_GIANProperty); }
            set { SetProperty(THOI_GIANProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="MA_CHUYENNGANH_ID"/> property.
        /// </summary>
        public static readonly PropertyInfo<int?> MA_CHUYENNGANH_IDProperty = RegisterProperty<int?>(p => p.MA_CHUYENNGANH_ID, "MA CHUYENNGANH ID");
        /// <summary>
        /// CDT.DM_LOPHOC.MA_CHUYENNGANH_ID
        /// </summary>
        /// <value>The MA CHUYENNGANH ID.</value>
        public int? MA_CHUYENNGANH_ID
        {
            get { return GetProperty(MA_CHUYENNGANH_IDProperty); }
            set { SetProperty(MA_CHUYENNGANH_IDProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="TEN_CN"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> TEN_CNProperty = RegisterProperty<string>(p => p.TEN_CN, "TEN CN");
        /// <summary>
        /// CDT.DM_LOPHOC.TEN_CN
        /// </summary>
        /// <value>The TEN CN.</value>
        public string TEN_CN
        {
            get { return GetProperty(TEN_CNProperty); }
            set { SetProperty(TEN_CNProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="DIA_DIEM"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> DIA_DIEMProperty = RegisterProperty<string>(p => p.DIA_DIEM, "DIA DIEM");
        /// <summary>
        /// CDT.DM_LOPHOC.DIA_DIEM
        /// </summary>
        /// <value>The DIA DIEM.</value>
        public string DIA_DIEM
        {
            get { return GetProperty(DIA_DIEMProperty); }
            set { SetProperty(DIA_DIEMProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="DOI_TUONG"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> DOI_TUONGProperty = RegisterProperty<string>(p => p.DOI_TUONG, "DOI TUONG");
        /// <summary>
        /// CDT.DM_LOPHOC.DOI_TUONG
        /// </summary>
        /// <value>The DOI TUONG.</value>
        public string DOI_TUONG
        {
            get { return GetProperty(DOI_TUONGProperty); }
            set { SetProperty(DOI_TUONGProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="TMP"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> TMPProperty = RegisterProperty<string>(p => p.TMP, "TMP");
        /// <summary>
        /// CDT.DM_LOPHOC.TMP
        /// </summary>
        /// <value>The TMP.</value>
        public string TMP
        {
            get { return GetProperty(TMPProperty); }
            set { SetProperty(TMPProperty, value); }
        }

        #endregion

        #region Factory Methods

        /// <summary>
        /// Factory method. Creates a new <see cref="DM_LOPHOC"/> object.
        /// </summary>
        /// <returns>A reference to the created <see cref="DM_LOPHOC"/> object.</returns>
        public static DM_LOPHOC NewDM_LOPHOC()
        {
            return DataPortal.Create<DM_LOPHOC>();
        }

        /// <summary>
        /// Factory method. Loads a <see cref="DM_LOPHOC"/> object, based on given parameters.
        /// </summary>
        /// <param name="dM_LOPHOC_ID">The DM_LOPHOC_ID parameter of the DM_LOPHOC to fetch.</param>
        /// <returns>A reference to the fetched <see cref="DM_LOPHOC"/> object.</returns>
        public static DM_LOPHOC GetDM_LOPHOC(int dM_LOPHOC_ID)
        {
            return DataPortal.Fetch<DM_LOPHOC>(dM_LOPHOC_ID);
        }

        /// <summary>
        /// Factory method. Deletes a <see cref="DM_LOPHOC"/> object, based on given parameters.
        /// </summary>
        /// <param name="dM_LOPHOC_ID">The DM_LOPHOC_ID of the DM_LOPHOC to delete.</param>
        public static void DeleteDM_LOPHOC(int dM_LOPHOC_ID)
        {
            DataPortal.Delete<DM_LOPHOC>(dM_LOPHOC_ID);
        }

        /// <summary>
        /// Factory method. Asynchronously creates a new <see cref="DM_LOPHOC"/> object.
        /// </summary>
        /// <param name="callback">The completion callback method.</param>
        public static void NewDM_LOPHOC(EventHandler<DataPortalResult<DM_LOPHOC>> callback)
        {
            DataPortal.BeginCreate<DM_LOPHOC>(callback);
        }

        /// <summary>
        /// Factory method. Asynchronously loads a <see cref="DM_LOPHOC"/> object, based on given parameters.
        /// </summary>
        /// <param name="dM_LOPHOC_ID">The DM_LOPHOC_ID parameter of the DM_LOPHOC to fetch.</param>
        /// <param name="callback">The completion callback method.</param>
        public static void GetDM_LOPHOC(int dM_LOPHOC_ID, EventHandler<DataPortalResult<DM_LOPHOC>> callback)
        {
            DataPortal.BeginFetch<DM_LOPHOC>(dM_LOPHOC_ID, callback);
        }

        /// <summary>
        /// Factory method. Asynchronously deletes a <see cref="DM_LOPHOC"/> object, based on given parameters.
        /// </summary>
        /// <param name="dM_LOPHOC_ID">The DM_LOPHOC_ID of the DM_LOPHOC to delete.</param>
        /// <param name="callback">The completion callback method.</param>
        public static void DeleteDM_LOPHOC(int dM_LOPHOC_ID, EventHandler<DataPortalResult<DM_LOPHOC>> callback)
        {
            DataPortal.BeginDelete<DM_LOPHOC>(dM_LOPHOC_ID, callback);
        }

        #endregion

        #region Constructor

        /// <summary>
        /// Initializes a new instance of the <see cref="DM_LOPHOC"/> class.
        /// </summary>
        /// <remarks> Do not use to create a Csla object. Use factory methods instead.</remarks>
        private DM_LOPHOC()
        {
            // Prevent direct creation
        }

        #endregion

        #region Data Access

        /// <summary>
        /// Loads default values for the <see cref="DM_LOPHOC"/> object properties.
        /// </summary>
        [Csla.RunLocal]
        protected override void DataPortal_Create()
        {
            LoadProperty(TEN_LHProperty, null);
            LoadProperty(NOI_DUNGProperty, null);
            LoadProperty(TAI_LIEUProperty, null);
            LoadProperty(THOI_GIANProperty, null);
            LoadProperty(TEN_CNProperty, null);
            LoadProperty(DIA_DIEMProperty, null);
            LoadProperty(DOI_TUONGProperty, null);
            LoadProperty(TMPProperty, null);
            var args = new DataPortalHookArgs();
            OnCreate(args);
            base.DataPortal_Create();
        }

        /// <summary>
        /// Loads a <see cref="DM_LOPHOC"/> object from the database, based on given criteria.
        /// </summary>
        /// <param name="dM_LOPHOC_ID">The DM LOPHOC ID.</param>
        protected void DataPortal_Fetch(int dM_LOPHOC_ID)
        {
            using (var ctx = ConnectionManager<SqlConnection>.GetManager("Connection2"))
            {
                using (var cmd = new SqlCommand("dbo.DM_LOPHOC_get", ctx.Connection))
                {
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@DM_LOPHOC_ID", dM_LOPHOC_ID).DbType = DbType.Int32;
                    var args = new DataPortalHookArgs(cmd, dM_LOPHOC_ID);
                    OnFetchPre(args);
                    Fetch(cmd);
                    OnFetchPost(args);
                }
            }
            // check all object rules and property rules
            BusinessRules.CheckRules();
        }

        private void Fetch(SqlCommand cmd)
        {
            using (var dr = new SafeDataReader(cmd.ExecuteReader()))
            {
                if (dr.Read())
                {
                    Fetch(dr);
                }
            }
        }

        /// <summary>
        /// Loads a <see cref="DM_LOPHOC"/> object from the given SafeDataReader.
        /// </summary>
        /// <param name="dr">The SafeDataReader to use.</param>
        private void Fetch(SafeDataReader dr)
        {
            // Value properties
            LoadProperty(DM_LOPHOC_IDProperty, dr.GetInt32("DM_LOPHOC_ID"));
            LoadProperty(TEN_LHProperty, dr.GetString("TEN_LH"));
            LoadProperty(NOI_DUNGProperty, dr.GetString("NOI_DUNG"));
            LoadProperty(TAI_LIEUProperty, dr.GetString("TAI_LIEU"));
            LoadProperty(THOI_GIANProperty, dr.GetString("THOI_GIAN"));
            LoadProperty(MA_CHUYENNGANH_IDProperty, dr.GetInt32("MA_CHUYENNGANH_ID"));
            LoadProperty(TEN_CNProperty, dr.GetString("TEN_CN"));
            LoadProperty(DIA_DIEMProperty, dr.GetString("DIA_DIEM"));
            LoadProperty(DOI_TUONGProperty, dr.GetString("DOI_TUONG"));
            LoadProperty(TMPProperty, dr.GetString("TMP"));
            var args = new DataPortalHookArgs(dr);
            OnFetchRead(args);
        }

        /// <summary>
        /// Inserts a new <see cref="DM_LOPHOC"/> object in the database.
        /// </summary>
        protected override void DataPortal_Insert()
        {
            using (var ctx = TransactionManager<SqlConnection, SqlTransaction>.GetManager("Connection2"))
            {
                using (var cmd = new SqlCommand("dbo.DM_LOPHOC_add", ctx.Connection))
                {
                    cmd.Transaction = ctx.Transaction;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@DM_LOPHOC_ID", ReadProperty(DM_LOPHOC_IDProperty)).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@TEN_LH", ReadProperty(TEN_LHProperty) == null ? (object)DBNull.Value : ReadProperty(TEN_LHProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@NOI_DUNG", ReadProperty(NOI_DUNGProperty) == null ? (object)DBNull.Value : ReadProperty(NOI_DUNGProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@TAI_LIEU", ReadProperty(TAI_LIEUProperty) == null ? (object)DBNull.Value : ReadProperty(TAI_LIEUProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@THOI_GIAN", ReadProperty(THOI_GIANProperty) == null ? (object)DBNull.Value : ReadProperty(THOI_GIANProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@MA_CHUYENNGANH_ID", ReadProperty(MA_CHUYENNGANH_IDProperty) == null ? (object)DBNull.Value : ReadProperty(MA_CHUYENNGANH_IDProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@TEN_CN", ReadProperty(TEN_CNProperty) == null ? (object)DBNull.Value : ReadProperty(TEN_CNProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@DIA_DIEM", ReadProperty(DIA_DIEMProperty) == null ? (object)DBNull.Value : ReadProperty(DIA_DIEMProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@DOI_TUONG", ReadProperty(DOI_TUONGProperty) == null ? (object)DBNull.Value : ReadProperty(DOI_TUONGProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@TMP", ReadProperty(TMPProperty) == null ? (object)DBNull.Value : ReadProperty(TMPProperty)).DbType = DbType.String;
                    var args = new DataPortalHookArgs(cmd);
                    OnInsertPre(args);
                    cmd.ExecuteNonQuery();
                    OnInsertPost(args);
                }
                ctx.Commit();
            }
        }

        /// <summary>
        /// Updates in the database all changes made to the <see cref="DM_LOPHOC"/> object.
        /// </summary>
        protected override void DataPortal_Update()
        {
            using (var ctx = TransactionManager<SqlConnection, SqlTransaction>.GetManager("Connection2"))
            {
                using (var cmd = new SqlCommand("dbo.DM_LOPHOC_update", ctx.Connection))
                {
                    cmd.Transaction = ctx.Transaction;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@DM_LOPHOC_ID", ReadProperty(DM_LOPHOC_IDProperty)).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@TEN_LH", ReadProperty(TEN_LHProperty) == null ? (object)DBNull.Value : ReadProperty(TEN_LHProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@NOI_DUNG", ReadProperty(NOI_DUNGProperty) == null ? (object)DBNull.Value : ReadProperty(NOI_DUNGProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@TAI_LIEU", ReadProperty(TAI_LIEUProperty) == null ? (object)DBNull.Value : ReadProperty(TAI_LIEUProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@THOI_GIAN", ReadProperty(THOI_GIANProperty) == null ? (object)DBNull.Value : ReadProperty(THOI_GIANProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@MA_CHUYENNGANH_ID", ReadProperty(MA_CHUYENNGANH_IDProperty) == null ? (object)DBNull.Value : ReadProperty(MA_CHUYENNGANH_IDProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@TEN_CN", ReadProperty(TEN_CNProperty) == null ? (object)DBNull.Value : ReadProperty(TEN_CNProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@DIA_DIEM", ReadProperty(DIA_DIEMProperty) == null ? (object)DBNull.Value : ReadProperty(DIA_DIEMProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@DOI_TUONG", ReadProperty(DOI_TUONGProperty) == null ? (object)DBNull.Value : ReadProperty(DOI_TUONGProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@TMP", ReadProperty(TMPProperty) == null ? (object)DBNull.Value : ReadProperty(TMPProperty)).DbType = DbType.String;
                    var args = new DataPortalHookArgs(cmd);
                    OnUpdatePre(args);
                    cmd.ExecuteNonQuery();
                    OnUpdatePost(args);
                }
                ctx.Commit();
            }
        }

        /// <summary>
        /// Self deletes the <see cref="DM_LOPHOC"/> object.
        /// </summary>
        protected override void DataPortal_DeleteSelf()
        {
            DataPortal_Delete(DM_LOPHOC_ID);
        }

        /// <summary>
        /// Deletes the <see cref="DM_LOPHOC"/> object from database.
        /// </summary>
        /// <param name="dM_LOPHOC_ID">The delete criteria.</param>
        protected void DataPortal_Delete(int dM_LOPHOC_ID)
        {
            using (var ctx = TransactionManager<SqlConnection, SqlTransaction>.GetManager("Connection2"))
            {
                using (var cmd = new SqlCommand("dbo.DM_LOPHOC_delete", ctx.Connection))
                {
                    cmd.Transaction = ctx.Transaction;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@DM_LOPHOC_ID", dM_LOPHOC_ID).DbType = DbType.Int32;
                    var args = new DataPortalHookArgs(cmd, dM_LOPHOC_ID);
                    OnDeletePre(args);
                    cmd.ExecuteNonQuery();
                    OnDeletePost(args);
                }
                ctx.Commit();
            }
        }

        #endregion

        #region Pseudo Events

        /// <summary>
        /// Occurs after setting all defaults for object creation.
        /// </summary>
        partial void OnCreate(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Delete, after setting query parameters and before the delete operation.
        /// </summary>
        partial void OnDeletePre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Delete, after the delete operation, before Commit().
        /// </summary>
        partial void OnDeletePost(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after setting query parameters and before the fetch operation.
        /// </summary>
        partial void OnFetchPre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after the fetch operation (object or collection is fully loaded and set up).
        /// </summary>
        partial void OnFetchPost(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after the low level fetch operation, before the data reader is destroyed.
        /// </summary>
        partial void OnFetchRead(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after setting query parameters and before the update operation.
        /// </summary>
        partial void OnUpdatePre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Insert, after the update operation, before setting back row identifiers (RowVersion) and Commit().
        /// </summary>
        partial void OnUpdatePost(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Insert, after setting query parameters and before the insert operation.
        /// </summary>
        partial void OnInsertPre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Insert, after the insert operation, before setting back row identifiers (ID and RowVersion) and Commit().
        /// </summary>
        partial void OnInsertPost(DataPortalHookArgs args);

        #endregion

    }
}
