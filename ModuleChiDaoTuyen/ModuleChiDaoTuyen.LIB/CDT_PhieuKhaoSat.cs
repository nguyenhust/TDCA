//  This file was generated by CSLA Object Generator - CslaGenFork v4.3.0
//
// Filename:    CDT_PhieuKhaoSat
// ObjectType:  CDT_PhieuKhaoSat
// CSLAType:    EditableRoot

using System;
using System.Data;
using System.Data.SqlClient;
using Csla;
using Csla.Data;
using NETLINK.LIB;

namespace ModuleChiDaoTuyen.LIB
{

    /// <summary>
    /// CDT_PhieuKhaoSat (editable root object).<br/>
    /// This is a generated base class of <see cref="CDT_PhieuKhaoSat"/> business object.
    /// </summary>
    [Serializable]
    public partial class CDT_PhieuKhaoSat : BusinessBase<CDT_PhieuKhaoSat>
    {

        #region Static Fields

        private static int _lastID;

        #endregion

        #region Business Properties

        /// <summary>
        /// Maintains metadata about <see cref="ID"/> property.
        /// </summary>
        public static readonly PropertyInfo<int> IDProperty = RegisterProperty<int>(p => p.ID, "ID");
        /// <summary>
        /// Gets the ID.
        /// </summary>
        /// <value>The ID.</value>
        public int ID
        {
            get { return GetProperty(IDProperty); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="CongVan"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> CongVanProperty = RegisterProperty<string>(p => p.CongVan, "Cong Van");
        /// <summary>
        /// Gets or sets the Cong Van.
        /// </summary>
        /// <value>The Cong Van.</value>
        public string CongVan
        {
            get { return GetProperty(CongVanProperty); }
            set { SetProperty(CongVanProperty, value); }
        }

        public static readonly PropertyInfo<string> TenBenhVienProperty = RegisterProperty<string>(p => p.TenBenhVien, "Ten Benh Vien");
        /// <summary>
        /// Gets or sets the Cong Van.
        /// </summary>
        /// <value>The Cong Van.</value>
        public string TenBenhVien
        {
            get { return GetProperty(TenBenhVienProperty); }
            set { SetProperty(TenBenhVienProperty, value); }
        }

        public static readonly PropertyInfo<string> TenChuyenKhoaProperty = RegisterProperty<string>(p => p.TenChuyenKhoa, "Ten Chuyen Khoa");
        /// <summary>
        /// Gets or sets the Cong Van.
        /// </summary>
        /// <value>The Cong Van.</value>
        public string TenChuyenKhoa
        {
            get { return GetProperty(TenChuyenKhoaProperty); }
            set { SetProperty(TenChuyenKhoaProperty, value); }
        }

        /// <summary>
        /// Sử dụng khi user muốn nhóm cả bệnh viện và chuyên khoa thành 1 trường duy nhất
        /// </summary>
        public string TenbenhvienHoacchuyenkhoa
        {
            get 
            {
                if (string.IsNullOrEmpty(TenBenhVien) || TenBenhVien == "" || IsBachMai == true)
                {
                    return TenChuyenKhoa;
                }
                else
                {
                    return TenBenhVien;
                }
            }
           
        }

        /// <summary>
        /// Maintains metadata about <see cref="isBachMai"/> property.
        /// </summary>
        public static readonly PropertyInfo<bool?> IsBachMaiProperty = RegisterProperty<bool?>(p => p.IsBachMai, "is Bach Mai");
        /// <summary>
        /// Gets or sets the is Bach Mai.
        /// </summary>
        /// <value><c>true</c> if is Bach Mai; <c>false</c> if not is Bach Mai; otherwise, <c>null</c>.</value>
        public bool? IsBachMai
        {
            get { return GetProperty(IsBachMaiProperty); }
            set { SetProperty(IsBachMaiProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="idBenhVien"/> property.
        /// </summary>
        public static readonly PropertyInfo<Int64?> IdBenhVienProperty = RegisterProperty<Int64?>(p => p.IdBenhVien, "id Benh Vien");
        /// <summary>
        /// Gets or sets the id Benh Vien.
        /// </summary>
        /// <value>The id Benh Vien.</value>
        public Int64? IdBenhVien
        {
            get { return GetProperty(IdBenhVienProperty); }
            set { SetProperty(IdBenhVienProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="idVienKhoaPhong"/> property.
        /// </summary>
        public static readonly PropertyInfo<Int64?> IdVienKhoaPhongProperty = RegisterProperty<Int64?>(p => p.IdVienKhoaPhong, "id Vien Khoa Phong");
        /// <summary>
        /// Gets or sets the id Vien Khoa Phong.
        /// </summary>
        /// <value>The id Vien Khoa Phong.</value>
        public Int64? IdVienKhoaPhong
        {
            get { return GetProperty(IdVienKhoaPhongProperty); }
            set { SetProperty(IdVienKhoaPhongProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="HoTenCanBoPhuTrachCDT"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> HoTenCanBoPhuTrachCDTProperty = RegisterProperty<string>(p => p.HoTenCanBoPhuTrachCDT, "Ho Ten Can Bo Phu Trach CDT");
        /// <summary>
        /// Gets or sets the Ho Ten Can Bo Phu Trach CDT.
        /// </summary>
        /// <value>The Ho Ten Can Bo Phu Trach CDT.</value>
        public string HoTenCanBoPhuTrachCDT
        {
            get { return GetProperty(HoTenCanBoPhuTrachCDTProperty); }
            set { SetProperty(HoTenCanBoPhuTrachCDTProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="PhoneCBPT_CDT"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> PhoneCBPT_CDTProperty = RegisterProperty<string>(p => p.PhoneCBPT_CDT, "Phone CBPT CDT");
        /// <summary>
        /// Gets or sets the Phone CBPT CDT.
        /// </summary>
        /// <value>The Phone CBPT CDT.</value>
        public string PhoneCBPT_CDT
        {
            get { return GetProperty(PhoneCBPT_CDTProperty); }
            set { SetProperty(PhoneCBPT_CDTProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="EmailCBPT_CDT"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> EmailCBPT_CDTProperty = RegisterProperty<string>(p => p.EmailCBPT_CDT, "Email CBPT CDT");
        /// <summary>
        /// Gets or sets the Email CBPT CDT.
        /// </summary>
        /// <value>The Email CBPT CDT.</value>
        public string EmailCBPT_CDT
        {
            get { return GetProperty(EmailCBPT_CDTProperty); }
            set { SetProperty(EmailCBPT_CDTProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="HoTenCanBoPhuTrachTT"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> HoTenCanBoPhuTrachTTProperty = RegisterProperty<string>(p => p.HoTenCanBoPhuTrachTT, "Ho Ten Can Bo Phu Trach TT");
        /// <summary>
        /// Gets or sets the Ho Ten Can Bo Phu Trach TT.
        /// </summary>
        /// <value>The Ho Ten Can Bo Phu Trach TT.</value>
        public string HoTenCanBoPhuTrachTT
        {
            get { return GetProperty(HoTenCanBoPhuTrachTTProperty); }
            set { SetProperty(HoTenCanBoPhuTrachTTProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="PhoneCBPT_TT"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> PhoneCBPT_TTProperty = RegisterProperty<string>(p => p.PhoneCBPT_TT, "Phone CBPT TT");
        /// <summary>
        /// Gets or sets the Phone CBPT TT.
        /// </summary>
        /// <value>The Phone CBPT TT.</value>
        public string PhoneCBPT_TT
        {
            get { return GetProperty(PhoneCBPT_TTProperty); }
            set { SetProperty(PhoneCBPT_TTProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="EmailCBPT_TT"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> EmailCBPT_TTProperty = RegisterProperty<string>(p => p.EmailCBPT_TT, "Email CBPT TT");
        /// <summary>
        /// Gets or sets the Email CBPT TT.
        /// </summary>
        /// <value>The Email CBPT TT.</value>
        public string EmailCBPT_TT
        {
            get { return GetProperty(EmailCBPT_TTProperty); }
            set { SetProperty(EmailCBPT_TTProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="NamLapPhieu"/> property.
        /// </summary>
        public static readonly PropertyInfo<int?> NamLapPhieuProperty = RegisterProperty<int?>(p => p.NamLapPhieu, "Nam Lap Phieu");
        /// <summary>
        /// Gets or sets the Nam Lap Phieu.
        /// </summary>
        /// <value>The Nam Lap Phieu.</value>
        public int? NamLapPhieu
        {
            get { return GetProperty(NamLapPhieuProperty); }
            set { SetProperty(NamLapPhieuProperty, value); }
        }

        #endregion

        #region Factory Methods

        /// <summary>
        /// Factory method. Creates a new <see cref="CDT_PhieuKhaoSat"/> object.
        /// </summary>
        /// <returns>A reference to the created <see cref="CDT_PhieuKhaoSat"/> object.</returns>
        public static CDT_PhieuKhaoSat NewCDT_PhieuKhaoSat()
        {
            return DataPortal.Create<CDT_PhieuKhaoSat>();
        }

        /// <summary>
        /// Factory method. Loads a <see cref="CDT_PhieuKhaoSat"/> object, based on given parameters.
        /// </summary>
        /// <param name="id">The ID parameter of the CDT_PhieuKhaoSat to fetch.</param>
        /// <returns>A reference to the fetched <see cref="CDT_PhieuKhaoSat"/> object.</returns>
        public static CDT_PhieuKhaoSat GetCDT_PhieuKhaoSat(int id)
        {
            return DataPortal.Fetch<CDT_PhieuKhaoSat>(id);
        }

        /// <summary>
        /// Factory method. Deletes a <see cref="CDT_PhieuKhaoSat"/> object, based on given parameters.
        /// </summary>
        /// <param name="id">The ID of the CDT_PhieuKhaoSat to delete.</param>
        public static void DeleteCDT_PhieuKhaoSat(int id)
        {
            DataPortal.Delete<CDT_PhieuKhaoSat>(id);
        }

        /// <summary>
        /// Factory method. Asynchronously creates a new <see cref="CDT_PhieuKhaoSat"/> object.
        /// </summary>
        /// <param name="callback">The completion callback method.</param>
        public static void NewCDT_PhieuKhaoSat(EventHandler<DataPortalResult<CDT_PhieuKhaoSat>> callback)
        {
            DataPortal.BeginCreate<CDT_PhieuKhaoSat>(callback);
        }

        /// <summary>
        /// Factory method. Asynchronously loads a <see cref="CDT_PhieuKhaoSat"/> object, based on given parameters.
        /// </summary>
        /// <param name="id">The ID parameter of the CDT_PhieuKhaoSat to fetch.</param>
        /// <param name="callback">The completion callback method.</param>
        public static void GetCDT_PhieuKhaoSat(int id, EventHandler<DataPortalResult<CDT_PhieuKhaoSat>> callback)
        {
            DataPortal.BeginFetch<CDT_PhieuKhaoSat>(id, callback);
        }

        /// <summary>
        /// Factory method. Asynchronously deletes a <see cref="CDT_PhieuKhaoSat"/> object, based on given parameters.
        /// </summary>
        /// <param name="id">The ID of the CDT_PhieuKhaoSat to delete.</param>
        /// <param name="callback">The completion callback method.</param>
        public static void DeleteCDT_PhieuKhaoSat(int id, EventHandler<DataPortalResult<CDT_PhieuKhaoSat>> callback)
        {
            DataPortal.BeginDelete<CDT_PhieuKhaoSat>(id, callback);
        }

        #endregion

        #region Constructor

        /// <summary>
        /// Initializes a new instance of the <see cref="CDT_PhieuKhaoSat"/> class.
        /// </summary>
        /// <remarks> Do not use to create a Csla object. Use factory methods instead.</remarks>
        private CDT_PhieuKhaoSat()
        {
            // Prevent direct creation
        }

        #endregion

        #region Data Access

        /// <summary>
        /// Loads default values for the <see cref="CDT_PhieuKhaoSat"/> object properties.
        /// </summary>
        [Csla.RunLocal]
        protected override void DataPortal_Create()
        {
            LoadProperty(TenBenhVienProperty, null);
            LoadProperty(TenChuyenKhoaProperty, null);
			 LoadProperty(IDProperty, System.Threading.Interlocked.Decrement(ref _lastID));
            LoadProperty(CongVanProperty, null);
            LoadProperty(HoTenCanBoPhuTrachCDTProperty, null);
            LoadProperty(PhoneCBPT_CDTProperty, null);
            LoadProperty(EmailCBPT_CDTProperty, null);
            LoadProperty(HoTenCanBoPhuTrachTTProperty, null);
            LoadProperty(PhoneCBPT_TTProperty, null);
            LoadProperty(EmailCBPT_TTProperty, null);
            var args = new DataPortalHookArgs();
            OnCreate(args);
            base.DataPortal_Create();
        }

        /// <summary>
        /// Loads a <see cref="CDT_PhieuKhaoSat"/> object from the database, based on given criteria.
        /// </summary>
        /// <param name="id">The ID.</param>
        protected void DataPortal_Fetch(int id)
        {
            using (var ctx = ConnectionManager<SqlConnection>.GetManager("Connection"))
            {
                using (var cmd = new SqlCommand("dbo.CDT_PhieuKhaoSat_get", ctx.Connection))
                {
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@ID", id).DbType = DbType.Int32;
                    var args = new DataPortalHookArgs(cmd, id);
                    OnFetchPre(args);
                    Fetch(cmd);
                    OnFetchPost(args);
                }
            }
            // check all object rules and property rules
            BusinessRules.CheckRules();
        }

        private void Fetch(SqlCommand cmd)
        {
            using (var dr = new SafeDataReader(cmd.ExecuteReader()))
            {
                if (dr.Read())
                {
                    Fetch(dr);
                }
            }
        }

        /// <summary>
        /// Loads a <see cref="CDT_PhieuKhaoSat"/> object from the given SafeDataReader.
        /// </summary>
        /// <param name="dr">The SafeDataReader to use.</param>
        private void Fetch(SafeDataReader dr)
        {
            // Value properties
            LoadProperty(IDProperty, dr.GetInt32("ID"));
            LoadProperty(CongVanProperty, dr.GetString("CongVan"));
            LoadProperty(TenBenhVienProperty, dr.GetString("TenBenhVien"));
            LoadProperty(TenChuyenKhoaProperty, dr.GetString("TenChuyenKhoa"));
            LoadProperty(IsBachMaiProperty, dr.GetBoolean("IsBachMai"));
            LoadProperty(IdBenhVienProperty, dr.GetInt64("IdBenhVien"));
            LoadProperty(IdVienKhoaPhongProperty, dr.GetInt64("IdVienKhoaPhong"));
            LoadProperty(HoTenCanBoPhuTrachCDTProperty, dr.GetString("HoTenCanBoPhuTrachCDT"));
            LoadProperty(PhoneCBPT_CDTProperty, dr.GetString("PhoneCBPT_CDT"));
            LoadProperty(EmailCBPT_CDTProperty, dr.GetString("EmailCBPT_CDT"));
            LoadProperty(HoTenCanBoPhuTrachTTProperty, dr.GetString("HoTenCanBoPhuTrachTT"));
            LoadProperty(PhoneCBPT_TTProperty, dr.GetString("PhoneCBPT_TT"));
            LoadProperty(EmailCBPT_TTProperty, dr.GetString("EmailCBPT_TT"));
            LoadProperty(NamLapPhieuProperty, dr.GetInt32("NamLapPhieu"));
            var args = new DataPortalHookArgs(dr);
            OnFetchRead(args);
        }

        /// <summary>
        /// Inserts a new <see cref="CDT_PhieuKhaoSat"/> object in the database.
        /// </summary>
        protected override void DataPortal_Insert()
        {
            using (var ctx = TransactionManager<SqlConnection, SqlTransaction>.GetManager("Connection"))
            {
                using (var cmd = new SqlCommand("dbo.CDT_PhieuKhaoSat_add", ctx.Connection))
                {
                    cmd.Transaction = ctx.Transaction;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@ID", ReadProperty(IDProperty)).Direction = ParameterDirection.Output;
                    cmd.Parameters.AddWithValue("@CongVan", ReadProperty(CongVanProperty) == null ? (object)DBNull.Value : ReadProperty(CongVanProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@isBachMai", ReadProperty(IsBachMaiProperty) == null ? (object)DBNull.Value : ReadProperty(IsBachMaiProperty).Value).DbType = DbType.Boolean;
                    cmd.Parameters.AddWithValue("@idBenhVien", ReadProperty(IdBenhVienProperty) == null ? (object)DBNull.Value : ReadProperty(IdBenhVienProperty).Value).DbType = DbType.Int64;
                    cmd.Parameters.AddWithValue("@idVienKhoaPhong", ReadProperty(IdVienKhoaPhongProperty) == null ? (object)DBNull.Value : ReadProperty(IdVienKhoaPhongProperty).Value).DbType = DbType.Int64;
                    cmd.Parameters.AddWithValue("@HoTenCanBoPhuTrachCDT", ReadProperty(HoTenCanBoPhuTrachCDTProperty) == null ? (object)DBNull.Value : ReadProperty(HoTenCanBoPhuTrachCDTProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@PhoneCBPT_CDT", ReadProperty(PhoneCBPT_CDTProperty) == null ? (object)DBNull.Value : ReadProperty(PhoneCBPT_CDTProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@EmailCBPT_CDT", ReadProperty(EmailCBPT_CDTProperty) == null ? (object)DBNull.Value : ReadProperty(EmailCBPT_CDTProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@HoTenCanBoPhuTrachTT", ReadProperty(HoTenCanBoPhuTrachTTProperty) == null ? (object)DBNull.Value : ReadProperty(HoTenCanBoPhuTrachTTProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@PhoneCBPT_TT", ReadProperty(PhoneCBPT_TTProperty) == null ? (object)DBNull.Value : ReadProperty(PhoneCBPT_TTProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@EmailCBPT_TT", ReadProperty(EmailCBPT_TTProperty) == null ? (object)DBNull.Value : ReadProperty(EmailCBPT_TTProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@NamLapPhieu", ReadProperty(NamLapPhieuProperty) == null ? (object)DBNull.Value : ReadProperty(NamLapPhieuProperty).Value).DbType = DbType.Int32;
                    var args = new DataPortalHookArgs(cmd);
                    OnInsertPre(args);
                    cmd.ExecuteNonQuery();
                    OnInsertPost(args);
                    LoadProperty(IDProperty, (int) cmd.Parameters["@ID"].Value);
                }
                ctx.Commit();
            }
        }

        /// <summary>
        /// Updates in the database all changes made to the <see cref="CDT_PhieuKhaoSat"/> object.
        /// </summary>
        protected override void DataPortal_Update()
        {
            using (var ctx = TransactionManager<SqlConnection, SqlTransaction>.GetManager("Connection"))
            {
                using (var cmd = new SqlCommand("dbo.CDT_PhieuKhaoSat_update", ctx.Connection))
                {
                    cmd.Transaction = ctx.Transaction;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@ID", ReadProperty(IDProperty)).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@CongVan", ReadProperty(CongVanProperty) == null ? (object)DBNull.Value : ReadProperty(CongVanProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@isBachMai", ReadProperty(IsBachMaiProperty) == null ? (object)DBNull.Value : ReadProperty(IsBachMaiProperty).Value).DbType = DbType.Boolean;
                    cmd.Parameters.AddWithValue("@idBenhVien", ReadProperty(IdBenhVienProperty) == null ? (object)DBNull.Value : ReadProperty(IdBenhVienProperty).Value).DbType = DbType.Int64;
                    cmd.Parameters.AddWithValue("@idVienKhoaPhong", ReadProperty(IdVienKhoaPhongProperty) == null ? (object)DBNull.Value : ReadProperty(IdVienKhoaPhongProperty).Value).DbType = DbType.Int64;
                    cmd.Parameters.AddWithValue("@HoTenCanBoPhuTrachCDT", ReadProperty(HoTenCanBoPhuTrachCDTProperty) == null ? (object)DBNull.Value : ReadProperty(HoTenCanBoPhuTrachCDTProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@PhoneCBPT_CDT", ReadProperty(PhoneCBPT_CDTProperty) == null ? (object)DBNull.Value : ReadProperty(PhoneCBPT_CDTProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@EmailCBPT_CDT", ReadProperty(EmailCBPT_CDTProperty) == null ? (object)DBNull.Value : ReadProperty(EmailCBPT_CDTProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@HoTenCanBoPhuTrachTT", ReadProperty(HoTenCanBoPhuTrachTTProperty) == null ? (object)DBNull.Value : ReadProperty(HoTenCanBoPhuTrachTTProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@PhoneCBPT_TT", ReadProperty(PhoneCBPT_TTProperty) == null ? (object)DBNull.Value : ReadProperty(PhoneCBPT_TTProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@EmailCBPT_TT", ReadProperty(EmailCBPT_TTProperty) == null ? (object)DBNull.Value : ReadProperty(EmailCBPT_TTProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@NamLapPhieu", ReadProperty(NamLapPhieuProperty) == null ? (object)DBNull.Value : ReadProperty(NamLapPhieuProperty).Value).DbType = DbType.Int32;
                    var args = new DataPortalHookArgs(cmd);
                    OnUpdatePre(args);
                    cmd.ExecuteNonQuery();
                    OnUpdatePost(args);
                }
                ctx.Commit();
            }
        }

        /// <summary>
        /// Self deletes the <see cref="CDT_PhieuKhaoSat"/> object.
        /// </summary>
        protected override void DataPortal_DeleteSelf()
        {
            DataPortal_Delete(ID);
        }

        /// <summary>
        /// Deletes the <see cref="CDT_PhieuKhaoSat"/> object from database.
        /// </summary>
        /// <param name="id">The delete criteria.</param>
        protected void DataPortal_Delete(int id)
        {
            using (var ctx = TransactionManager<SqlConnection, SqlTransaction>.GetManager("Connection"))
            {
                using (var cmd = new SqlCommand("dbo.CDT_PhieuKhaoSat_delete", ctx.Connection))
                {
                    cmd.Transaction = ctx.Transaction;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@ID", id).DbType = DbType.Int32;
                    var args = new DataPortalHookArgs(cmd, id);
                    OnDeletePre(args);
                    cmd.ExecuteNonQuery();
                    OnDeletePost(args);
                }
                ctx.Commit();
            }
        }

        #endregion

        #region Pseudo Events

        /// <summary>
        /// Occurs after setting all defaults for object creation.
        /// </summary>
        partial void OnCreate(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Delete, after setting query parameters and before the delete operation.
        /// </summary>
        partial void OnDeletePre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Delete, after the delete operation, before Commit().
        /// </summary>
        partial void OnDeletePost(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after setting query parameters and before the fetch operation.
        /// </summary>
        partial void OnFetchPre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after the fetch operation (object or collection is fully loaded and set up).
        /// </summary>
        partial void OnFetchPost(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after the low level fetch operation, before the data reader is destroyed.
        /// </summary>
        partial void OnFetchRead(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after setting query parameters and before the update operation.
        /// </summary>
        partial void OnUpdatePre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Insert, after the update operation, before setting back row identifiers (RowVersion) and Commit().
        /// </summary>
        partial void OnUpdatePost(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Insert, after setting query parameters and before the insert operation.
        /// </summary>
        partial void OnInsertPre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Insert, after the insert operation, before setting back row identifiers (ID and RowVersion) and Commit().
        /// </summary>
        partial void OnInsertPost(DataPortalHookArgs args);

        #endregion

    }
}
