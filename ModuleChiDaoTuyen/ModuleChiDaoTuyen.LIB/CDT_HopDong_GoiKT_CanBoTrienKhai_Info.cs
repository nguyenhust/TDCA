//  This file was generated by CSLA Object Generator - CslaGenFork v4.3.0
//
// Filename:    CDT_HopDong_GoiKT_CanBoTrienKhai_Info
// ObjectType:  CDT_HopDong_GoiKT_CanBoTrienKhai_Info
// CSLAType:    EditableChild

using System;
using System.Data;
using System.Data.SqlClient;
using Csla;
using Csla.Data;
using NETLINK.LIB;
namespace ModuleChiDaoTuyen.LIB
{

    /// <summary>
    /// CDT_HopDong_GoiKT_CanBoTrienKhai_Info (editable child object).<br/>
    /// This is a generated base class of <see cref="CDT_HopDong_GoiKT_CanBoTrienKhai_Info"/> business object.
    /// </summary>
    /// <remarks>
    /// This class is an item of <see cref="CDT_HopDong_GoiKT_CanBoTrienKhai_Coll"/> collection.
    /// </remarks>
    [Serializable]
    public partial class CDT_HopDong_GoiKT_CanBoTrienKhai_Info : BusinessBase<CDT_HopDong_GoiKT_CanBoTrienKhai_Info>
    {

        #region Static Fields

        private static int _lastID;

        #endregion

        #region Business Properties

        /// <summary>
        /// Maintains metadata about <see cref="IdCanBoTrienKhai"/> property.
        /// </summary>
        public static readonly PropertyInfo<Int64?> IdCanBoTrienKhaiProperty = RegisterProperty<Int64?>(p => p.IdCanBoTrienKhai, "Id Can Bo Trien Khai");
        /// <summary>
        /// Gets or sets the Id Can Bo Trien Khai.
        /// </summary>
        /// <value>The Id Can Bo Trien Khai.</value>
        public Int64? IdCanBoTrienKhai
        {
            get { return GetProperty(IdCanBoTrienKhaiProperty); }
            set { SetProperty(IdCanBoTrienKhaiProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="IdHopDong_GoiKT"/> property.
        /// </summary>
        public static readonly PropertyInfo<int?> IdHopDong_GoiKTProperty = RegisterProperty<int?>(p => p.IdHopDong_GoiKT, "Id Hop Dong Goi KT");
        /// <summary>
        /// Gets or sets the Id Hop Dong Goi KT.
        /// </summary>
        /// <value>The Id Hop Dong Goi KT.</value>
        public int? IdHopDong_GoiKT
        {
            get { return GetProperty(IdHopDong_GoiKTProperty); }
            set { SetProperty(IdHopDong_GoiKTProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="A_NgayBatDau"/> property.
        /// </summary>
        public static readonly PropertyInfo<SmartDate> A_NgayBatDauProperty = RegisterProperty<SmartDate>(p => p.A_NgayBatDau, "A Ngay Bat Dau");
        /// <summary>
        /// Gets or sets the A Ngay Bat Dau.
        /// </summary>
        /// <value>The A Ngay Bat Dau.</value>
        public string A_NgayBatDau
        {
            get { return GetPropertyConvert<SmartDate, String>(A_NgayBatDauProperty); }
            set { SetPropertyConvert<SmartDate, String>(A_NgayBatDauProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="A_NgayKetThuc"/> property.
        /// </summary>
        public static readonly PropertyInfo<SmartDate> A_NgayKetThucProperty = RegisterProperty<SmartDate>(p => p.A_NgayKetThuc, "A Ngay Ket Thuc");
        /// <summary>
        /// Gets or sets the A Ngay Ket Thuc.
        /// </summary>
        /// <value>The A Ngay Ket Thuc.</value>
        public string A_NgayKetThuc
        {
            get { return GetPropertyConvert<SmartDate, String>(A_NgayKetThucProperty); }
            set { SetPropertyConvert<SmartDate, String>(A_NgayKetThucProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="DiaDiemChuyenGiaoA"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> DiaDiemChuyenGiaoAProperty = RegisterProperty<string>(p => p.DiaDiemChuyenGiaoA, "Dia Diem Chuyen Giao A");
        /// <summary>
        /// Gets or sets the Dia Diem Chuyen Giao A.
        /// </summary>
        /// <value>The Dia Diem Chuyen Giao A.</value>
        public string DiaDiemChuyenGiaoA
        {
            get { return GetProperty(DiaDiemChuyenGiaoAProperty); }
            set { SetProperty(DiaDiemChuyenGiaoAProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="DiaDIemChuyenGiaoB"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> DiaDIemChuyenGiaoBProperty = RegisterProperty<string>(p => p.DiaDIemChuyenGiaoB, "Dia DIem Chuyen Giao B");
        /// <summary>
        /// Gets or sets the Dia DIem Chuyen Giao B.
        /// </summary>
        /// <value>The Dia DIem Chuyen Giao B.</value>
        public string DiaDIemChuyenGiaoB
        {
            get { return GetProperty(DiaDIemChuyenGiaoBProperty); }
            set { SetProperty(DiaDIemChuyenGiaoBProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="B_NgayBatDau"/> property.
        /// </summary>
        public static readonly PropertyInfo<SmartDate> B_NgayBatDauProperty = RegisterProperty<SmartDate>(p => p.B_NgayBatDau, "B Ngay Bat Dau");
        /// <summary>
        /// Gets or sets the B Ngay Bat Dau.
        /// </summary>
        /// <value>The B Ngay Bat Dau.</value>
        public string B_NgayBatDau
        {
            get { return GetPropertyConvert<SmartDate, String>(B_NgayBatDauProperty); }
            set { SetPropertyConvert<SmartDate, String>(B_NgayBatDauProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="B_NgayKetThuc"/> property.
        /// </summary>
        public static readonly PropertyInfo<SmartDate> B_NgayKetThucProperty = RegisterProperty<SmartDate>(p => p.B_NgayKetThuc, "B Ngay Ket Thuc");
        /// <summary>
        /// Gets or sets the B Ngay Ket Thuc.
        /// </summary>
        /// <value>The B Ngay Ket Thuc.</value>
        public string B_NgayKetThuc
        {
            get { return GetPropertyConvert<SmartDate, String>(B_NgayKetThucProperty); }
            set { SetPropertyConvert<SmartDate, String>(B_NgayKetThucProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="GiangVien"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> GiangVienProperty = RegisterProperty<string>(p => p.GiangVien, "Giang Vien");
        /// <summary>
        /// Gets or sets the Giang Vien.
        /// </summary>
        /// <value>The Giang Vien.</value>
        public string GiangVien
        {
            get { return GetProperty(GiangVienProperty); }
            set { SetProperty(GiangVienProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="Backup04"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> Backup04Property = RegisterProperty<string>(p => p.Backup04, "Backup04");
        /// <summary>
        /// Gets or sets the Backup04.
        /// </summary>
        /// <value>The Backup04.</value>
        public string Backup04
        {
            get { return GetProperty(Backup04Property); }
            set { SetProperty(Backup04Property, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="LastEdited_UserID"/> property.
        /// </summary>
        public static readonly PropertyInfo<Int64?> LastEdited_UserIDProperty = RegisterProperty<Int64?>(p => p.LastEdited_UserID, "Last Edited User ID");
        /// <summary>
        /// Gets or sets the Last Edited User ID.
        /// </summary>
        /// <value>The Last Edited User ID.</value>
        public Int64? LastEdited_UserID
        {
            get { return GetProperty(LastEdited_UserIDProperty); }
            set { SetProperty(LastEdited_UserIDProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="LastEdited_Date"/> property.
        /// </summary>
        public static readonly PropertyInfo<SmartDate> LastEdited_DateProperty = RegisterProperty<SmartDate>(p => p.LastEdited_Date, "Last Edited Date");
        /// <summary>
        /// Gets or sets the Last Edited Date.
        /// </summary>
        /// <value>The Last Edited Date.</value>
        public string LastEdited_Date
        {
            get { return GetPropertyConvert<SmartDate, String>(LastEdited_DateProperty); }
            set { SetPropertyConvert<SmartDate, String>(LastEdited_DateProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="Backup01"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> Backup01Property = RegisterProperty<string>(p => p.Backup01, "Backup01");
        /// <summary>
        /// Gets or sets the Backup01.
        /// </summary>
        /// <value>The Backup01.</value>
        public string Backup01
        {
            get { return GetProperty(Backup01Property); }
            set { SetProperty(Backup01Property, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="Backup02"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> Backup02Property = RegisterProperty<string>(p => p.Backup02, "Backup02");
        /// <summary>
        /// Gets or sets the Backup02.
        /// </summary>
        /// <value>The Backup02.</value>
        public string Backup02
        {
            get { return GetProperty(Backup02Property); }
            set { SetProperty(Backup02Property, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="Backup03"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> Backup03Property = RegisterProperty<string>(p => p.Backup03, "Backup03");
        /// <summary>
        /// Gets or sets the Backup03.
        /// </summary>
        /// <value>The Backup03.</value>
        public string Backup03
        {
            get { return GetProperty(Backup03Property); }
            set { SetProperty(Backup03Property, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="ID"/> property.
        /// </summary>
        public static readonly PropertyInfo<int> IDProperty = RegisterProperty<int>(p => p.ID, "ID");
        /// <summary>
        /// Gets the ID.
        /// </summary>
        /// <value>The ID.</value>
        public int ID
        {
            get { return GetProperty(IDProperty); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="idChucVu"/> property.
        /// </summary>
        public static readonly PropertyInfo<int?> IdChucVuProperty = RegisterProperty<int?>(p => p.IdChucVu, "id Chuc Vu");
        /// <summary>
        /// Gets or sets the id Chuc Vu.
        /// </summary>
        /// <value>The id Chuc Vu.</value>
        public int? IdChucVu
        {
            get { return GetProperty(IdChucVuProperty); }
            set { SetProperty(IdChucVuProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="idChuyenKhoa"/> property.
        /// </summary>
        public static readonly PropertyInfo<int?> IdChuyenKhoaProperty = RegisterProperty<int?>(p => p.IdChuyenKhoa, "id Chuyen Khoa");
        /// <summary>
        /// Gets or sets the id Chuyen Khoa.
        /// </summary>
        /// <value>The id Chuyen Khoa.</value>
        public int? IdChuyenKhoa
        {
            get { return GetProperty(IdChuyenKhoaProperty); }
            set { SetProperty(IdChuyenKhoaProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="idChuyenNganh"/> property.
        /// </summary>
        public static readonly PropertyInfo<int?> IdChuyenNganhProperty = RegisterProperty<int?>(p => p.IdChuyenNganh, "id Chuyen Nganh");
        /// <summary>
        /// Gets or sets the id Chuyen Nganh.
        /// </summary>
        /// <value>The id Chuyen Nganh.</value>
        public int? IdChuyenNganh
        {
            get { return GetProperty(IdChuyenNganhProperty); }
            set { SetProperty(IdChuyenNganhProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="idBoPhan"/> property.
        /// </summary>
        public static readonly PropertyInfo<int?> IdBoPhanProperty = RegisterProperty<int?>(p => p.IdBoPhan, "id Bo Phan");
        /// <summary>
        /// Gets or sets the id Bo Phan.
        /// </summary>
        /// <value>The id Bo Phan.</value>
        public int? IdBoPhan
        {
            get { return GetProperty(IdBoPhanProperty); }
            set { SetProperty(IdBoPhanProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="idTrinhDo"/> property.
        /// </summary>
        public static readonly PropertyInfo<int?> IdTrinhDoProperty = RegisterProperty<int?>(p => p.IdTrinhDo, "id Trinh Do");
        /// <summary>
        /// Gets or sets the id Trinh Do.
        /// </summary>
        /// <value>The id Trinh Do.</value>
        public int? IdTrinhDo
        {
            get { return GetProperty(IdTrinhDoProperty); }
            set { SetProperty(IdTrinhDoProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="DienThoai"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> DienThoaiProperty = RegisterProperty<string>(p => p.DienThoai, "Dien Thoai");
        /// <summary>
        /// Gets or sets the Dien Thoai.
        /// </summary>
        /// <value>The Dien Thoai.</value>
        public string DienThoai
        {
            get { return GetProperty(DienThoaiProperty); }
            set { SetProperty(DienThoaiProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="Email"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> EmailProperty = RegisterProperty<string>(p => p.Email, "Email");
        /// <summary>
        /// Gets or sets the Email.
        /// </summary>
        /// <value>The Email.</value>
        public string Email
        {
            get { return GetProperty(EmailProperty); }
            set { SetProperty(EmailProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="idHopDong"/> property.
        /// </summary>
        public static readonly PropertyInfo<int?> IdHopDongProperty = RegisterProperty<int?>(p => p.IdHopDong, "id Hop Dong");
        /// <summary>
        /// Gets or sets the id Hop Dong.
        /// </summary>
        /// <value>The id Hop Dong.</value>
        public int? IdHopDong
        {
            get { return GetProperty(IdHopDongProperty); }
            set { SetProperty(IdHopDongProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="idGoiKT"/> property.
        /// </summary>
        public static readonly PropertyInfo<int?> IdGoiKTProperty = RegisterProperty<int?>(p => p.IdGoiKT, "id Goi KT");
        /// <summary>
        /// Gets or sets the id Goi KT.
        /// </summary>
        /// <value>The id Goi KT.</value>
        public int? IdGoiKT
        {
            get { return GetProperty(IdGoiKTProperty); }
            set { SetProperty(IdGoiKTProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="NoiDungDaoTao"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> NoiDungDaoTaoProperty = RegisterProperty<string>(p => p.NoiDungDaoTao, "Noi Dung Dao Tao");
        /// <summary>
        /// Gets or sets the Noi Dung Dao Tao.
        /// </summary>
        /// <value>The Noi Dung Dao Tao.</value>
        public string NoiDungDaoTao
        {
            get { return GetProperty(NoiDungDaoTaoProperty); }
            set { SetProperty(NoiDungDaoTaoProperty, value); }
        }
        /// <summary>
        /// Maintains metadata about <see cref="backup04"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> TenMaHopDongProperty = RegisterProperty<string>(p => p.TenMaHopDong, "TenMaHopDong");
        /// <summary>
        /// Gets or sets the backup04.
        /// </summary>
        /// <value>The backup04.</value>
        public string TenMaHopDong
        {
            get { return GetProperty(TenMaHopDongProperty); }
            set { SetProperty(TenMaHopDongProperty, value); }
        }
        /// <summary>
        /// Maintains metadata about <see cref="backup04"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> TenGoiKyThuatProperty = RegisterProperty<string>(p => p.TenGoiKyThuat, "TenGoiKyThuat");
        /// <summary>
        /// Gets or sets the backup04.
        /// </summary>
        /// <value>The backup04.</value>
        public string TenGoiKyThuat
        {
            get { return GetProperty(TenGoiKyThuatProperty); }
            set { SetProperty(TenGoiKyThuatProperty, value); }
        }
        /// <summary>
        /// Maintains metadata about <see cref="backup04"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> TenChucVuProperty = RegisterProperty<string>(p => p.TenChucVu, "TenChucVu");
        /// <summary>
        /// Gets or sets the backup04.
        /// </summary>
        /// <value>The backup04.</value>
        public string TenChucVu
        {
            get { return GetProperty(TenChucVuProperty); }
            set { SetProperty(TenChucVuProperty, value); }
        }
        
        /// <summary>
        /// Maintains metadata about <see cref="backup04"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> TenTrinhDoProperty = RegisterProperty<string>(p => p.TenTrinhDo, "TenTrinhDo");
        /// <summary>
        /// Gets or sets the backup04.
        /// </summary>
        /// <value>The backup04.</value>
        public string TenTrinhDo
        {
            get { return GetProperty(TenTrinhDoProperty); }
            set { SetProperty(TenTrinhDoProperty, value); }
        }
        /// <summary>
        /// Maintains metadata about <see cref="backup04"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> TenChuyenKhoaProperty = RegisterProperty<string>(p => p.TenChuyenKhoa, "TenChuyenKhoa");
        /// <summary>
        /// Gets or sets the backup04.
        /// </summary>
        /// <value>The backup04.</value>
        public string TenChuyenKhoa
        {
            get { return GetProperty(TenChuyenKhoaProperty); }
            set { SetProperty(TenChuyenKhoaProperty, value); }
        }
        /// <summary>
        /// Maintains metadata about <see cref="backup04"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> TenChuyenNganhProperty = RegisterProperty<string>(p => p.TenChuyenNganh, "TenChuyenNganh");
        /// <summary>
        /// Gets or sets the backup04.
        /// </summary>
        /// <value>The backup04.</value>
        public string TenChuyenNganh
        {
            get { return GetProperty(TenChuyenNganhProperty); }
            set { SetProperty(TenChuyenNganhProperty, value); }
        }
        public DateTime DateABatDau
        {
            get { return GetProperty(A_NgayBatDauProperty); }
        }
        public DateTime DateAKetThuc
        {
            get { return GetProperty(A_NgayKetThucProperty); }
        }
             public DateTime DateBBatDau
        {
            get { return GetProperty(B_NgayBatDauProperty); }
        }
             public DateTime DateBKetThuc
             {
                 get { return GetProperty(B_NgayKetThucProperty); }
             }
        #endregion

        #region Factory Methods

        /// <summary>
        /// Factory method. Creates a new <see cref="CDT_HopDong_GoiKT_CanBoTrienKhai_Info"/> object.
        /// </summary>
        /// <returns>A reference to the created <see cref="CDT_HopDong_GoiKT_CanBoTrienKhai_Info"/> object.</returns>
        internal static CDT_HopDong_GoiKT_CanBoTrienKhai_Info NewCDT_HopDong_GoiKT_CanBoTrienKhai_Info()
        {
            return DataPortal.CreateChild<CDT_HopDong_GoiKT_CanBoTrienKhai_Info>();
        }

        /// <summary>
        /// Factory method. Asynchronously creates a new <see cref="CDT_HopDong_GoiKT_CanBoTrienKhai_Info"/> object.
        /// </summary>
        /// <param name="callback">The completion callback method.</param>
        internal static void NewCDT_HopDong_GoiKT_CanBoTrienKhai_Info(EventHandler<DataPortalResult<CDT_HopDong_GoiKT_CanBoTrienKhai_Info>> callback)
        {
            DataPortal.BeginCreate<CDT_HopDong_GoiKT_CanBoTrienKhai_Info>(callback);
        }

        /// <summary>
        /// Factory method. Loads a <see cref="CDT_HopDong_GoiKT_CanBoTrienKhai_Info"/> object from the given SafeDataReader.
        /// </summary>
        /// <param name="dr">The SafeDataReader to use.</param>
        /// <returns>A reference to the fetched <see cref="CDT_HopDong_GoiKT_CanBoTrienKhai_Info"/> object.</returns>
        internal static CDT_HopDong_GoiKT_CanBoTrienKhai_Info GetCDT_HopDong_GoiKT_CanBoTrienKhai_Info(SafeDataReader dr)
        {
            CDT_HopDong_GoiKT_CanBoTrienKhai_Info obj = new CDT_HopDong_GoiKT_CanBoTrienKhai_Info();
            // show the framework that this is a child object
            obj.MarkAsChild();
            obj.Fetch(dr);
            obj.MarkOld();
            // check all object rules and property rules
            obj.BusinessRules.CheckRules();
            return obj;
        }

        #endregion

        #region Constructor

        /// <summary>
        /// Initializes a new instance of the <see cref="CDT_HopDong_GoiKT_CanBoTrienKhai_Info"/> class.
        /// </summary>
        /// <remarks> Do not use to create a Csla object. Use factory methods instead.</remarks>
        private CDT_HopDong_GoiKT_CanBoTrienKhai_Info()
        {
            // Prevent direct creation

            // show the framework that this is a child object
            MarkAsChild();
        }

        #endregion

        #region Data Access

        /// <summary>
        /// Loads default values for the <see cref="CDT_HopDong_GoiKT_CanBoTrienKhai_Info"/> object properties.
        /// </summary>
        [Csla.RunLocal]
        protected override void Child_Create()
        {
            LoadProperty(A_NgayBatDauProperty, null);
            LoadProperty(A_NgayKetThucProperty, null);
            LoadProperty(DiaDiemChuyenGiaoAProperty, null);
            LoadProperty(DiaDIemChuyenGiaoBProperty, null);
            LoadProperty(B_NgayBatDauProperty, null);
            LoadProperty(B_NgayKetThucProperty, null);
            LoadProperty(GiangVienProperty, null);
            LoadProperty(Backup04Property, null);
            LoadProperty(LastEdited_DateProperty, null);
            LoadProperty(Backup01Property, null);
            LoadProperty(Backup02Property, null);
            LoadProperty(Backup03Property, null);
            LoadProperty(IDProperty, System.Threading.Interlocked.Decrement(ref _lastID));
            LoadProperty(DienThoaiProperty, null);
            LoadProperty(EmailProperty, null);
            LoadProperty(NoiDungDaoTaoProperty, null);
            LoadProperty(TenMaHopDongProperty, null);
           
            LoadProperty(TenGoiKyThuatProperty, null);
            LoadProperty(TenChucVuProperty, null);
            LoadProperty(TenChuyenKhoaProperty, null);
            LoadProperty(TenTrinhDoProperty, null);
            LoadProperty(TenChuyenNganhProperty, null);
            var args = new DataPortalHookArgs();
            OnCreate(args);
            base.Child_Create();
        }

        /// <summary>
        /// Loads a <see cref="CDT_HopDong_GoiKT_CanBoTrienKhai_Info"/> object from the given SafeDataReader.
        /// </summary>
        /// <param name="dr">The SafeDataReader to use.</param>
        private void Fetch(SafeDataReader dr)
        {
            // Value properties
            LoadProperty(TenMaHopDongProperty, dr.GetString("TenMaHopDong"));
            LoadProperty(TenGoiKyThuatProperty, dr.GetString("TenGoiKyThuat"));
            LoadProperty(TenChucVuProperty, dr.GetString("TenChucVu"));
            LoadProperty(TenChuyenKhoaProperty, dr.GetString("TenChuyenKhoa"));
            LoadProperty(TenTrinhDoProperty, dr.GetString("TenTrinhDo"));
            LoadProperty(TenChuyenNganhProperty, dr.GetString("TenChuyenNganh"));
            LoadProperty(IdCanBoTrienKhaiProperty, dr.GetInt64("IdCanBoTrienKhai"));
            LoadProperty(IdHopDong_GoiKTProperty, dr.GetInt32("IdHopDong_GoiKT"));
            LoadProperty(A_NgayBatDauProperty, dr.GetSmartDate("A_NgayBatDau"));
            LoadProperty(A_NgayKetThucProperty, dr.GetSmartDate("A_NgayKetThuc"));
            LoadProperty(DiaDiemChuyenGiaoAProperty, dr.GetString("DiaDiemChuyenGiaoA"));
            LoadProperty(DiaDIemChuyenGiaoBProperty, dr.GetString("DiaDIemChuyenGiaoB"));
            LoadProperty(B_NgayBatDauProperty, dr.GetSmartDate("B_NgayBatDau"));
            LoadProperty(B_NgayKetThucProperty, dr.GetSmartDate("B_NgayKetThuc"));
            LoadProperty(GiangVienProperty, dr.GetString("GiangVien"));
            LoadProperty(Backup04Property, dr.GetString("Backup04"));
            LoadProperty(LastEdited_UserIDProperty, dr.GetInt64("LastEdited_UserID"));
            LoadProperty(LastEdited_DateProperty, dr.GetSmartDate("LastEdited_Date"));
            LoadProperty(Backup01Property, dr.GetString("Backup01"));
            LoadProperty(Backup02Property, dr.GetString("Backup02"));
            LoadProperty(Backup03Property, dr.GetString("Backup03"));
            LoadProperty(IDProperty, dr.GetInt32("ID"));
            LoadProperty(IdChucVuProperty, dr.GetInt32("IdChucVu"));
            LoadProperty(IdChuyenKhoaProperty, dr.GetInt32("IdChuyenKhoa"));
            LoadProperty(IdChuyenNganhProperty, dr.GetInt32("IdChuyenNganh"));
            LoadProperty(IdBoPhanProperty, dr.GetInt32("IdBoPhan"));
            LoadProperty(IdTrinhDoProperty, dr.GetInt32("IdTrinhDo"));
            LoadProperty(DienThoaiProperty, dr.GetString("DienThoai"));
            LoadProperty(EmailProperty, dr.GetString("Email"));
            LoadProperty(IdHopDongProperty, dr.GetInt32("IdHopDong"));
            LoadProperty(IdGoiKTProperty, dr.GetInt32("IdGoiKT"));
            LoadProperty(NoiDungDaoTaoProperty, dr.GetString("NoiDungDaoTao"));
            var args = new DataPortalHookArgs(dr);
            OnFetchRead(args);
        }

        /// <summary>
        /// Inserts a new <see cref="CDT_HopDong_GoiKT_CanBoTrienKhai_Info"/> object in the database.
        /// </summary>
        private void Child_Insert()
        {
            using (var ctx = TransactionManager<SqlConnection, SqlTransaction>.GetManager("Connection"))
            {
                using (var cmd = new SqlCommand("dbo.CDT_HopDong_GoiKT_CanBoTrienKhai_Info_add", ctx.Connection))
                {
                    cmd.Transaction = ctx.Transaction;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@IdCanBoTrienKhai", ReadProperty(IdCanBoTrienKhaiProperty) == null ? (object)DBNull.Value : ReadProperty(IdCanBoTrienKhaiProperty).Value).DbType = DbType.Int64;
                    cmd.Parameters.AddWithValue("@IdHopDong_GoiKT", ReadProperty(IdHopDong_GoiKTProperty) == null ? (object)DBNull.Value : ReadProperty(IdHopDong_GoiKTProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@A_NgayBatDau", ReadProperty(A_NgayBatDauProperty).DBValue).DbType = DbType.DateTime;
                    cmd.Parameters.AddWithValue("@A_NgayKetThuc", ReadProperty(A_NgayKetThucProperty).DBValue).DbType = DbType.DateTime;
                    cmd.Parameters.AddWithValue("@DiaDiemChuyenGiaoA", ReadProperty(DiaDiemChuyenGiaoAProperty) == null ? (object)DBNull.Value : ReadProperty(DiaDiemChuyenGiaoAProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@DiaDIemChuyenGiaoB", ReadProperty(DiaDIemChuyenGiaoBProperty) == null ? (object)DBNull.Value : ReadProperty(DiaDIemChuyenGiaoBProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@B_NgayBatDau", ReadProperty(B_NgayBatDauProperty).DBValue).DbType = DbType.DateTime;
                    cmd.Parameters.AddWithValue("@B_NgayKetThuc", ReadProperty(B_NgayKetThucProperty).DBValue).DbType = DbType.DateTime;
                    cmd.Parameters.AddWithValue("@GiangVien", ReadProperty(GiangVienProperty) == null ? (object)DBNull.Value : ReadProperty(GiangVienProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@Backup04", ReadProperty(Backup04Property) == null ? (object)DBNull.Value : ReadProperty(Backup04Property)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@LastEdited_UserID", ReadProperty(LastEdited_UserIDProperty) == null ? (object)DBNull.Value : ReadProperty(LastEdited_UserIDProperty).Value).DbType = DbType.Int64;
                    cmd.Parameters.AddWithValue("@LastEdited_Date", ReadProperty(LastEdited_DateProperty).DBValue).DbType = DbType.DateTime;
                    cmd.Parameters.AddWithValue("@Backup01", ReadProperty(Backup01Property) == null ? (object)DBNull.Value : ReadProperty(Backup01Property)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@Backup02", ReadProperty(Backup02Property) == null ? (object)DBNull.Value : ReadProperty(Backup02Property)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@Backup03", ReadProperty(Backup03Property) == null ? (object)DBNull.Value : ReadProperty(Backup03Property)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@ID", ReadProperty(IDProperty)).Direction = ParameterDirection.Output;
                    cmd.Parameters.AddWithValue("@idChucVu", ReadProperty(IdChucVuProperty) == null ? (object)DBNull.Value : ReadProperty(IdChucVuProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@idChuyenKhoa", ReadProperty(IdChuyenKhoaProperty) == null ? (object)DBNull.Value : ReadProperty(IdChuyenKhoaProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@idChuyenNganh", ReadProperty(IdChuyenNganhProperty) == null ? (object)DBNull.Value : ReadProperty(IdChuyenNganhProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@idBoPhan", ReadProperty(IdBoPhanProperty) == null ? (object)DBNull.Value : ReadProperty(IdBoPhanProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@idTrinhDo", ReadProperty(IdTrinhDoProperty) == null ? (object)DBNull.Value : ReadProperty(IdTrinhDoProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@DienThoai", ReadProperty(DienThoaiProperty) == null ? (object)DBNull.Value : ReadProperty(DienThoaiProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@Email", ReadProperty(EmailProperty) == null ? (object)DBNull.Value : ReadProperty(EmailProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@idHopDong", ReadProperty(IdHopDongProperty) == null ? (object)DBNull.Value : ReadProperty(IdHopDongProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@idGoiKT", ReadProperty(IdGoiKTProperty) == null ? (object)DBNull.Value : ReadProperty(IdGoiKTProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@NoiDungDaoTao", ReadProperty(NoiDungDaoTaoProperty) == null ? (object)DBNull.Value : ReadProperty(NoiDungDaoTaoProperty)).DbType = DbType.String;
                    var args = new DataPortalHookArgs(cmd);
                    OnInsertPre(args);
                    cmd.ExecuteNonQuery();
                    OnInsertPost(args);
                    LoadProperty(IDProperty, (int) cmd.Parameters["@ID"].Value);
                }
            }
        }

        /// <summary>
        /// Updates in the database all changes made to the <see cref="CDT_HopDong_GoiKT_CanBoTrienKhai_Info"/> object.
        /// </summary>
        private void Child_Update()
        {
            if (!IsDirty)
                return;

            using (var ctx = TransactionManager<SqlConnection, SqlTransaction>.GetManager("Connection"))
            {
                using (var cmd = new SqlCommand("dbo.CDT_HopDong_GoiKT_CanBoTrienKhai_Info_update", ctx.Connection))
                {
                    cmd.Transaction = ctx.Transaction;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@IdCanBoTrienKhai", ReadProperty(IdCanBoTrienKhaiProperty) == null ? (object)DBNull.Value : ReadProperty(IdCanBoTrienKhaiProperty).Value).DbType = DbType.Int64;
                    cmd.Parameters.AddWithValue("@IdHopDong_GoiKT", ReadProperty(IdHopDong_GoiKTProperty) == null ? (object)DBNull.Value : ReadProperty(IdHopDong_GoiKTProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@A_NgayBatDau", ReadProperty(A_NgayBatDauProperty).DBValue).DbType = DbType.DateTime;
                    cmd.Parameters.AddWithValue("@A_NgayKetThuc", ReadProperty(A_NgayKetThucProperty).DBValue).DbType = DbType.DateTime;
                    cmd.Parameters.AddWithValue("@DiaDiemChuyenGiaoA", ReadProperty(DiaDiemChuyenGiaoAProperty) == null ? (object)DBNull.Value : ReadProperty(DiaDiemChuyenGiaoAProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@DiaDIemChuyenGiaoB", ReadProperty(DiaDIemChuyenGiaoBProperty) == null ? (object)DBNull.Value : ReadProperty(DiaDIemChuyenGiaoBProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@B_NgayBatDau", ReadProperty(B_NgayBatDauProperty).DBValue).DbType = DbType.DateTime;
                    cmd.Parameters.AddWithValue("@B_NgayKetThuc", ReadProperty(B_NgayKetThucProperty).DBValue).DbType = DbType.DateTime;
                    cmd.Parameters.AddWithValue("@GiangVien", ReadProperty(GiangVienProperty) == null ? (object)DBNull.Value : ReadProperty(GiangVienProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@Backup04", ReadProperty(Backup04Property) == null ? (object)DBNull.Value : ReadProperty(Backup04Property)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@LastEdited_UserID", ReadProperty(LastEdited_UserIDProperty) == null ? (object)DBNull.Value : ReadProperty(LastEdited_UserIDProperty).Value).DbType = DbType.Int64;
                    cmd.Parameters.AddWithValue("@LastEdited_Date", ReadProperty(LastEdited_DateProperty).DBValue).DbType = DbType.DateTime;
                    cmd.Parameters.AddWithValue("@Backup01", ReadProperty(Backup01Property) == null ? (object)DBNull.Value : ReadProperty(Backup01Property)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@Backup02", ReadProperty(Backup02Property) == null ? (object)DBNull.Value : ReadProperty(Backup02Property)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@Backup03", ReadProperty(Backup03Property) == null ? (object)DBNull.Value : ReadProperty(Backup03Property)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@ID", ReadProperty(IDProperty)).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@idChucVu", ReadProperty(IdChucVuProperty) == null ? (object)DBNull.Value : ReadProperty(IdChucVuProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@idChuyenKhoa", ReadProperty(IdChuyenKhoaProperty) == null ? (object)DBNull.Value : ReadProperty(IdChuyenKhoaProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@idChuyenNganh", ReadProperty(IdChuyenNganhProperty) == null ? (object)DBNull.Value : ReadProperty(IdChuyenNganhProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@idBoPhan", ReadProperty(IdBoPhanProperty) == null ? (object)DBNull.Value : ReadProperty(IdBoPhanProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@idTrinhDo", ReadProperty(IdTrinhDoProperty) == null ? (object)DBNull.Value : ReadProperty(IdTrinhDoProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@DienThoai", ReadProperty(DienThoaiProperty) == null ? (object)DBNull.Value : ReadProperty(DienThoaiProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@Email", ReadProperty(EmailProperty) == null ? (object)DBNull.Value : ReadProperty(EmailProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@idHopDong", ReadProperty(IdHopDongProperty) == null ? (object)DBNull.Value : ReadProperty(IdHopDongProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@idGoiKT", ReadProperty(IdGoiKTProperty) == null ? (object)DBNull.Value : ReadProperty(IdGoiKTProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@NoiDungDaoTao", ReadProperty(NoiDungDaoTaoProperty) == null ? (object)DBNull.Value : ReadProperty(NoiDungDaoTaoProperty)).DbType = DbType.String;
                    var args = new DataPortalHookArgs(cmd);
                    OnUpdatePre(args);
                    cmd.ExecuteNonQuery();
                    OnUpdatePost(args);
                }
            }
        }

        /// <summary>
        /// Self deletes the <see cref="CDT_HopDong_GoiKT_CanBoTrienKhai_Info"/> object from database.
        /// </summary>
        private void Child_DeleteSelf()
        {
            using (var ctx = TransactionManager<SqlConnection, SqlTransaction>.GetManager("Connection"))
            {
                using (var cmd = new SqlCommand("dbo.CDT_HopDong_GoiKT_CanBoTrienKhai_Info_delete", ctx.Connection))
                {
                    cmd.Transaction = ctx.Transaction;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@ID", ReadProperty(IDProperty)).DbType = DbType.Int32;
                    var args = new DataPortalHookArgs(cmd);
                    OnDeletePre(args);
                    cmd.ExecuteNonQuery();
                    OnDeletePost(args);
                }
            }
        }

        #endregion

        #region Pseudo Events

        /// <summary>
        /// Occurs after setting all defaults for object creation.
        /// </summary>
        partial void OnCreate(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Delete, after setting query parameters and before the delete operation.
        /// </summary>
        partial void OnDeletePre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Delete, after the delete operation, before Commit().
        /// </summary>
        partial void OnDeletePost(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after setting query parameters and before the fetch operation.
        /// </summary>
        partial void OnFetchPre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after the fetch operation (object or collection is fully loaded and set up).
        /// </summary>
        partial void OnFetchPost(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after the low level fetch operation, before the data reader is destroyed.
        /// </summary>
        partial void OnFetchRead(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after setting query parameters and before the update operation.
        /// </summary>
        partial void OnUpdatePre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Insert, after the update operation, before setting back row identifiers (RowVersion) and Commit().
        /// </summary>
        partial void OnUpdatePost(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Insert, after setting query parameters and before the insert operation.
        /// </summary>
        partial void OnInsertPre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Insert, after the insert operation, before setting back row identifiers (ID and RowVersion) and Commit().
        /// </summary>
        partial void OnInsertPost(DataPortalHookArgs args);

        #endregion

    }
}
