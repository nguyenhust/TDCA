//  This file was generated by CSLA Object Generator - CslaGenFork v4.3.0
//
// Filename:    CDT_HoiChuan
// ObjectType:  CDT_HoiChuan
// CSLAType:    EditableRoot

using System;
using System.Data;
using System.Data.SqlClient;
using Csla;
using Csla.Data;
using NETLINK.LIB;

namespace ModuleChiDaoTuyen.LIB
{

    /// <summary>
    /// CDT_HoiChuan (editable root object).<br/>
    /// This is a generated base class of <see cref="CDT_HoiChuan"/> business object.
    /// </summary>
    [Serializable]
    public partial class CDT_HoiChuan : BusinessBase<CDT_HoiChuan>
    {

        #region Static Fields

        private static int _lastID;

        #endregion

        #region Business Properties

        /// <summary>
        /// Maintains metadata about <see cref="ID"/> property.
        /// </summary>
        public static readonly PropertyInfo<int> IDProperty = RegisterProperty<int>(p => p.ID, "ID");
        /// <summary>
        /// Gets the ID.
        /// </summary>
        /// <value>The ID.</value>
        public int ID
        {
            get { return GetProperty(IDProperty); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="NgayDienRa"/> property.
        /// </summary>
        public static readonly PropertyInfo<SmartDate> NgayDienRaProperty = RegisterProperty<SmartDate>(p => p.NgayDienRa, "Ngay Dien Ra");
        /// <summary>
        /// Gets or sets the Ngay Dien Ra.
        /// </summary>
        /// <value>The Ngay Dien Ra.</value>
        public string NgayDienRa
        {
            get { return GetPropertyConvert<SmartDate, String>(NgayDienRaProperty); }
            set { SetPropertyConvert<SmartDate, String>(NgayDienRaProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="NoiDung"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> NoiDungProperty = RegisterProperty<string>(p => p.NoiDung, "Noi Dung");
        /// <summary>
        /// Gets or sets the Noi Dung.
        /// </summary>
        /// <value>The Noi Dung.</value>
        public string NoiDung
        {
            get { return GetProperty(NoiDungProperty); }
            set { SetProperty(NoiDungProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="ChuTriBM"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> ChuTriBMProperty = RegisterProperty<string>(p => p.ChuTriBM, "Chu Tri BM");
        /// <summary>
        /// Gets or sets the Chu Tri BM.
        /// </summary>
        /// <value>The Chu Tri BM.</value>
        public string ChuTriBM
        {
            get { return GetProperty(ChuTriBMProperty); }
            set { SetProperty(ChuTriBMProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="ChucVuChuTri"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> ChucVuChuTriProperty = RegisterProperty<string>(p => p.ChucVuChuTri, "Chuc Vu Chu Tri");
        /// <summary>
        /// Gets or sets the Chuc Vu Chu Tri.
        /// </summary>
        /// <value>The Chuc Vu Chu Tri.</value>
        public string ChucVuChuTri
        {
            get { return GetProperty(ChucVuChuTriProperty); }
            set { SetProperty(ChucVuChuTriProperty, value); }
        }
		        /// <summary>
        /// Maintains metadata about <see cref="idChucVuChuTri"/> property.
        /// </summary>
        public static readonly PropertyInfo<int?> IdChucVuChuTriProperty = RegisterProperty<int?>(p => p.IdChucVuChuTri, "id Chuc Vu Chu Tri");
        /// <summary>
        /// Gets or sets the id Chuc Vu Chu Tri.
        /// </summary>
        /// <value>The id Chuc Vu Chu Tri.</value>
        public int? IdChucVuChuTri
        {
            get { return GetProperty(IdChucVuChuTriProperty); }
            set { SetProperty(IdChucVuChuTriProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="ThuKy1"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> ThuKy1Property = RegisterProperty<string>(p => p.ThuKy1, "Thu Ky1");
        /// <summary>
        /// Gets or sets the Thu Ky1.
        /// </summary>
        /// <value>The Thu Ky1.</value>
        public string ThuKy1
        {
            get { return GetProperty(ThuKy1Property); }
            set { SetProperty(ThuKy1Property, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="idChucVuThuKy1"/> property.
        /// </summary>
        public static readonly PropertyInfo<int?> IdChucVuThuKy1Property = RegisterProperty<int?>(p => p.IdChucVuThuKy1, "id Chuc Vu Thu Ky1");
        /// <summary>
        /// Gets or sets the id Chuc Vu Thu Ky1.
        /// </summary>
        /// <value>The id Chuc Vu Thu Ky1.</value>
        public int? IdChucVuThuKy1
        {
            get { return GetProperty(IdChucVuThuKy1Property); }
            set { SetProperty(IdChucVuThuKy1Property, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="ThuKy2"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> ThuKy2Property = RegisterProperty<string>(p => p.ThuKy2, "Thu Ky2");
        /// <summary>
        /// Gets or sets the Thu Ky2.
        /// </summary>
        /// <value>The Thu Ky2.</value>
        public string ThuKy2
        {
            get { return GetProperty(ThuKy2Property); }
            set { SetProperty(ThuKy2Property, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="idChucVuThuKy2"/> property.
        /// </summary>
        public static readonly PropertyInfo<int?> IdChucVuThuKy2Property = RegisterProperty<int?>(p => p.IdChucVuThuKy2, "id Chuc Vu Thu Ky2");
        /// <summary>
        /// Gets or sets the id Chuc Vu Thu Ky2.
        /// </summary>
        /// <value>The id Chuc Vu Thu Ky2.</value>
        public int? IdChucVuThuKy2
        {
            get { return GetProperty(IdChucVuThuKy2Property); }
            set { SetProperty(IdChucVuThuKy2Property, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="LoaiHC"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> LoaiHCProperty = RegisterProperty<string>(p => p.LoaiHC, "Loai HC");
        /// <summary>
        /// Gets or sets the Loai HC.
        /// </summary>
        /// <value>The Loai HC.</value>
        public string LoaiHC
        {
            get { return GetProperty(LoaiHCProperty); }
            set { SetProperty(LoaiHCProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="GhiChu"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> GhiChuProperty = RegisterProperty<string>(p => p.GhiChu, "Ghi Chu");
        /// <summary>
        /// Gets or sets the Ghi Chu.
        /// </summary>
        /// <value>The Ghi Chu.</value>
        public string GhiChu
        {
            get { return GetProperty(GhiChuProperty); }
            set { SetProperty(GhiChuProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="idKhoaChuTri"/> property.
        /// </summary>
        public static readonly PropertyInfo<int?> IdKhoaChuTriProperty = RegisterProperty<int?>(p => p.IdKhoaChuTri, "id Khoa Chu Tri");
        /// <summary>
        /// Gets or sets the id Khoa Chu Tri.
        /// </summary>
        /// <value>The id Khoa Chu Tri.</value>
        public int? IdKhoaChuTri
        {
            get { return GetProperty(IdKhoaChuTriProperty); }
            set { SetProperty(IdKhoaChuTriProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="idKhoaThuKy1"/> property.
        /// </summary>
        public static readonly PropertyInfo<int?> IdKhoaThuKy1Property = RegisterProperty<int?>(p => p.IdKhoaThuKy1, "id Khoa Thu Ky1");
        /// <summary>
        /// Gets or sets the id Khoa Thu Ky1.
        /// </summary>
        /// <value>The id Khoa Thu Ky1.</value>
        public int? IdKhoaThuKy1
        {
            get { return GetProperty(IdKhoaThuKy1Property); }
            set { SetProperty(IdKhoaThuKy1Property, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="idKhoaThuKy2"/> property.
        /// </summary>
        public static readonly PropertyInfo<int?> IdKhoaThuKy2Property = RegisterProperty<int?>(p => p.IdKhoaThuKy2, "id Khoa Thu Ky2");
        /// <summary>
        /// Gets or sets the id Khoa Thu Ky2.
        /// </summary>
        /// <value>The id Khoa Thu Ky2.</value>
        public int? IdKhoaThuKy2
        {
            get { return GetProperty(IdKhoaThuKy2Property); }
            set { SetProperty(IdKhoaThuKy2Property, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="DeMuc1"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> DeMuc1Property = RegisterProperty<string>(p => p.DeMuc1, "De Muc1");
        /// <summary>
        /// Gets or sets the De Muc1.
        /// </summary>
        /// <value>The De Muc1.</value>
        public string DeMuc1
        {
            get { return GetProperty(DeMuc1Property); }
            set { SetProperty(DeMuc1Property, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="DeMuc2"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> DeMuc2Property = RegisterProperty<string>(p => p.DeMuc2, "De Muc2");
        /// <summary>
        /// Gets or sets the De Muc2.
        /// </summary>
        /// <value>The De Muc2.</value>
        public string DeMuc2
        {
            get { return GetProperty(DeMuc2Property); }
            set { SetProperty(DeMuc2Property, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="DeMuc3"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> DeMuc3Property = RegisterProperty<string>(p => p.DeMuc3, "De Muc3");
        /// <summary>
        /// Gets or sets the De Muc3.
        /// </summary>
        /// <value>The De Muc3.</value>
        public string DeMuc3
        {
            get { return GetProperty(DeMuc3Property); }
            set { SetProperty(DeMuc3Property, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="backup01"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> Backup01Property = RegisterProperty<string>(p => p.Backup01, "backup01");
        /// <summary>
        /// Gets or sets the backup01.
        /// </summary>
        /// <value>The backup01.</value>
        public string Backup01
        {
            get { return GetProperty(Backup01Property); }
            set { SetProperty(Backup01Property, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="backup02"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> Backup02Property = RegisterProperty<string>(p => p.Backup02, "backup02");
        /// <summary>
        /// Gets or sets the backup02.
        /// </summary>
        /// <value>The backup02.</value>
        public string Backup02
        {
            get { return GetProperty(Backup02Property); }
            set { SetProperty(Backup02Property, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="backup03"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> Backup03Property = RegisterProperty<string>(p => p.Backup03, "backup03");
        /// <summary>
        /// Gets or sets the backup03.
        /// </summary>
        /// <value>The backup03.</value>
        public string Backup03
        {
            get { return GetProperty(Backup03Property); }
            set { SetProperty(Backup03Property, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="TinhTrangCNTT"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> TinhTrangCNTTProperty = RegisterProperty<string>(p => p.TinhTrangCNTT, "Tinh Trang CNTT");
        /// <summary>
        /// Gets or sets the Tinh Trang CNTT.
        /// </summary>
        /// <value>The Tinh Trang CNTT.</value>
        public string TinhTrangCNTT
        {
            get { return GetProperty(TinhTrangCNTTProperty); }
            set { SetProperty(TinhTrangCNTTProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="LyDo"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> LyDoProperty = RegisterProperty<string>(p => p.LyDo, "Ly Do");
        /// <summary>
        /// Gets or sets the Ly Do.
        /// </summary>
        /// <value>The Ly Do.</value>
        public string LyDo
        {
            get { return GetProperty(LyDoProperty); }
            set { SetProperty(LyDoProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="LinkFile"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> LinkFileProperty = RegisterProperty<string>(p => p.LinkFile, "Link File");
        /// <summary>
        /// Gets or sets the Link File.
        /// </summary>
        /// <value>The Link File.</value>
        public string LinkFile
        {
            get { return GetProperty(LinkFileProperty); }
            set { SetProperty(LinkFileProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="LastEdited_IDUser"/> property.
        /// </summary>
        public static readonly PropertyInfo<Int64?> LastEdited_IDUserProperty = RegisterProperty<Int64?>(p => p.LastEdited_IDUser, "Last Edited IDUser");
        /// <summary>
        /// Gets or sets the Last Edited IDUser.
        /// </summary>
        /// <value>The Last Edited IDUser.</value>
        public Int64? LastEdited_IDUser
        {
            get { return GetProperty(LastEdited_IDUserProperty); }
            set { SetProperty(LastEdited_IDUserProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="LastEdited_Date"/> property.
        /// </summary>
        public static readonly PropertyInfo<SmartDate> LastEdited_DateProperty = RegisterProperty<SmartDate>(p => p.LastEdited_Date, "Last Edited Date");
        /// <summary>
        /// Gets or sets the Last Edited Date.
        /// </summary>
        /// <value>The Last Edited Date.</value>
        public SmartDate LastEdited_Date
        {
            get { return GetProperty(LastEdited_DateProperty); }
            set { SetProperty(LastEdited_DateProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="sobenhvien"/> property.
        /// </summary>
        public static readonly PropertyInfo<int?> SobenhvienProperty = RegisterProperty<int?>(p => p.Sobenhvien, "sobenhvien");
        /// <summary>
        /// Gets or sets the sobenhvien.
        /// </summary>
        /// <value>The sobenhvien.</value>
        public int? Sobenhvien
        {
            get { return GetProperty(SobenhvienProperty); }
            set { SetProperty(SobenhvienProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="sobaocao"/> property.
        /// </summary>
        public static readonly PropertyInfo<int?> SobaocaoProperty = RegisterProperty<int?>(p => p.Sobaocao, "sobaocao");
        /// <summary>
        /// Gets or sets the sobaocao.
        /// </summary>
        /// <value>The sobaocao.</value>
        public int? Sobaocao
        {
            get { return GetProperty(SobaocaoProperty); }
            set { SetProperty(SobaocaoProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="sothanhvien"/> property.
        /// </summary>
        public static readonly PropertyInfo<int?> SothanhvienProperty = RegisterProperty<int?>(p => p.Sothanhvien, "sothanhvien");
        /// <summary>
        /// Gets or sets the sothanhvien.
        /// </summary>
        /// <value>The sothanhvien.</value>
        public int? Sothanhvien
        {
            get { return GetProperty(SothanhvienProperty); }
            set { SetProperty(SothanhvienProperty, value); }
        }
        public DateTime DateNgayDienRa
        {
            get { return GetProperty(NgayDienRaProperty); }
        }
        #endregion

        #region Factory Methods

        /// <summary>
        /// Factory method. Creates a new <see cref="CDT_HoiChuan"/> object.
        /// </summary>
        /// <returns>A reference to the created <see cref="CDT_HoiChuan"/> object.</returns>
        public static CDT_HoiChuan NewCDT_HoiChuan()
        {
            return DataPortal.Create<CDT_HoiChuan>();
        }

        /// <summary>
        /// Factory method. Loads a <see cref="CDT_HoiChuan"/> object, based on given parameters.
        /// </summary>
        /// <param name="id">The ID parameter of the CDT_HoiChuan to fetch.</param>
        /// <returns>A reference to the fetched <see cref="CDT_HoiChuan"/> object.</returns>
        public static CDT_HoiChuan GetCDT_HoiChuan(int id)
        {
            return DataPortal.Fetch<CDT_HoiChuan>(id);
        }

        /// <summary>
        /// Factory method. Deletes a <see cref="CDT_HoiChuan"/> object, based on given parameters.
        /// </summary>
        /// <param name="id">The ID of the CDT_HoiChuan to delete.</param>
        public static void DeleteCDT_HoiChuan(int id)
        {
            DataPortal.Delete<CDT_HoiChuan>(id);
        }

        /// <summary>
        /// Factory method. Asynchronously creates a new <see cref="CDT_HoiChuan"/> object.
        /// </summary>
        /// <param name="callback">The completion callback method.</param>
        public static void NewCDT_HoiChuan(EventHandler<DataPortalResult<CDT_HoiChuan>> callback)
        {
            DataPortal.BeginCreate<CDT_HoiChuan>(callback);
        }

        /// <summary>
        /// Factory method. Asynchronously loads a <see cref="CDT_HoiChuan"/> object, based on given parameters.
        /// </summary>
        /// <param name="id">The ID parameter of the CDT_HoiChuan to fetch.</param>
        /// <param name="callback">The completion callback method.</param>
        public static void GetCDT_HoiChuan(int id, EventHandler<DataPortalResult<CDT_HoiChuan>> callback)
        {
            DataPortal.BeginFetch<CDT_HoiChuan>(id, callback);
        }

        /// <summary>
        /// Factory method. Asynchronously deletes a <see cref="CDT_HoiChuan"/> object, based on given parameters.
        /// </summary>
        /// <param name="id">The ID of the CDT_HoiChuan to delete.</param>
        /// <param name="callback">The completion callback method.</param>
        public static void DeleteCDT_HoiChuan(int id, EventHandler<DataPortalResult<CDT_HoiChuan>> callback)
        {
            DataPortal.BeginDelete<CDT_HoiChuan>(id, callback);
        }

        #endregion

        #region Constructor

        /// <summary>
        /// Initializes a new instance of the <see cref="CDT_HoiChuan"/> class.
        /// </summary>
        /// <remarks> Do not use to create a Csla object. Use factory methods instead.</remarks>
        private CDT_HoiChuan()
        {
            // Prevent direct creation
        }

        #endregion

        #region Data Access

        /// <summary>
        /// Loads default values for the <see cref="CDT_HoiChuan"/> object properties.
        /// </summary>
        [Csla.RunLocal]
        protected override void DataPortal_Create()
        {
            LoadProperty(IDProperty, System.Threading.Interlocked.Decrement(ref _lastID));
            LoadProperty(NgayDienRaProperty, null);
            LoadProperty(NoiDungProperty, null);
            LoadProperty(ChuTriBMProperty, null);
            LoadProperty(ThuKy1Property, null);
            LoadProperty(ThuKy2Property, null);
            LoadProperty(LoaiHCProperty, null);
            LoadProperty(GhiChuProperty, null);
            LoadProperty(DeMuc1Property, null);
            LoadProperty(DeMuc2Property, null);
            LoadProperty(DeMuc3Property, null);
            LoadProperty(Backup01Property, null);
            LoadProperty(Backup02Property, null);
            LoadProperty(Backup03Property, null);
            LoadProperty(TinhTrangCNTTProperty, null);
            LoadProperty(LyDoProperty, null);
            LoadProperty(LinkFileProperty, null);
            LoadProperty(LastEdited_DateProperty, null);
            var args = new DataPortalHookArgs();
            OnCreate(args);
            base.DataPortal_Create();
        }

        /// <summary>
        /// Loads a <see cref="CDT_HoiChuan"/> object from the database, based on given criteria.
        /// </summary>
        /// <param name="id">The ID.</param>
        protected void DataPortal_Fetch(int id)
        {
            using (var ctx = ConnectionManager<SqlConnection>.GetManager("Connection"))
            {
                using (var cmd = new SqlCommand("dbo.CDT_HoiChuan_get", ctx.Connection))
                {
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@ID", id).DbType = DbType.Int32;
                    var args = new DataPortalHookArgs(cmd, id);
                    OnFetchPre(args);
                    Fetch(cmd);
                    OnFetchPost(args);
                }
            }
            // check all object rules and property rules
            BusinessRules.CheckRules();
        }

        private void Fetch(SqlCommand cmd)
        {
            using (var dr = new SafeDataReader(cmd.ExecuteReader()))
            {
                if (dr.Read())
                {
                    Fetch(dr);
                }
            }
        }

        /// <summary>
        /// Loads a <see cref="CDT_HoiChuan"/> object from the given SafeDataReader.
        /// </summary>
        /// <param name="dr">The SafeDataReader to use.</param>
        private void Fetch(SafeDataReader dr)
        {
            // Value properties
            LoadProperty(IDProperty, dr.GetInt32("ID"));
            LoadProperty(NgayDienRaProperty, dr.GetSmartDate("NgayDienRa"));
            LoadProperty(NoiDungProperty, dr.GetString("NoiDung"));
            LoadProperty(ChuTriBMProperty, dr.GetString("ChuTriBM"));
            LoadProperty(IdChucVuChuTriProperty, dr.GetInt32("IdChucVuChuTri"));
            LoadProperty(ThuKy1Property, dr.GetString("ThuKy1"));
            LoadProperty(IdChucVuThuKy1Property, dr.GetInt32("IdChucVuThuKy1"));
            LoadProperty(ThuKy2Property, dr.GetString("ThuKy2"));
            LoadProperty(IdChucVuThuKy2Property, dr.GetInt32("IdChucVuThuKy2"));
            LoadProperty(LoaiHCProperty, dr.GetString("LoaiHC"));
            LoadProperty(GhiChuProperty, dr.GetString("GhiChu"));
            LoadProperty(IdKhoaChuTriProperty, dr.GetInt32("IdKhoaChuTri"));
            LoadProperty(IdKhoaThuKy1Property, dr.GetInt32("IdKhoaThuKy1"));
            LoadProperty(IdKhoaThuKy2Property, dr.GetInt32("IdKhoaThuKy2"));
            LoadProperty(DeMuc1Property, dr.GetString("DeMuc1"));
            LoadProperty(DeMuc2Property, dr.GetString("DeMuc2"));
            LoadProperty(DeMuc3Property, dr.GetString("DeMuc3"));
            LoadProperty(Backup01Property, dr.GetString("Backup01"));
            LoadProperty(Backup02Property, dr.GetString("Backup02"));
            LoadProperty(Backup03Property, dr.GetString("Backup03"));
            LoadProperty(TinhTrangCNTTProperty, dr.GetString("TinhTrangCNTT"));
            LoadProperty(LyDoProperty, dr.GetString("LyDo"));
            LoadProperty(LinkFileProperty, dr.GetString("LinkFile"));
            LoadProperty(LastEdited_IDUserProperty, dr.GetInt64("LastEdited_IDUser"));
            LoadProperty(LastEdited_DateProperty, dr.GetSmartDate("LastEdited_Date"));
            LoadProperty(SobaocaoProperty, dr.GetInt32("sobenhvien"));
            LoadProperty(SobenhvienProperty, dr.GetInt32("sobenhvien"));
            LoadProperty(SothanhvienProperty, dr.GetInt32("sothanhvien"));
            var args = new DataPortalHookArgs(dr);
            OnFetchRead(args);
        }

        /// <summary>
        /// Inserts a new <see cref="CDT_HoiChuan"/> object in the database.
        /// </summary>
        protected override void DataPortal_Insert()
        {
            using (var ctx = TransactionManager<SqlConnection, SqlTransaction>.GetManager("Connection"))
            {
                using (var cmd = new SqlCommand("dbo.CDT_HoiChuan_add", ctx.Connection))
                {
                    cmd.Transaction = ctx.Transaction;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@ID", ReadProperty(IDProperty)).Direction = ParameterDirection.Output;
                    cmd.Parameters.AddWithValue("@NgayDienRa", ReadProperty(NgayDienRaProperty).DBValue).DbType = DbType.DateTime;
                    cmd.Parameters.AddWithValue("@NoiDung", ReadProperty(NoiDungProperty) == null ? (object)DBNull.Value : ReadProperty(NoiDungProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@ChuTriBM", ReadProperty(ChuTriBMProperty) == null ? (object)DBNull.Value : ReadProperty(ChuTriBMProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@idChucVuChuTri", ReadProperty(IdChucVuChuTriProperty) == null ? (object)DBNull.Value : ReadProperty(IdChucVuChuTriProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@ThuKy1", ReadProperty(ThuKy1Property) == null ? (object)DBNull.Value : ReadProperty(ThuKy1Property)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@idChucVuThuKy1", ReadProperty(IdChucVuThuKy1Property) == null ? (object)DBNull.Value : ReadProperty(IdChucVuThuKy1Property).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@ThuKy2", ReadProperty(ThuKy2Property) == null ? (object)DBNull.Value : ReadProperty(ThuKy2Property)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@idChucVuThuKy2", ReadProperty(IdChucVuThuKy2Property) == null ? (object)DBNull.Value : ReadProperty(IdChucVuThuKy2Property).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@LoaiHC", ReadProperty(LoaiHCProperty) == null ? (object)DBNull.Value : ReadProperty(LoaiHCProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@GhiChu", ReadProperty(GhiChuProperty) == null ? (object)DBNull.Value : ReadProperty(GhiChuProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@idKhoaChuTri", ReadProperty(IdKhoaChuTriProperty) == null ? (object)DBNull.Value : ReadProperty(IdKhoaChuTriProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@idKhoaThuKy1", ReadProperty(IdKhoaThuKy1Property) == null ? (object)DBNull.Value : ReadProperty(IdKhoaThuKy1Property).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@idKhoaThuKy2", ReadProperty(IdKhoaThuKy2Property) == null ? (object)DBNull.Value : ReadProperty(IdKhoaThuKy2Property).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@DeMuc1", ReadProperty(DeMuc1Property) == null ? (object)DBNull.Value : ReadProperty(DeMuc1Property)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@DeMuc2", ReadProperty(DeMuc2Property) == null ? (object)DBNull.Value : ReadProperty(DeMuc2Property)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@DeMuc3", ReadProperty(DeMuc3Property) == null ? (object)DBNull.Value : ReadProperty(DeMuc3Property)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@backup01", ReadProperty(Backup01Property) == null ? (object)DBNull.Value : ReadProperty(Backup01Property)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@backup02", ReadProperty(Backup02Property) == null ? (object)DBNull.Value : ReadProperty(Backup02Property)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@backup03", ReadProperty(Backup03Property) == null ? (object)DBNull.Value : ReadProperty(Backup03Property)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@TinhTrangCNTT", ReadProperty(TinhTrangCNTTProperty) == null ? (object)DBNull.Value : ReadProperty(TinhTrangCNTTProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@LyDo", ReadProperty(LyDoProperty) == null ? (object)DBNull.Value : ReadProperty(LyDoProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@LinkFile", ReadProperty(LinkFileProperty) == null ? (object)DBNull.Value : ReadProperty(LinkFileProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@LastEdited_IDUser", ReadProperty(LastEdited_IDUserProperty) == null ? (object)DBNull.Value : ReadProperty(LastEdited_IDUserProperty).Value).DbType = DbType.Int64;
                    cmd.Parameters.AddWithValue("@LastEdited_Date", ReadProperty(LastEdited_DateProperty).DBValue).DbType = DbType.DateTime;
                    cmd.Parameters.AddWithValue("@sobenhvien", ReadProperty(SobenhvienProperty) == null ? (object)DBNull.Value : ReadProperty(SobenhvienProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@sobaocao", ReadProperty(SobaocaoProperty) == null ? (object)DBNull.Value : ReadProperty(SobaocaoProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@sothanhvien", ReadProperty(SothanhvienProperty) == null ? (object)DBNull.Value : ReadProperty(SothanhvienProperty).Value).DbType = DbType.Int32;
                    var args = new DataPortalHookArgs(cmd);
                    OnInsertPre(args);
                    cmd.ExecuteNonQuery();
                    OnInsertPost(args);
                    LoadProperty(IDProperty, (int) cmd.Parameters["@ID"].Value);
                }
                ctx.Commit();
            }
        }

        /// <summary>
        /// Updates in the database all changes made to the <see cref="CDT_HoiChuan"/> object.
        /// </summary>
        protected override void DataPortal_Update()
        {
            using (var ctx = TransactionManager<SqlConnection, SqlTransaction>.GetManager("Connection"))
            {
                using (var cmd = new SqlCommand("dbo.CDT_HoiChuan_update", ctx.Connection))
                {
                    cmd.Transaction = ctx.Transaction;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@ID", ReadProperty(IDProperty)).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@NgayDienRa", ReadProperty(NgayDienRaProperty).DBValue).DbType = DbType.DateTime;
                    cmd.Parameters.AddWithValue("@NoiDung", ReadProperty(NoiDungProperty) == null ? (object)DBNull.Value : ReadProperty(NoiDungProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@ChuTriBM", ReadProperty(ChuTriBMProperty) == null ? (object)DBNull.Value : ReadProperty(ChuTriBMProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@idChucVuChuTri", ReadProperty(IdChucVuChuTriProperty) == null ? (object)DBNull.Value : ReadProperty(IdChucVuChuTriProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@ThuKy1", ReadProperty(ThuKy1Property) == null ? (object)DBNull.Value : ReadProperty(ThuKy1Property)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@idChucVuThuKy1", ReadProperty(IdChucVuThuKy1Property) == null ? (object)DBNull.Value : ReadProperty(IdChucVuThuKy1Property).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@ThuKy2", ReadProperty(ThuKy2Property) == null ? (object)DBNull.Value : ReadProperty(ThuKy2Property)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@idChucVuThuKy2", ReadProperty(IdChucVuThuKy2Property) == null ? (object)DBNull.Value : ReadProperty(IdChucVuThuKy2Property).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@LoaiHC", ReadProperty(LoaiHCProperty) == null ? (object)DBNull.Value : ReadProperty(LoaiHCProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@GhiChu", ReadProperty(GhiChuProperty) == null ? (object)DBNull.Value : ReadProperty(GhiChuProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@idKhoaChuTri", ReadProperty(IdKhoaChuTriProperty) == null ? (object)DBNull.Value : ReadProperty(IdKhoaChuTriProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@idKhoaThuKy1", ReadProperty(IdKhoaThuKy1Property) == null ? (object)DBNull.Value : ReadProperty(IdKhoaThuKy1Property).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@idKhoaThuKy2", ReadProperty(IdKhoaThuKy2Property) == null ? (object)DBNull.Value : ReadProperty(IdKhoaThuKy2Property).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@DeMuc1", ReadProperty(DeMuc1Property) == null ? (object)DBNull.Value : ReadProperty(DeMuc1Property)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@DeMuc2", ReadProperty(DeMuc2Property) == null ? (object)DBNull.Value : ReadProperty(DeMuc2Property)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@DeMuc3", ReadProperty(DeMuc3Property) == null ? (object)DBNull.Value : ReadProperty(DeMuc3Property)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@backup01", ReadProperty(Backup01Property) == null ? (object)DBNull.Value : ReadProperty(Backup01Property)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@backup02", ReadProperty(Backup02Property) == null ? (object)DBNull.Value : ReadProperty(Backup02Property)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@backup03", ReadProperty(Backup03Property) == null ? (object)DBNull.Value : ReadProperty(Backup03Property)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@TinhTrangCNTT", ReadProperty(TinhTrangCNTTProperty) == null ? (object)DBNull.Value : ReadProperty(TinhTrangCNTTProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@LyDo", ReadProperty(LyDoProperty) == null ? (object)DBNull.Value : ReadProperty(LyDoProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@LinkFile", ReadProperty(LinkFileProperty) == null ? (object)DBNull.Value : ReadProperty(LinkFileProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@LastEdited_IDUser", ReadProperty(LastEdited_IDUserProperty) == null ? (object)DBNull.Value : ReadProperty(LastEdited_IDUserProperty).Value).DbType = DbType.Int64;
                    cmd.Parameters.AddWithValue("@LastEdited_Date", ReadProperty(LastEdited_DateProperty).DBValue).DbType = DbType.DateTime;
                    cmd.Parameters.AddWithValue("@sobenhvien", ReadProperty(SobenhvienProperty) == null ? (object)DBNull.Value : ReadProperty(SobenhvienProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@sobaocao", ReadProperty(SobaocaoProperty) == null ? (object)DBNull.Value : ReadProperty(SobaocaoProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@sothanhvien", ReadProperty(SothanhvienProperty) == null ? (object)DBNull.Value : ReadProperty(SothanhvienProperty).Value).DbType = DbType.Int32;
                    var args = new DataPortalHookArgs(cmd);
                    OnUpdatePre(args);
                    cmd.ExecuteNonQuery();
                    OnUpdatePost(args);
                }
                ctx.Commit();
            }
        }

        /// <summary>
        /// Self deletes the <see cref="CDT_HoiChuan"/> object.
        /// </summary>
        protected override void DataPortal_DeleteSelf()
        {
            DataPortal_Delete(ID);
        }

        /// <summary>
        /// Deletes the <see cref="CDT_HoiChuan"/> object from database.
        /// </summary>
        /// <param name="id">The delete criteria.</param>
        protected void DataPortal_Delete(int id)
        {
            using (var ctx = TransactionManager<SqlConnection, SqlTransaction>.GetManager("Connection"))
            {
                using (var cmd = new SqlCommand("dbo.CDT_HoiChuan_delete", ctx.Connection))
                {
                    cmd.Transaction = ctx.Transaction;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@ID", id).DbType = DbType.Int32;
                    var args = new DataPortalHookArgs(cmd, id);
                    OnDeletePre(args);
                    cmd.ExecuteNonQuery();
                    OnDeletePost(args);
                }
                ctx.Commit();
            }
        }

        #endregion

        #region Pseudo Events

        /// <summary>
        /// Occurs after setting all defaults for object creation.
        /// </summary>
        partial void OnCreate(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Delete, after setting query parameters and before the delete operation.
        /// </summary>
        partial void OnDeletePre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Delete, after the delete operation, before Commit().
        /// </summary>
        partial void OnDeletePost(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after setting query parameters and before the fetch operation.
        /// </summary>
        partial void OnFetchPre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after the fetch operation (object or collection is fully loaded and set up).
        /// </summary>
        partial void OnFetchPost(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after the low level fetch operation, before the data reader is destroyed.
        /// </summary>
        partial void OnFetchRead(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after setting query parameters and before the update operation.
        /// </summary>
        partial void OnUpdatePre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Insert, after the update operation, before setting back row identifiers (RowVersion) and Commit().
        /// </summary>
        partial void OnUpdatePost(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Insert, after setting query parameters and before the insert operation.
        /// </summary>
        partial void OnInsertPre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Insert, after the insert operation, before setting back row identifiers (ID and RowVersion) and Commit().
        /// </summary>
        partial void OnInsertPost(DataPortalHookArgs args);

        #endregion

    }
}
