//  This file was generated by CSLA Object Generator - CslaGenFork v4.3.0
//
// Filename:    DM_CHUYENNGANH
// ObjectType:  DM_CHUYENNGANH
// CSLAType:    EditableRoot

using System;
using System.Data;
using System.Data.SqlClient;
using Csla;
using Csla.Data;
using NETLINK.LIB;

namespace oldSoft
{

    /// <summary>
    /// DM_CHUYENNGANH (editable root object).<br/>
    /// This is a generated base class of <see cref="DM_CHUYENNGANH"/> business object.
    /// </summary>
    [Serializable]
    public partial class DM_CHUYENNGANH : BusinessBase<DM_CHUYENNGANH>
    {

        #region Business Properties

        /// <summary>
        /// Maintains metadata about <see cref="MA_CHUYENNGANH_ID"/> property.
        /// </summary>
        public static readonly PropertyInfo<int> MA_CHUYENNGANH_IDProperty = RegisterProperty<int>(p => p.MA_CHUYENNGANH_ID, "MA CHUYENNGANH ID");
        /// <summary>
        /// CDT.DM_CHUYENNGANH.MA_CHUYENNGANH_ID
        /// </summary>
        /// <value>The MA CHUYENNGANH ID.</value>
        public int MA_CHUYENNGANH_ID
        {
            get { return GetProperty(MA_CHUYENNGANH_IDProperty); }
            set { SetProperty(MA_CHUYENNGANH_IDProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="MA_CHUYENNGANH"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> MA_CHUYENNGANHProperty = RegisterProperty<string>(p => p.MA_CHUYENNGANH, "MA CHUYENNGANH");
        /// <summary>
        /// CDT.DM_CHUYENNGANH.MA_CHUYENNGANH
        /// </summary>
        /// <value>The MA CHUYENNGANH.</value>
        public string MA_CHUYENNGANH
        {
            get { return GetProperty(MA_CHUYENNGANHProperty); }
            set { SetProperty(MA_CHUYENNGANHProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="TEN_CHUYENNGANH"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> TEN_CHUYENNGANHProperty = RegisterProperty<string>(p => p.TEN_CHUYENNGANH, "TEN CHUYENNGANH");
        /// <summary>
        /// CDT.DM_CHUYENNGANH.TEN_CHUYENNGANH
        /// </summary>
        /// <value>The TEN CHUYENNGANH.</value>
        public string TEN_CHUYENNGANH
        {
            get { return GetProperty(TEN_CHUYENNGANHProperty); }
            set { SetProperty(TEN_CHUYENNGANHProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="XAP_XEP"/> property.
        /// </summary>
        public static readonly PropertyInfo<int?> XAP_XEPProperty = RegisterProperty<int?>(p => p.XAP_XEP, "XAP XEP");
        /// <summary>
        /// CDT.DM_CHUYENNGANH.XAP_XEP
        /// </summary>
        /// <value>The XAP XEP.</value>
        public int? XAP_XEP
        {
            get { return GetProperty(XAP_XEPProperty); }
            set { SetProperty(XAP_XEPProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="CHUYEN_NGANH"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> CHUYEN_NGANHProperty = RegisterProperty<string>(p => p.CHUYEN_NGANH, "CHUYEN NGANH");
        /// <summary>
        /// CDT.DM_CHUYENNGANH.CHUYEN_NGANH
        /// </summary>
        /// <value>The CHUYEN NGANH.</value>
        public string CHUYEN_NGANH
        {
            get { return GetProperty(CHUYEN_NGANHProperty); }
            set { SetProperty(CHUYEN_NGANHProperty, value); }
        }

        #endregion

        #region Factory Methods

        /// <summary>
        /// Factory method. Creates a new <see cref="DM_CHUYENNGANH"/> object.
        /// </summary>
        /// <returns>A reference to the created <see cref="DM_CHUYENNGANH"/> object.</returns>
        public static DM_CHUYENNGANH NewDM_CHUYENNGANH()
        {
            return DataPortal.Create<DM_CHUYENNGANH>();
        }

        /// <summary>
        /// Factory method. Loads a <see cref="DM_CHUYENNGANH"/> object, based on given parameters.
        /// </summary>
        /// <param name="mA_CHUYENNGANH_ID">The MA_CHUYENNGANH_ID parameter of the DM_CHUYENNGANH to fetch.</param>
        /// <returns>A reference to the fetched <see cref="DM_CHUYENNGANH"/> object.</returns>
        public static DM_CHUYENNGANH GetDM_CHUYENNGANH(int mA_CHUYENNGANH_ID)
        {
            return DataPortal.Fetch<DM_CHUYENNGANH>(mA_CHUYENNGANH_ID);
        }

        /// <summary>
        /// Factory method. Deletes a <see cref="DM_CHUYENNGANH"/> object, based on given parameters.
        /// </summary>
        /// <param name="mA_CHUYENNGANH_ID">The MA_CHUYENNGANH_ID of the DM_CHUYENNGANH to delete.</param>
        public static void DeleteDM_CHUYENNGANH(int mA_CHUYENNGANH_ID)
        {
            DataPortal.Delete<DM_CHUYENNGANH>(mA_CHUYENNGANH_ID);
        }

        /// <summary>
        /// Factory method. Asynchronously creates a new <see cref="DM_CHUYENNGANH"/> object.
        /// </summary>
        /// <param name="callback">The completion callback method.</param>
        public static void NewDM_CHUYENNGANH(EventHandler<DataPortalResult<DM_CHUYENNGANH>> callback)
        {
            DataPortal.BeginCreate<DM_CHUYENNGANH>(callback);
        }

        /// <summary>
        /// Factory method. Asynchronously loads a <see cref="DM_CHUYENNGANH"/> object, based on given parameters.
        /// </summary>
        /// <param name="mA_CHUYENNGANH_ID">The MA_CHUYENNGANH_ID parameter of the DM_CHUYENNGANH to fetch.</param>
        /// <param name="callback">The completion callback method.</param>
        public static void GetDM_CHUYENNGANH(int mA_CHUYENNGANH_ID, EventHandler<DataPortalResult<DM_CHUYENNGANH>> callback)
        {
            DataPortal.BeginFetch<DM_CHUYENNGANH>(mA_CHUYENNGANH_ID, callback);
        }

        /// <summary>
        /// Factory method. Asynchronously deletes a <see cref="DM_CHUYENNGANH"/> object, based on given parameters.
        /// </summary>
        /// <param name="mA_CHUYENNGANH_ID">The MA_CHUYENNGANH_ID of the DM_CHUYENNGANH to delete.</param>
        /// <param name="callback">The completion callback method.</param>
        public static void DeleteDM_CHUYENNGANH(int mA_CHUYENNGANH_ID, EventHandler<DataPortalResult<DM_CHUYENNGANH>> callback)
        {
            DataPortal.BeginDelete<DM_CHUYENNGANH>(mA_CHUYENNGANH_ID, callback);
        }

        #endregion

        #region Constructor

        /// <summary>
        /// Initializes a new instance of the <see cref="DM_CHUYENNGANH"/> class.
        /// </summary>
        /// <remarks> Do not use to create a Csla object. Use factory methods instead.</remarks>
        private DM_CHUYENNGANH()
        {
            // Prevent direct creation
        }

        #endregion

        #region Data Access

        /// <summary>
        /// Loads default values for the <see cref="DM_CHUYENNGANH"/> object properties.
        /// </summary>
        [Csla.RunLocal]
        protected override void DataPortal_Create()
        {
            LoadProperty(TEN_CHUYENNGANHProperty, null);
            LoadProperty(CHUYEN_NGANHProperty, null);
            var args = new DataPortalHookArgs();
            OnCreate(args);
            base.DataPortal_Create();
        }

        /// <summary>
        /// Loads a <see cref="DM_CHUYENNGANH"/> object from the database, based on given criteria.
        /// </summary>
        /// <param name="mA_CHUYENNGANH_ID">The MA CHUYENNGANH ID.</param>
        protected void DataPortal_Fetch(int mA_CHUYENNGANH_ID)
        {
            using (var ctx = ConnectionManager<SqlConnection>.GetManager("Connection2"))
            {
                using (var cmd = new SqlCommand("dbo.DM_CHUYENNGANH_get", ctx.Connection))
                {
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@MA_CHUYENNGANH_ID", mA_CHUYENNGANH_ID).DbType = DbType.Int32;
                    var args = new DataPortalHookArgs(cmd, mA_CHUYENNGANH_ID);
                    OnFetchPre(args);
                    Fetch(cmd);
                    OnFetchPost(args);
                }
            }
            // check all object rules and property rules
            BusinessRules.CheckRules();
        }

        private void Fetch(SqlCommand cmd)
        {
            using (var dr = new SafeDataReader(cmd.ExecuteReader()))
            {
                if (dr.Read())
                {
                    Fetch(dr);
                }
            }
        }

        /// <summary>
        /// Loads a <see cref="DM_CHUYENNGANH"/> object from the given SafeDataReader.
        /// </summary>
        /// <param name="dr">The SafeDataReader to use.</param>
        private void Fetch(SafeDataReader dr)
        {
            // Value properties
            LoadProperty(MA_CHUYENNGANH_IDProperty, dr.GetInt32("MA_CHUYENNGANH_ID"));
            // LoadProperty(MA_CHUYENNGANHProperty, data.MA_CHUYENNGANH);
            LoadProperty(TEN_CHUYENNGANHProperty, dr.GetString("TEN_CHUYENNGANH"));
            //  LoadProperty(XAP_XEPProperty, data.XAP_XEP);
            //  LoadProperty(CHUYEN_NGANHProperty, data.CHUYEN_NGANH);
            var args = new DataPortalHookArgs(dr);
            OnFetchRead(args);
        }

        /// <summary>
        /// Inserts a new <see cref="DM_CHUYENNGANH"/> object in the database.
        /// </summary>
        protected override void DataPortal_Insert()
        {
            using (var ctx = TransactionManager<SqlConnection, SqlTransaction>.GetManager("Connection2"))
            {
                using (var cmd = new SqlCommand("dbo.DM_CHUYENNGANH_add", ctx.Connection))
                {
                    cmd.Transaction = ctx.Transaction;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@MA_CHUYENNGANH_ID", ReadProperty(MA_CHUYENNGANH_IDProperty)).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@MA_CHUYENNGANH", ReadProperty(MA_CHUYENNGANHProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@TEN_CHUYENNGANH", ReadProperty(TEN_CHUYENNGANHProperty) == null ? (object)DBNull.Value : ReadProperty(TEN_CHUYENNGANHProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@XAP_XEP", ReadProperty(XAP_XEPProperty) == null ? (object)DBNull.Value : ReadProperty(XAP_XEPProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@CHUYEN_NGANH", ReadProperty(CHUYEN_NGANHProperty) == null ? (object)DBNull.Value : ReadProperty(CHUYEN_NGANHProperty)).DbType = DbType.String;
                    var args = new DataPortalHookArgs(cmd);
                    OnInsertPre(args);
                    cmd.ExecuteNonQuery();
                    OnInsertPost(args);
                }
                ctx.Commit();
            }
        }

        /// <summary>
        /// Updates in the database all changes made to the <see cref="DM_CHUYENNGANH"/> object.
        /// </summary>
        protected override void DataPortal_Update()
        {
            using (var ctx = TransactionManager<SqlConnection, SqlTransaction>.GetManager("Connection2"))
            {
                using (var cmd = new SqlCommand("dbo.DM_CHUYENNGANH_update", ctx.Connection))
                {
                    cmd.Transaction = ctx.Transaction;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@MA_CHUYENNGANH_ID", ReadProperty(MA_CHUYENNGANH_IDProperty)).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@MA_CHUYENNGANH", ReadProperty(MA_CHUYENNGANHProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@TEN_CHUYENNGANH", ReadProperty(TEN_CHUYENNGANHProperty) == null ? (object)DBNull.Value : ReadProperty(TEN_CHUYENNGANHProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@XAP_XEP", ReadProperty(XAP_XEPProperty) == null ? (object)DBNull.Value : ReadProperty(XAP_XEPProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@CHUYEN_NGANH", ReadProperty(CHUYEN_NGANHProperty) == null ? (object)DBNull.Value : ReadProperty(CHUYEN_NGANHProperty)).DbType = DbType.String;
                    var args = new DataPortalHookArgs(cmd);
                    OnUpdatePre(args);
                    cmd.ExecuteNonQuery();
                    OnUpdatePost(args);
                }
                ctx.Commit();
            }
        }

        /// <summary>
        /// Self deletes the <see cref="DM_CHUYENNGANH"/> object.
        /// </summary>
        protected override void DataPortal_DeleteSelf()
        {
            DataPortal_Delete(MA_CHUYENNGANH_ID);
        }

        /// <summary>
        /// Deletes the <see cref="DM_CHUYENNGANH"/> object from database.
        /// </summary>
        /// <param name="mA_CHUYENNGANH_ID">The delete criteria.</param>
        protected void DataPortal_Delete(int mA_CHUYENNGANH_ID)
        {
            using (var ctx = TransactionManager<SqlConnection, SqlTransaction>.GetManager("Connection2"))
            {
                using (var cmd = new SqlCommand("dbo.DM_CHUYENNGANH_delete", ctx.Connection))
                {
                    cmd.Transaction = ctx.Transaction;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@MA_CHUYENNGANH_ID", mA_CHUYENNGANH_ID).DbType = DbType.Int32;
                    var args = new DataPortalHookArgs(cmd, mA_CHUYENNGANH_ID);
                    OnDeletePre(args);
                    cmd.ExecuteNonQuery();
                    OnDeletePost(args);
                }
                ctx.Commit();
            }
        }

        #endregion

        #region Pseudo Events

        /// <summary>
        /// Occurs after setting all defaults for object creation.
        /// </summary>
        partial void OnCreate(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Delete, after setting query parameters and before the delete operation.
        /// </summary>
        partial void OnDeletePre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Delete, after the delete operation, before Commit().
        /// </summary>
        partial void OnDeletePost(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after setting query parameters and before the fetch operation.
        /// </summary>
        partial void OnFetchPre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after the fetch operation (object or collection is fully loaded and set up).
        /// </summary>
        partial void OnFetchPost(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after the low level fetch operation, before the data reader is destroyed.
        /// </summary>
        partial void OnFetchRead(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after setting query parameters and before the update operation.
        /// </summary>
        partial void OnUpdatePre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Insert, after the update operation, before setting back row identifiers (RowVersion) and Commit().
        /// </summary>
        partial void OnUpdatePost(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Insert, after setting query parameters and before the insert operation.
        /// </summary>
        partial void OnInsertPre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Insert, after the insert operation, before setting back row identifiers (ID and RowVersion) and Commit().
        /// </summary>
        partial void OnInsertPost(DataPortalHookArgs args);

        #endregion

    }
}
