//  This file was generated by CSLA Object Generator - CslaGenFork v4.3.0
//
// Filename:    ADM_NguoiDung
// ObjectType:  ADM_NguoiDung
// CSLAType:    EditableRoot

using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using Csla;
using Csla.Data;
using Csla.Rules;
using NETLINK.LIB;


namespace Authoration.LIB
{

    /// <summary>
    /// ADM_NguoiDung (editable root object).<br/>
    /// This is a generated base class of <see cref="ADM_NguoiDung"/> business object.
    /// </summary>
    /// <remarks>
    /// This class contains one child collection:<br/>
    /// - <see cref="QuyenNguoiDungColl"/> of type <see cref="ADM_QuyenNguoiDung_Coll"/> (1:M relation to <see cref="ADM_QuyenNguoiDung_Info"/>)
    /// </remarks>
    [Serializable]
    public partial class ADM_NguoiDung : BusinessBase<ADM_NguoiDung>
    {

        #region Static Fields

        private static Int64 _lastID;

        #endregion

        #region Business Properties

        /// <summary>
        /// Maintains metadata about <see cref="IDNguoiDung"/> property.
        /// </summary>
        public static readonly PropertyInfo<Int64> IDNguoiDungProperty = RegisterProperty<Int64>(p => p.IDNguoiDung, "IDNguoi Dung");
        /// <summary>
        /// Gets the IDNguoi Dung.
        /// </summary>
        /// <value>The IDNguoi Dung.</value>
        public Int64 IDNguoiDung
        {
            get { return GetProperty(IDNguoiDungProperty); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="TenDangNhap"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> TenDangNhapProperty = RegisterProperty<string>(p => p.TenDangNhap, "Ten Dang Nhap");
        /// <summary>
        /// Gets or sets the Ten Dang Nhap.
        /// </summary>
        /// <value>The Ten Dang Nhap.</value>
        public string TenDangNhap
        {
            get { return GetProperty(TenDangNhapProperty); }
            set { SetProperty(TenDangNhapProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="MatKhau"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> MatKhauProperty = RegisterProperty<string>(p => p.MatKhau, "Mat Khau");
        /// <summary>
        /// Gets or sets the Mat Khau.
        /// </summary>
        /// <value>The Mat Khau.</value>
        public string MatKhau
        {
            get { return GetProperty(MatKhauProperty); }
            set { SetProperty(MatKhauProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="TenDayDu"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> TenDayDuProperty = RegisterProperty<string>(p => p.TenDayDu, "Ten Day Du");
        /// <summary>
        /// Gets or sets the Ten Day Du.
        /// </summary>
        /// <value>The Ten Day Du.</value>
        public string TenDayDu
        {
            get { return GetProperty(TenDayDuProperty); }
            set { SetProperty(TenDayDuProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="IDVaiTro"/> property.
        /// </summary>
        public static readonly PropertyInfo<int> IDVaiTroProperty = RegisterProperty<int>(p => p.IDVaiTro, "IDVai Tro");
        /// <summary>
        /// Gets or sets the IDVai Tro.
        /// </summary>
        /// <value>The IDVai Tro.</value>
        public int IDVaiTro
        {
            get { return GetProperty(IDVaiTroProperty); }
            set { SetProperty(IDVaiTroProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="HoatDong"/> property.
        /// </summary>
        public static readonly PropertyInfo<bool> HoatDongProperty = RegisterProperty<bool>(p => p.HoatDong, "Hoat Dong");
        /// <summary>
        /// Gets or sets the Hoat Dong.
        /// </summary>
        /// <value><c>true</c> if Hoat Dong; otherwise, <c>false</c>.</value>
        public bool HoatDong
        {
            get { return GetProperty(HoatDongProperty); }
            set { SetProperty(HoatDongProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="DaDoiMatKhau"/> property.
        /// </summary>
        public static readonly PropertyInfo<bool> DaDoiMatKhauProperty = RegisterProperty<bool>(p => p.DaDoiMatKhau, "Da Doi Mat Khau");
        /// <summary>
        /// Gets or sets the Da Doi Mat Khau.
        /// </summary>
        /// <value><c>true</c> if Da Doi Mat Khau; otherwise, <c>false</c>.</value>
        public bool DaDoiMatKhau
        {
            get { return GetProperty(DaDoiMatKhauProperty); }
            set { SetProperty(DaDoiMatKhauProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about child <see cref="QuyenNguoiDungColl"/> property.
        /// </summary>
        public static readonly PropertyInfo<ADM_QuyenNguoiDung_Coll> QuyenNguoiDungCollProperty = RegisterProperty<ADM_QuyenNguoiDung_Coll>(p => p.QuyenNguoiDungColl, "Quyen Nguoi Dung Coll", RelationshipTypes.Child);
        /// <summary>
        /// Gets the Quyen Nguoi Dung Coll ("parent load" child property).
        /// </summary>
        /// <value>The Quyen Nguoi Dung Coll.</value>
        public ADM_QuyenNguoiDung_Coll QuyenNguoiDungColl
        {
            get { return GetProperty(QuyenNguoiDungCollProperty); }
            set { LoadProperty(QuyenNguoiDungCollProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about child <see cref="ThanhVienColl"/> property.
        /// </summary>
        public static readonly PropertyInfo<ADM_ThanhVien_Coll> ThanhVienCollProperty = RegisterProperty<ADM_ThanhVien_Coll>(p => p.ThanhVienColl, "Quyen Nguoi Dung Coll", RelationshipTypes.Child);
        /// <summary>
        /// Gets the Quyen Nguoi Dung Coll ("parent load" child property).
        /// </summary>
        /// <value>The Quyen Nguoi Dung Coll.</value>
        public ADM_ThanhVien_Coll ThanhVienColl
        {
            get { return GetProperty(ThanhVienCollProperty); }
            set { LoadProperty(ThanhVienCollProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="IDCanBo"/> property.
        /// </summary>
        public static readonly PropertyInfo<Int64> IDCanBoProperty = RegisterProperty<Int64>(p => p.IDCanBo, "IDVai Tro");
        /// <summary>
        /// Gets or sets the IDVai Tro.
        /// </summary>
        /// <value>The IDVai Tro.</value>
        public Int64 IDCanBo
        {
            get { return GetProperty(IDCanBoProperty); }
            set { SetProperty(IDCanBoProperty, value); }
        }

        #endregion

        #region Validation

        protected override void AddBusinessRules()
        {
            this.BusinessRules.AddRule(new ValidationCheck.ValidEmtyNullLeng(TenDangNhapProperty,1,"Tên đăng nhập không để trống"));
            this.BusinessRules.AddRule(new ValidationCheck.ValidEmtyNullLeng(TenDayDuProperty,1,"Tên đầy đủ không để trông"));
            this.BusinessRules.AddRule(new ValidationCheck.ValidEmtyNullLeng(MatKhauProperty,6,"Mật khẩu phải lớn hơn 6 ký tự"));
            base.AddBusinessRules();
        }
      
        #endregion

        #region Authoration
        
        #endregion

        #region Factory Methods

        /// <summary>
        /// Factory method. Creates a new <see cref="ADM_NguoiDung"/> object.
        /// </summary>
        /// <returns>A reference to the created <see cref="ADM_NguoiDung"/> object.</returns>
        public static ADM_NguoiDung NewADM_NguoiDung()
        {
          
            return DataPortal.Create<ADM_NguoiDung>();
        }

        /// <summary>
        /// Factory method. Loads a <see cref="ADM_NguoiDung"/> object, based on given parameters.
        /// </summary>
        /// <param name="iDNguoiDung">The IDNguoiDung parameter of the ADM_NguoiDung to fetch.</param>
        /// <returns>A reference to the fetched <see cref="ADM_NguoiDung"/> object.</returns>
        public static ADM_NguoiDung GetADM_NguoiDung(Int64 iDNguoiDung)
        {
           
            return DataPortal.Fetch<ADM_NguoiDung>(iDNguoiDung);
        }

        /// <summary>
        /// Factory method. Deletes a <see cref="ADM_NguoiDung"/> object, based on given parameters.
        /// </summary>
        /// <param name="iDNguoiDung">The IDNguoiDung of the ADM_NguoiDung to delete.</param>
        public static void DeleteADM_NguoiDung(Int64 iDNguoiDung)
        {
            
            DataPortal.Delete<ADM_NguoiDung>(iDNguoiDung);
        }

        /// <summary>
        /// Factory method. Asynchronously creates a new <see cref="ADM_NguoiDung"/> object.
        /// </summary>
        /// <param name="callback">The completion callback method.</param>
        public static void NewADM_NguoiDung(EventHandler<DataPortalResult<ADM_NguoiDung>> callback)
        {
           
            DataPortal.BeginCreate<ADM_NguoiDung>(callback);
        }

        /// <summary>
        /// Factory method. Asynchronously loads a <see cref="ADM_NguoiDung"/> object, based on given parameters.
        /// </summary>
        /// <param name="iDNguoiDung">The IDNguoiDung parameter of the ADM_NguoiDung to fetch.</param>
        /// <param name="callback">The completion callback method.</param>
        public static void GetADM_NguoiDung(Int64 iDNguoiDung, EventHandler<DataPortalResult<ADM_NguoiDung>> callback)
        {
            
            DataPortal.BeginFetch<ADM_NguoiDung>(iDNguoiDung, callback);
        }

        /// <summary>
        /// Factory method. Asynchronously deletes a <see cref="ADM_NguoiDung"/> object, based on given parameters.
        /// </summary>
        /// <param name="iDNguoiDung">The IDNguoiDung of the ADM_NguoiDung to delete.</param>
        /// <param name="callback">The completion callback method.</param>
        public static void DeleteADM_NguoiDung(Int64 iDNguoiDung, EventHandler<DataPortalResult<ADM_NguoiDung>> callback)
        {
           
            DataPortal.BeginDelete<ADM_NguoiDung>(iDNguoiDung, callback);
        }

        public override ADM_NguoiDung Save()
        {
            return base.Save();
        }

        #endregion

        #region Constructor

        /// <summary>
        /// Initializes a new instance of the <see cref="ADM_NguoiDung"/> class.
        /// </summary>
        /// <remarks> Do not use to create a Csla object. Use factory methods instead.</remarks>
        public ADM_NguoiDung()
        {
            // Prevent direct creation
        }

        #endregion

        #region Data Access

        /// <summary>
        /// Loads default values for the <see cref="ADM_NguoiDung"/> object properties.
        /// </summary>
        [Csla.RunLocal]
        protected override void DataPortal_Create()
        {
            LoadProperty(IDNguoiDungProperty, System.Threading.Interlocked.Decrement(ref _lastID));
            LoadProperty(QuyenNguoiDungCollProperty, DataPortal.CreateChild<ADM_QuyenNguoiDung_Coll>());
            LoadProperty(ThanhVienCollProperty, DataPortal.CreateChild<ADM_ThanhVien_Coll>());
            var args = new DataPortalHookArgs();
            OnCreate(args);
            base.DataPortal_Create();
        }

        /// <summary>
        /// Loads a <see cref="ADM_NguoiDung"/> object from the database, based on given criteria.
        /// </summary>
        /// <param name="iDNguoiDung">The IDNguoi Dung.</param>
        protected void DataPortal_Fetch(Int64 iDNguoiDung)
        {
            using (var ctx = ConnectionManager<SqlConnection>.GetManager("Connection"))
            {
                using (var cmd = new SqlCommand("dbo.ADM_NguoiDung_Get", ctx.Connection))
                {
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@IDNguoiDung", iDNguoiDung).DbType = DbType.Int64;
                    var args = new DataPortalHookArgs(cmd, iDNguoiDung);
                    OnFetchPre(args);
                    Fetch(cmd);
                    OnFetchPost(args);
                }
            }
            // check all object rules and property rules
            BusinessRules.CheckRules();
        }

        private void Fetch(SqlCommand cmd)
        {
            using (var dr = new SafeDataReader(cmd.ExecuteReader()))
            {
                if (dr.Read())
                {
                    Fetch(dr);
                    FetchChildren(dr);
                }
            }
        }

        /// <summary>
        /// Loads a <see cref="ADM_NguoiDung"/> object from the given SafeDataReader.
        /// </summary>
        /// <param name="dr">The SafeDataReader to use.</param>
        private void Fetch(SafeDataReader dr)
        {
            // Value properties
            LoadProperty(IDNguoiDungProperty, dr.GetInt64("IDNguoiDung"));
            LoadProperty(TenDangNhapProperty, dr.GetString("TenDangNhap"));
            LoadProperty(MatKhauProperty, dr.GetString("MatKhau"));
            LoadProperty(TenDayDuProperty, dr.GetString("TenDayDu"));
            LoadProperty(IDVaiTroProperty, dr.GetInt32("IDVaiTro"));
            LoadProperty(HoatDongProperty, dr.GetBoolean("HoatDong"));
            LoadProperty(DaDoiMatKhauProperty, dr.GetBoolean("DaDoiMatKhau"));
            LoadProperty(IDCanBoProperty, dr.GetInt64("IDCanBo"));
            var args = new DataPortalHookArgs(dr);
            OnFetchRead(args);
        }

        /// <summary>
        /// Loads child objects from the given SafeDataReader.
        /// </summary>
        /// <param name="dr">The SafeDataReader to use.</param>
        private void FetchChildren(SafeDataReader dr)
        {
            dr.NextResult();
            LoadProperty(QuyenNguoiDungCollProperty, ADM_QuyenNguoiDung_Coll.GetADM_QuyenNguoiDung_Coll(dr));
            dr.NextResult();
            LoadProperty(ThanhVienCollProperty, ADM_ThanhVien_Coll.GetADM_ThanhVien_Coll(dr));
        }

        /// <summary>
        /// Inserts a new <see cref="ADM_NguoiDung"/> object in the database.
        /// </summary>
        protected override void DataPortal_Insert()
        {
            using (var ctx = TransactionManager<SqlConnection, SqlTransaction>.GetManager("Connection"))
            {
                using (var cmd = new SqlCommand("dbo.ADM_NguoiDung_Add", ctx.Connection))
                {
                    cmd.Transaction = ctx.Transaction;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@IDNguoiDung", ReadProperty(IDNguoiDungProperty)).Direction = ParameterDirection.Output;
                    cmd.Parameters.AddWithValue("@TenDangNhap", ReadProperty(TenDangNhapProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@MatKhau", ReadProperty(MatKhauProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@TenDayDu", ReadProperty(TenDayDuProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@IDVaiTro", ReadProperty(IDVaiTroProperty)).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@HoatDong", ReadProperty(HoatDongProperty)).DbType = DbType.Boolean;
                    cmd.Parameters.AddWithValue("@DaDoiMatKhau", ReadProperty(DaDoiMatKhauProperty)).DbType = DbType.Boolean;
                    cmd.Parameters.AddWithValue("@IDCanBo", ReadProperty(IDCanBoProperty)).DbType = DbType.Int64;
                    var args = new DataPortalHookArgs(cmd);
                    OnInsertPre(args);
                    cmd.ExecuteNonQuery();
                    OnInsertPost(args);
                    LoadProperty(IDNguoiDungProperty, (long) cmd.Parameters["@IDNguoiDung"].Value);
                }
                // flushes all pending data operations
                FieldManager.UpdateChildren(this);
                ctx.Commit();
            }
        }

        /// <summary>
        /// Updates in the database all changes made to the <see cref="ADM_NguoiDung"/> object.
        /// </summary>
        protected override void DataPortal_Update()
        {
            using (var ctx = TransactionManager<SqlConnection, SqlTransaction>.GetManager("Connection"))
            {
                using (var cmd = new SqlCommand("dbo.ADM_NguoiDung_Upd", ctx.Connection))
                {
                    cmd.Transaction = ctx.Transaction;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@IDNguoiDung", ReadProperty(IDNguoiDungProperty)).DbType = DbType.Int64;
                    cmd.Parameters.AddWithValue("@TenDangNhap", ReadProperty(TenDangNhapProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@MatKhau", ReadProperty(MatKhauProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@TenDayDu", ReadProperty(TenDayDuProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@IDVaiTro", ReadProperty(IDVaiTroProperty)).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@HoatDong", ReadProperty(HoatDongProperty)).DbType = DbType.Boolean;
                    cmd.Parameters.AddWithValue("@DaDoiMatKhau", ReadProperty(DaDoiMatKhauProperty)).DbType = DbType.Boolean;
                    cmd.Parameters.AddWithValue("@IDCanBo", ReadProperty(IDCanBoProperty)).DbType = DbType.Int64;
                    var args = new DataPortalHookArgs(cmd);
                    OnUpdatePre(args);
                    cmd.ExecuteNonQuery();
                    OnUpdatePost(args);
                }
                // flushes all pending data operations
                FieldManager.UpdateChildren(this);
                ctx.Commit();
            }
        }

        /// <summary>
        /// Self deletes the <see cref="ADM_NguoiDung"/> object.
        /// </summary>
        protected override void DataPortal_DeleteSelf()
        {
            DataPortal_Delete(IDNguoiDung);
        }

        /// <summary>
        /// Deletes the <see cref="ADM_NguoiDung"/> object from database.
        /// </summary>
        /// <param name="iDNguoiDung">The delete criteria.</param>
        protected void DataPortal_Delete(Int64 iDNguoiDung)
        {
            using (var ctx = TransactionManager<SqlConnection, SqlTransaction>.GetManager("Connection"))
            {
                // flushes all pending data operations
                FieldManager.UpdateChildren(this);
                using (var cmd = new SqlCommand("dbo.ADM_NguoiDung_Delete", ctx.Connection))
                {
                    cmd.Transaction = ctx.Transaction;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@IDNguoiDung", iDNguoiDung).DbType = DbType.Int64;
                    var args = new DataPortalHookArgs(cmd, iDNguoiDung);
                    OnDeletePre(args);
                    cmd.ExecuteNonQuery();
                    OnDeletePost(args);
                }
                ctx.Commit();
            }
            // removes all previous references to children
            LoadProperty(QuyenNguoiDungCollProperty, DataPortal.CreateChild<ADM_QuyenNguoiDung_Coll>());
            LoadProperty(ThanhVienCollProperty, DataPortal.CreateChild<ADM_ThanhVien_Coll>());
        }

        #endregion

        #region Pseudo Events

        /// <summary>
        /// Occurs after setting all defaults for object creation.
        /// </summary>
        partial void OnCreate(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Delete, after setting query parameters and before the delete operation.
        /// </summary>
        partial void OnDeletePre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Delete, after the delete operation, before Commit().
        /// </summary>
        partial void OnDeletePost(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after setting query parameters and before the fetch operation.
        /// </summary>
        partial void OnFetchPre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after the fetch operation (object or collection is fully loaded and set up).
        /// </summary>
        partial void OnFetchPost(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after the low level fetch operation, before the data reader is destroyed.
        /// </summary>
        partial void OnFetchRead(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after setting query parameters and before the update operation.
        /// </summary>
        partial void OnUpdatePre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Insert, after the update operation, before setting back row identifiers (RowVersion) and Commit().
        /// </summary>
        partial void OnUpdatePost(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Insert, after setting query parameters and before the insert operation.
        /// </summary>
        partial void OnInsertPre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Insert, after the insert operation, before setting back row identifiers (ID and RowVersion) and Commit().
        /// </summary>
        partial void OnInsertPost(DataPortalHookArgs args);

        #endregion

    }
}
