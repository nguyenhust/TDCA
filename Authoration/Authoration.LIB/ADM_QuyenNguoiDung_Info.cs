//  This file was generated by CSLA Object Generator - CslaGenFork v4.3.0
//
// Filename:    ADM_QuyenNguoiDung_Info
// ObjectType:  ADM_QuyenNguoiDung_Info
// CSLAType:    EditableChild

using System;
using System.Data;
using System.Data.SqlClient;
using Csla;
using Csla.Data;
using NETLINK.LIB;

namespace Authoration.LIB
{

    /// <summary>
    /// ADM_QuyenNguoiDung_Info (editable child object).<br/>
    /// This is a generated base class of <see cref="ADM_QuyenNguoiDung_Info"/> business object.
    /// </summary>
    /// <remarks>
    /// This class is an item of <see cref="ADM_QuyenNguoiDung_Coll"/> collection.
    /// </remarks>
    [Serializable]
    public partial class ADM_QuyenNguoiDung_Info : BusinessBase<ADM_QuyenNguoiDung_Info>
    {

        #region Business Properties

        /// <summary>
        /// Maintains metadata about <see cref="IDQuyenND"/> property.
        /// </summary>
        public static readonly PropertyInfo<Int64> IDQuyenNDProperty = RegisterProperty<Int64>(p => p.IDQuyenND, "IDQuyen ND");
        /// <summary>
        /// Gets or sets the IDQuyen ND.
        /// </summary>
        /// <value>The IDQuyen ND.</value>
        public Int64 IDQuyenND
        {
            get { return GetProperty(IDQuyenNDProperty); }
            set { SetProperty(IDQuyenNDProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="IDChucNang"/> property.
        /// </summary>
        public static readonly PropertyInfo<int> IDChucNangProperty = RegisterProperty<int>(p => p.IDChucNang, "IDChuc Nang");
        /// <summary>
        /// Gets or sets the IDChuc Nang.
        /// </summary>
        /// <value>The IDChuc Nang.</value>
        public int IDChucNang
        {
            get { return GetProperty(IDChucNangProperty); }
            set { SetProperty(IDChucNangProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="ThemMoi"/> property.
        /// </summary>
        public static readonly PropertyInfo<bool> ThemMoiProperty = RegisterProperty<bool>(p => p.ThemMoi, "Them Moi");
        /// <summary>
        /// Gets or sets the Them Moi.
        /// </summary>
        /// <value><c>true</c> if Them Moi; otherwise, <c>false</c>.</value>
        public bool ThemMoi
        {
            get { return GetProperty(ThemMoiProperty); }
            set { SetProperty(ThemMoiProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="Xoa"/> property.
        /// </summary>
        public static readonly PropertyInfo<bool> XoaProperty = RegisterProperty<bool>(p => p.Xoa, "Xoa");
        /// <summary>
        /// Gets or sets the Xoa.
        /// </summary>
        /// <value><c>true</c> if Xoa; otherwise, <c>false</c>.</value>
        public bool Xoa
        {
            get { return GetProperty(XoaProperty); }
            set { SetProperty(XoaProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="Sua"/> property.
        /// </summary>
        public static readonly PropertyInfo<bool> SuaProperty = RegisterProperty<bool>(p => p.Sua, "Sua");
        /// <summary>
        /// Gets or sets the Sua.
        /// </summary>
        /// <value><c>true</c> if Sua; otherwise, <c>false</c>.</value>
        public bool Sua
        {
            get { return GetProperty(SuaProperty); }
            set { SetProperty(SuaProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="Xem"/> property.
        /// </summary>
        public static readonly PropertyInfo<bool> XemProperty = RegisterProperty<bool>(p => p.Xem, "Xem");
        /// <summary>
        /// Gets or sets the Xem.
        /// </summary>
        /// <value><c>true</c> if Xem; otherwise, <c>false</c>.</value>
        public bool Xem
        {
            get { return GetProperty(XemProperty); }
            set { SetProperty(XemProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="TatCa"/> property.
        /// </summary>
        public static readonly PropertyInfo<bool> TatCaProperty = RegisterProperty<bool>(p => p.TatCa, "Tat Ca");
        /// <summary>
        /// Gets or sets the Tat Ca.
        /// </summary>
        /// <value><c>true</c> if Tat Ca; otherwise, <c>false</c>.</value>
        public bool TatCa
        {
            get { return GetProperty(TatCaProperty); }
            set { SetProperty(TatCaProperty, value); }
        }

        #endregion

        #region Authoration
        public static bool CanGetObject()
        {
            bool result = false;
            if (Csla.ApplicationContext.User.IsInRole("QuyenNguoiDung:S")
                || Csla.ApplicationContext.User.Identity.Name.ToUpper() == "SYSMAN")
                result = true;
            return result;
        }

        public static bool CanAddObject()
        {
            bool result = false;
            if (Csla.ApplicationContext.User.IsInRole("QuyenNguoiDung:I")
                || Csla.ApplicationContext.User.Identity.Name.ToUpper() == "SYSMAN")
                result = true;
            return result;
        }

        public static bool CanEditObject()
        {
            bool result = false;
            if (Csla.ApplicationContext.User.IsInRole("QuyenNguoiDung:U")
                || Csla.ApplicationContext.User.Identity.Name.ToUpper() == "SYSMAN")
                result = true;
            return result;
        }

        public static bool CanDeleteObject()
        {
            bool result = false;
            if (Csla.ApplicationContext.User.IsInRole("QuyenNguoiDung:D")
                || Csla.ApplicationContext.User.Identity.Name.ToUpper() == "SYSMAN")
                result = true;
            return result;
        }
        #endregion

        #region Factory Methods

        /// <summary>
        /// Factory method. Creates a new <see cref="ADM_QuyenNguoiDung_Info"/> object.
        /// </summary>
        /// <returns>A reference to the created <see cref="ADM_QuyenNguoiDung_Info"/> object.</returns>
        internal static ADM_QuyenNguoiDung_Info NewADM_QuyenNguoiDung_Info()
        {
            if (!CanAddObject())
                throw new System.Security.SecurityException("Bạn không có quyền thêm mới QuyenNguoiDung");
            return DataPortal.CreateChild<ADM_QuyenNguoiDung_Info>();
        }

        /// <summary>
        /// Factory method. Asynchronously creates a new <see cref="ADM_QuyenNguoiDung_Info"/> object.
        /// </summary>
        /// <param name="callback">The completion callback method.</param>
        internal static void NewADM_QuyenNguoiDung_Info(EventHandler<DataPortalResult<ADM_QuyenNguoiDung_Info>> callback)
        {
            if (!CanAddObject())
                throw new System.Security.SecurityException("Bạn không có quyền thêm mới QuyenNguoiDung");
            DataPortal.BeginCreate<ADM_QuyenNguoiDung_Info>(callback);
        }

        /// <summary>
        /// Factory method. Loads a <see cref="ADM_QuyenNguoiDung_Info"/> object from the given SafeDataReader.
        /// </summary>
        /// <param name="dr">The SafeDataReader to use.</param>
        /// <returns>A reference to the fetched <see cref="ADM_QuyenNguoiDung_Info"/> object.</returns>
        internal static ADM_QuyenNguoiDung_Info GetADM_QuyenNguoiDung_Info(SafeDataReader dr)
        {
            if (!CanGetObject())
                throw new System.Security.SecurityException("Bạn không có quyền xem QuyenNguoiDung");
            ADM_QuyenNguoiDung_Info obj = new ADM_QuyenNguoiDung_Info();
            // show the framework that this is a child object
            obj.MarkAsChild();
            obj.Fetch(dr);
            obj.MarkOld();
            // check all object rules and property rules
            obj.BusinessRules.CheckRules();
            return obj;
        }

        #endregion

        #region Constructor

        /// <summary>
        /// Initializes a new instance of the <see cref="ADM_QuyenNguoiDung_Info"/> class.
        /// </summary>
        /// <remarks> Do not use to create a Csla object. Use factory methods instead.</remarks>
        public ADM_QuyenNguoiDung_Info()
        {
            // Prevent direct creation

            // show the framework that this is a child object
            MarkAsChild();
        }

        #endregion

        #region Data Access

        /// <summary>
        /// Loads default values for the <see cref="ADM_QuyenNguoiDung_Info"/> object properties.
        /// </summary>
        [Csla.RunLocal]
        protected override void Child_Create()
        {
            var args = new DataPortalHookArgs();
            OnCreate(args);
            base.Child_Create();
        }

        /// <summary>
        /// Loads a <see cref="ADM_QuyenNguoiDung_Info"/> object from the given SafeDataReader.
        /// </summary>
        /// <param name="dr">The SafeDataReader to use.</param>
        private void Fetch(SafeDataReader dr)
        {
            // Value properties
            LoadProperty(IDQuyenNDProperty, dr.GetInt64("IDQuyenND"));
            LoadProperty(IDChucNangProperty, dr.GetInt32("IDChucNang"));
            LoadProperty(ThemMoiProperty, dr.GetBoolean("ThemMoi"));
            LoadProperty(XoaProperty, dr.GetBoolean("Xoa"));
            LoadProperty(SuaProperty, dr.GetBoolean("Sua"));
            LoadProperty(XemProperty, dr.GetBoolean("Xem"));
            LoadProperty(TatCaProperty, dr.GetBoolean("TatCa"));
            var args = new DataPortalHookArgs(dr);
            OnFetchRead(args);
        }

        /// <summary>
        /// Inserts a new <see cref="ADM_QuyenNguoiDung_Info"/> object in the database.
        /// </summary>
        /// <param name="parent">The parent object.</param>
        private void Child_Insert(ADM_NguoiDung parent)
        {
            using (var ctx = TransactionManager<SqlConnection, SqlTransaction>.GetManager("Connection"))
            {
                using (var cmd = new SqlCommand("dbo.ADM_QuyenNguoiDung_Info_Add", ctx.Connection))
                {
                    cmd.Transaction = ctx.Transaction;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@IDNguoiDung", parent.IDNguoiDung).DbType = DbType.Int64;
                    cmd.Parameters.AddWithValue("@IDQuyenND", ReadProperty(IDQuyenNDProperty)).DbType = DbType.Int64;
                    cmd.Parameters.AddWithValue("@IDChucNang", ReadProperty(IDChucNangProperty)).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@ThemMoi", ReadProperty(ThemMoiProperty)).DbType = DbType.Boolean;
                    cmd.Parameters.AddWithValue("@Xoa", ReadProperty(XoaProperty)).DbType = DbType.Boolean;
                    cmd.Parameters.AddWithValue("@Sua", ReadProperty(SuaProperty)).DbType = DbType.Boolean;
                    cmd.Parameters.AddWithValue("@Xem", ReadProperty(XemProperty)).DbType = DbType.Boolean;
                    cmd.Parameters.AddWithValue("@TatCa", ReadProperty(TatCaProperty)).DbType = DbType.Boolean;
                    var args = new DataPortalHookArgs(cmd);
                    OnInsertPre(args);
                    cmd.ExecuteNonQuery();
                    OnInsertPost(args);
                }
            }
        }

        /// <summary>
        /// Updates in the database all changes made to the <see cref="ADM_QuyenNguoiDung_Info"/> object.
        /// </summary>
        private void Child_Update()
        {
            if (!IsDirty)
                return;

            using (var ctx = TransactionManager<SqlConnection, SqlTransaction>.GetManager("Connection"))
            {
                using (var cmd = new SqlCommand("dbo.ADM_QuyenNguoiDung_Info_Upd", ctx.Connection))
                {
                    cmd.Transaction = ctx.Transaction;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@IDQuyenND", ReadProperty(IDQuyenNDProperty)).DbType = DbType.Int64;
                    cmd.Parameters.AddWithValue("@IDChucNang", ReadProperty(IDChucNangProperty)).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@ThemMoi", ReadProperty(ThemMoiProperty)).DbType = DbType.Boolean;
                    cmd.Parameters.AddWithValue("@Xoa", ReadProperty(XoaProperty)).DbType = DbType.Boolean;
                    cmd.Parameters.AddWithValue("@Sua", ReadProperty(SuaProperty)).DbType = DbType.Boolean;
                    cmd.Parameters.AddWithValue("@Xem", ReadProperty(XemProperty)).DbType = DbType.Boolean;
                    cmd.Parameters.AddWithValue("@TatCa", ReadProperty(TatCaProperty)).DbType = DbType.Boolean;
                    var args = new DataPortalHookArgs(cmd);
                    OnUpdatePre(args);
                    cmd.ExecuteNonQuery();
                    OnUpdatePost(args);
                }
            }
        }

        /// <summary>
        /// Self deletes the <see cref="ADM_QuyenNguoiDung_Info"/> object from database.
        /// </summary>
        private void Child_DeleteSelf()
        {
            using (var ctx = TransactionManager<SqlConnection, SqlTransaction>.GetManager("Connection"))
            {
                using (var cmd = new SqlCommand("dbo.ADM_QuyenNguoiDung_Info_Delete", ctx.Connection))
                {
                    cmd.Transaction = ctx.Transaction;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@IDQuyenND", ReadProperty(IDQuyenNDProperty)).DbType = DbType.Int64;
                    var args = new DataPortalHookArgs(cmd);
                    OnDeletePre(args);
                    cmd.ExecuteNonQuery();
                    OnDeletePost(args);
                }
            }
        }

        #endregion

        #region Pseudo Events

        /// <summary>
        /// Occurs after setting all defaults for object creation.
        /// </summary>
        partial void OnCreate(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Delete, after setting query parameters and before the delete operation.
        /// </summary>
        partial void OnDeletePre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Delete, after the delete operation, before Commit().
        /// </summary>
        partial void OnDeletePost(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after setting query parameters and before the fetch operation.
        /// </summary>
        partial void OnFetchPre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after the fetch operation (object or collection is fully loaded and set up).
        /// </summary>
        partial void OnFetchPost(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after the low level fetch operation, before the data reader is destroyed.
        /// </summary>
        partial void OnFetchRead(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after setting query parameters and before the update operation.
        /// </summary>
        partial void OnUpdatePre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Insert, after the update operation, before setting back row identifiers (RowVersion) and Commit().
        /// </summary>
        partial void OnUpdatePost(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Insert, after setting query parameters and before the insert operation.
        /// </summary>
        partial void OnInsertPre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Insert, after the insert operation, before setting back row identifiers (ID and RowVersion) and Commit().
        /// </summary>
        partial void OnInsertPost(DataPortalHookArgs args);

        #endregion

    }
}
