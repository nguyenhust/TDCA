//  This file was generated by CSLA Object Generator - CslaGenFork v4.3.0
//
// Filename:    HC_CongVanDen_Info
// ObjectType:  HC_CongVanDen_Info
// CSLAType:    EditableChild

using System;
using System.Data;
using System.Data.SqlClient;
using Csla;
using Csla.Data;
using NETLINK.LIB;
namespace ModuleHanhChinh.LIB
{

    /// <summary>
    /// HC_CongVanDen_Info (editable child object).<br/>
    /// This is a generated base class of <see cref="HC_CongVanDen_Info"/> business object.
    /// </summary>
    /// <remarks>
    /// This class is an item of <see cref="HC_CongVanDen_Coll"/> collection.
    /// </remarks>
    [Serializable]
    public partial class HC_CongVanDen_Info : BusinessBase<HC_CongVanDen_Info>
    {

        #region Static Fields

        private static int _lastID;

        #endregion

        #region Business Properties

        /// <summary>
        /// Maintains metadata about <see cref="ID"/> property.
        /// </summary>
        public static readonly PropertyInfo<int> IDProperty = RegisterProperty<int>(p => p.ID, "ID");
        /// <summary>
        /// Gets the ID.
        /// </summary>
        /// <value>The ID.</value>
        public int ID
        {
            get { return GetProperty(IDProperty); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="SoCongVan"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> SoCongVanProperty = RegisterProperty<string>(p => p.SoCongVan, "So Cong Van");
        /// <summary>
        /// Gets or sets the So Cong Van.
        /// </summary>
        /// <value>The So Cong Van.</value>
        public string SoCongVan
        {
            get { return GetProperty(SoCongVanProperty); }
            set { SetProperty(SoCongVanProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="NgayKi"/> property.
        /// </summary>
        public static readonly PropertyInfo<SmartDate> NgayKiProperty = RegisterProperty<SmartDate>(p => p.NgayKi, "Ngay Ki");
        /// <summary>
        /// Gets or sets the Ngay Ki.
        /// </summary>
        /// <value>The Ngay Ki.</value>
        public string NgayKi
        {
            get { return GetPropertyConvert<SmartDate, String>(NgayKiProperty); }
            set { SetPropertyConvert<SmartDate, String>(NgayKiProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="TieuDe"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> TieuDeProperty = RegisterProperty<string>(p => p.TieuDe, "Tieu De");
        /// <summary>
        /// Gets or sets the Tieu De.
        /// </summary>
        /// <value>The Tieu De.</value>
        public string TieuDe
        {
            get { return GetProperty(TieuDeProperty); }
            set { SetProperty(TieuDeProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="VeVanDe"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> VeVanDeProperty = RegisterProperty<string>(p => p.VeVanDe, "Ve Van De");
        /// <summary>
        /// Gets or sets the Ve Van De.
        /// </summary>
        /// <value>The Ve Van De.</value>
        public string VeVanDe
        {
            get { return GetProperty(VeVanDeProperty); }
            set { SetProperty(VeVanDeProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="LoaiCongVan"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> LoaiCongVanProperty = RegisterProperty<string>(p => p.LoaiCongVan, "Loai Cong Van");
        /// <summary>
        /// Gets or sets the Loai Cong Van.
        /// </summary>
        /// <value>The Loai Cong Van.</value>
        public string LoaiCongVan
        {
            get { return GetProperty(LoaiCongVanProperty); }
            set { SetProperty(LoaiCongVanProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="CapQuanLy"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> CapQuanLyProperty = RegisterProperty<string>(p => p.CapQuanLy, "Cap Quan Ly");
        /// <summary>
        /// Gets or sets the Cap Quan Ly.
        /// </summary>
        /// <value>The Cap Quan Ly.</value>
        public string CapQuanLy
        {
            get { return GetProperty(CapQuanLyProperty); }
            set { SetProperty(CapQuanLyProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="NoiDung"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> NoiDungProperty = RegisterProperty<string>(p => p.NoiDung, "Noi Dung");
        /// <summary>
        /// Gets or sets the Noi Dung.
        /// </summary>
        /// <value>The Noi Dung.</value>
        public string NoiDung
        {
            get { return GetProperty(NoiDungProperty); }
            set { SetProperty(NoiDungProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="NoiGui"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> NoiGuiProperty = RegisterProperty<string>(p => p.NoiGui, "Noi Gui");
        /// <summary>
        /// Gets or sets the Noi Gui.
        /// </summary>
        /// <value>The Noi Gui.</value>
        public string NoiGui
        {
            get { return GetProperty(NoiGuiProperty); }
            set { SetProperty(NoiGuiProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="NguoiNhan"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> NguoiNhanProperty = RegisterProperty<string>(p => p.NguoiNhan, "Nguoi Nhan");
        /// <summary>
        /// Gets or sets the Nguoi Nhan.
        /// </summary>
        /// <value>The Nguoi Nhan.</value>
        public string NguoiNhan
        {
            get { return GetProperty(NguoiNhanProperty); }
            set { SetProperty(NguoiNhanProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="NgayTiepNhan"/> property.
        /// </summary>
        public static readonly PropertyInfo<SmartDate> NgayTiepNhanProperty = RegisterProperty<SmartDate>(p => p.NgayTiepNhan, "Ngay Tiep Nhan");
        /// <summary>
        /// Gets or sets the Ngay Tiep Nhan.
        /// </summary>
        /// <value>The Ngay Tiep Nhan.</value>
        public string NgayTiepNhan
        {
            get { return GetPropertyConvert<SmartDate, String>(NgayTiepNhanProperty); }
            set { SetPropertyConvert<SmartDate, String>(NgayTiepNhanProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="LuuTruTai"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> LuuTruTaiProperty = RegisterProperty<string>(p => p.LuuTruTai, "Luu Tru Tai");
        /// <summary>
        /// Gets or sets the Luu Tru Tai.
        /// </summary>
        /// <value>The Luu Tru Tai.</value>
        public string LuuTruTai
        {
            get { return GetProperty(LuuTruTaiProperty); }
            set { SetProperty(LuuTruTaiProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="HuongGiaiQuyet"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> HuongGiaiQuyetProperty = RegisterProperty<string>(p => p.HuongGiaiQuyet, "Huong Giai Quyet");
        /// <summary>
        /// Gets or sets the Huong Giai Quyet.
        /// </summary>
        /// <value>The Huong Giai Quyet.</value>
        public string HuongGiaiQuyet
        {
            get { return GetProperty(HuongGiaiQuyetProperty); }
            set { SetProperty(HuongGiaiQuyetProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="GhiChu"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> GhiChuProperty = RegisterProperty<string>(p => p.GhiChu, "Ghi Chu");
        /// <summary>
        /// Gets or sets the Ghi Chu.
        /// </summary>
        /// <value>The Ghi Chu.</value>
        public string GhiChu
        {
            get { return GetProperty(GhiChuProperty); }
            set { SetProperty(GhiChuProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="LastEdited_Date"/> property.
        /// </summary>
        public static readonly PropertyInfo<SmartDate> LastEdited_DateProperty = RegisterProperty<SmartDate>(p => p.LastEdited_Date, "Last Edited Date");
        /// <summary>
        /// Gets or sets the Last Edited Date.
        /// </summary>
        /// <value>The Last Edited Date.</value>
        public string LastEdited_Date
        {
            get { return GetPropertyConvert<SmartDate, String>(LastEdited_DateProperty); }
            set { SetPropertyConvert<SmartDate, String>(LastEdited_DateProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="LastEdited_UserID"/> property.
        /// </summary>
        public static readonly PropertyInfo<Int64?> LastEdited_UserIDProperty = RegisterProperty<Int64?>(p => p.LastEdited_UserID, "Last Edited User ID");
        /// <summary>
        /// Gets or sets the Last Edited User ID.
        /// </summary>
        /// <value>The Last Edited User ID.</value>
        public Int64? LastEdited_UserID
        {
            get { return GetProperty(LastEdited_UserIDProperty); }
            set { SetProperty(LastEdited_UserIDProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="LinkFile"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> LinkFileProperty = RegisterProperty<string>(p => p.LinkFile, "Link File");
        /// <summary>
        /// Gets or sets the Link File.
        /// </summary>
        /// <value>The Link File.</value>
        public string LinkFile
        {
            get { return GetProperty(LinkFileProperty); }
            set { SetProperty(LinkFileProperty, value); }
        }
        public DateTime DateNgayKi
        {
            get { return GetProperty(NgayKiProperty); }
        }
        public DateTime DateNgayTiepNhan
        {
            get { return GetProperty(NgayTiepNhanProperty); }
        }

        #endregion

        #region Factory Methods

        /// <summary>
        /// Factory method. Creates a new <see cref="HC_CongVanDen_Info"/> object.
        /// </summary>
        /// <returns>A reference to the created <see cref="HC_CongVanDen_Info"/> object.</returns>
        internal static HC_CongVanDen_Info NewHC_CongVanDen_Info()
        {
            return DataPortal.CreateChild<HC_CongVanDen_Info>();
        }

        /// <summary>
        /// Factory method. Asynchronously creates a new <see cref="HC_CongVanDen_Info"/> object.
        /// </summary>
        /// <param name="callback">The completion callback method.</param>
        internal static void NewHC_CongVanDen_Info(EventHandler<DataPortalResult<HC_CongVanDen_Info>> callback)
        {
            DataPortal.BeginCreate<HC_CongVanDen_Info>(callback);
        }

        /// <summary>
        /// Factory method. Loads a <see cref="HC_CongVanDen_Info"/> object from the given SafeDataReader.
        /// </summary>
        /// <param name="dr">The SafeDataReader to use.</param>
        /// <returns>A reference to the fetched <see cref="HC_CongVanDen_Info"/> object.</returns>
        internal static HC_CongVanDen_Info GetHC_CongVanDen_Info(SafeDataReader dr)
        {
            HC_CongVanDen_Info obj = new HC_CongVanDen_Info();
            // show the framework that this is a child object
            obj.MarkAsChild();
            obj.Fetch(dr);
            obj.MarkOld();
            // check all object rules and property rules
            obj.BusinessRules.CheckRules();
            return obj;
        }

        #endregion

        #region Constructor

        /// <summary>
        /// Initializes a new instance of the <see cref="HC_CongVanDen_Info"/> class.
        /// </summary>
        /// <remarks> Do not use to create a Csla object. Use factory methods instead.</remarks>
        private HC_CongVanDen_Info()
        {
            // Prevent direct creation

            // show the framework that this is a child object
            MarkAsChild();
        }

        #endregion

        #region Data Access

        /// <summary>
        /// Loads default values for the <see cref="HC_CongVanDen_Info"/> object properties.
        /// </summary>
        [Csla.RunLocal]
        protected override void Child_Create()
        {
            LoadProperty(IDProperty, System.Threading.Interlocked.Decrement(ref _lastID));
            LoadProperty(SoCongVanProperty, null);
            LoadProperty(NgayKiProperty, null);
            LoadProperty(TieuDeProperty, null);
            LoadProperty(VeVanDeProperty, null);
            LoadProperty(LoaiCongVanProperty, null);
            LoadProperty(CapQuanLyProperty, null);
            LoadProperty(NoiDungProperty, null);
            LoadProperty(NoiGuiProperty, null);
            LoadProperty(NguoiNhanProperty, null);
            LoadProperty(NgayTiepNhanProperty, null);
            LoadProperty(LuuTruTaiProperty, null);
            LoadProperty(HuongGiaiQuyetProperty, null);
            LoadProperty(GhiChuProperty, null);
            LoadProperty(LastEdited_DateProperty, null);
            LoadProperty(LinkFileProperty, null);
            var args = new DataPortalHookArgs();
            OnCreate(args);
            base.Child_Create();
        }

        /// <summary>
        /// Loads a <see cref="HC_CongVanDen_Info"/> object from the given SafeDataReader.
        /// </summary>
        /// <param name="dr">The SafeDataReader to use.</param>
        private void Fetch(SafeDataReader dr)
        {
            // Value properties
            LoadProperty(IDProperty, dr.GetInt32("ID"));
            LoadProperty(SoCongVanProperty, dr.GetString("SoCongVan"));
            LoadProperty(NgayKiProperty, dr.GetDateTime("NgayKi"));
            LoadProperty(TieuDeProperty, dr.GetString("TieuDe"));
            LoadProperty(VeVanDeProperty, dr.GetString("VeVanDe"));
            LoadProperty(LoaiCongVanProperty, dr.GetString("LoaiCongVan"));
            LoadProperty(CapQuanLyProperty, dr.GetString("CapQuanLy"));
            LoadProperty(NoiDungProperty, dr.GetString("NoiDung"));
            LoadProperty(NoiGuiProperty, dr.GetString("NoiGui"));
            LoadProperty(NguoiNhanProperty, dr.GetString("NguoiNhan"));
            LoadProperty(NgayTiepNhanProperty, dr.GetDateTime("NgayTiepNhan"));
            LoadProperty(LuuTruTaiProperty, dr.GetString("LuuTruTai"));
            LoadProperty(HuongGiaiQuyetProperty, dr.GetString("HuongGiaiQuyet"));
            LoadProperty(GhiChuProperty, dr.GetString("GhiChu"));
    LoadProperty(LastEdited_UserIDProperty, dr.GetInt64("LastEdited_UserID"));
 
            var args = new DataPortalHookArgs(dr);
            OnFetchRead(args);
        }

        /// <summary>
        /// Inserts a new <see cref="HC_CongVanDen_Info"/> object in the database.
        /// </summary>
        private void Child_Insert()
        {
            using (var ctx = TransactionManager<SqlConnection, SqlTransaction>.GetManager("Connection"))
            {
                using (var cmd = new SqlCommand("dbo.HC_CongVanDen_Info_add", ctx.Connection))
                {
                    cmd.Transaction = ctx.Transaction;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@ID", ReadProperty(IDProperty)).Direction = ParameterDirection.Output;
                    cmd.Parameters.AddWithValue("@SoCongVan", ReadProperty(SoCongVanProperty) == null ? (object)DBNull.Value : ReadProperty(SoCongVanProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@NgayKi", ReadProperty(NgayKiProperty).DBValue).DbType = DbType.DateTime;
                    cmd.Parameters.AddWithValue("@TieuDe", ReadProperty(TieuDeProperty) == null ? (object)DBNull.Value : ReadProperty(TieuDeProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@VeVanDe", ReadProperty(VeVanDeProperty) == null ? (object)DBNull.Value : ReadProperty(VeVanDeProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@LoaiCongVan", ReadProperty(LoaiCongVanProperty) == null ? (object)DBNull.Value : ReadProperty(LoaiCongVanProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@CapQuanLy", ReadProperty(CapQuanLyProperty) == null ? (object)DBNull.Value : ReadProperty(CapQuanLyProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@NoiDung", ReadProperty(NoiDungProperty) == null ? (object)DBNull.Value : ReadProperty(NoiDungProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@NoiGui", ReadProperty(NoiGuiProperty) == null ? (object)DBNull.Value : ReadProperty(NoiGuiProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@NguoiNhan", ReadProperty(NguoiNhanProperty) == null ? (object)DBNull.Value : ReadProperty(NguoiNhanProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@NgayTiepNhan", ReadProperty(NgayTiepNhanProperty).DBValue).DbType = DbType.DateTime;
                    cmd.Parameters.AddWithValue("@LuuTruTai", ReadProperty(LuuTruTaiProperty) == null ? (object)DBNull.Value : ReadProperty(LuuTruTaiProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@HuongGiaiQuyet", ReadProperty(HuongGiaiQuyetProperty) == null ? (object)DBNull.Value : ReadProperty(HuongGiaiQuyetProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@GhiChu", ReadProperty(GhiChuProperty) == null ? (object)DBNull.Value : ReadProperty(GhiChuProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@LastEdited_Date", ReadProperty(LastEdited_DateProperty).DBValue).DbType = DbType.DateTime;
                    cmd.Parameters.AddWithValue("@LastEdited_UserID", ReadProperty(LastEdited_UserIDProperty) == null ? (object)DBNull.Value : ReadProperty(LastEdited_UserIDProperty).Value).DbType = DbType.Int64;
                    cmd.Parameters.AddWithValue("@LinkFile", ReadProperty(LinkFileProperty) == null ? (object)DBNull.Value : ReadProperty(LinkFileProperty)).DbType = DbType.String;
                    var args = new DataPortalHookArgs(cmd);
                    OnInsertPre(args);
                    cmd.ExecuteNonQuery();
                    OnInsertPost(args);
                    LoadProperty(IDProperty, (int) cmd.Parameters["@ID"].Value);
                }
            }
        }

        /// <summary>
        /// Updates in the database all changes made to the <see cref="HC_CongVanDen_Info"/> object.
        /// </summary>
        private void Child_Update()
        {
            if (!IsDirty)
                return;

            using (var ctx = TransactionManager<SqlConnection, SqlTransaction>.GetManager("Connection"))
            {
                using (var cmd = new SqlCommand("dbo.HC_CongVanDen_Info_update", ctx.Connection))
                {
                    cmd.Transaction = ctx.Transaction;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@ID", ReadProperty(IDProperty)).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@SoCongVan", ReadProperty(SoCongVanProperty) == null ? (object)DBNull.Value : ReadProperty(SoCongVanProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@NgayKi", ReadProperty(NgayKiProperty).DBValue).DbType = DbType.DateTime;
                    cmd.Parameters.AddWithValue("@TieuDe", ReadProperty(TieuDeProperty) == null ? (object)DBNull.Value : ReadProperty(TieuDeProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@VeVanDe", ReadProperty(VeVanDeProperty) == null ? (object)DBNull.Value : ReadProperty(VeVanDeProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@LoaiCongVan", ReadProperty(LoaiCongVanProperty) == null ? (object)DBNull.Value : ReadProperty(LoaiCongVanProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@CapQuanLy", ReadProperty(CapQuanLyProperty) == null ? (object)DBNull.Value : ReadProperty(CapQuanLyProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@NoiDung", ReadProperty(NoiDungProperty) == null ? (object)DBNull.Value : ReadProperty(NoiDungProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@NoiGui", ReadProperty(NoiGuiProperty) == null ? (object)DBNull.Value : ReadProperty(NoiGuiProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@NguoiNhan", ReadProperty(NguoiNhanProperty) == null ? (object)DBNull.Value : ReadProperty(NguoiNhanProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@NgayTiepNhan", ReadProperty(NgayTiepNhanProperty).DBValue).DbType = DbType.DateTime;
                    cmd.Parameters.AddWithValue("@LuuTruTai", ReadProperty(LuuTruTaiProperty) == null ? (object)DBNull.Value : ReadProperty(LuuTruTaiProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@HuongGiaiQuyet", ReadProperty(HuongGiaiQuyetProperty) == null ? (object)DBNull.Value : ReadProperty(HuongGiaiQuyetProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@GhiChu", ReadProperty(GhiChuProperty) == null ? (object)DBNull.Value : ReadProperty(GhiChuProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@LastEdited_Date", ReadProperty(LastEdited_DateProperty).DBValue).DbType = DbType.DateTime;
                    cmd.Parameters.AddWithValue("@LastEdited_UserID", ReadProperty(LastEdited_UserIDProperty) == null ? (object)DBNull.Value : ReadProperty(LastEdited_UserIDProperty).Value).DbType = DbType.Int64;
                    cmd.Parameters.AddWithValue("@LinkFile", ReadProperty(LinkFileProperty) == null ? (object)DBNull.Value : ReadProperty(LinkFileProperty)).DbType = DbType.String;
                    var args = new DataPortalHookArgs(cmd);
                    OnUpdatePre(args);
                    cmd.ExecuteNonQuery();
                    OnUpdatePost(args);
                }
            }
        }

        /// <summary>
        /// Self deletes the <see cref="HC_CongVanDen_Info"/> object from database.
        /// </summary>
        private void Child_DeleteSelf()
        {
            using (var ctx = TransactionManager<SqlConnection, SqlTransaction>.GetManager("Connection"))
            {
                using (var cmd = new SqlCommand("dbo.HC_CongVanDen_Info_delete", ctx.Connection))
                {
                    cmd.Transaction = ctx.Transaction;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@ID", ReadProperty(IDProperty)).DbType = DbType.Int32;
                    var args = new DataPortalHookArgs(cmd);
                    OnDeletePre(args);
                    cmd.ExecuteNonQuery();
                    OnDeletePost(args);
                }
            }
        }

        #endregion

        #region Pseudo Events

        /// <summary>
        /// Occurs after setting all defaults for object creation.
        /// </summary>
        partial void OnCreate(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Delete, after setting query parameters and before the delete operation.
        /// </summary>
        partial void OnDeletePre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Delete, after the delete operation, before Commit().
        /// </summary>
        partial void OnDeletePost(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after setting query parameters and before the fetch operation.
        /// </summary>
        partial void OnFetchPre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after the fetch operation (object or collection is fully loaded and set up).
        /// </summary>
        partial void OnFetchPost(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after the low level fetch operation, before the data reader is destroyed.
        /// </summary>
        partial void OnFetchRead(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after setting query parameters and before the update operation.
        /// </summary>
        partial void OnUpdatePre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Insert, after the update operation, before setting back row identifiers (RowVersion) and Commit().
        /// </summary>
        partial void OnUpdatePost(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Insert, after setting query parameters and before the insert operation.
        /// </summary>
        partial void OnInsertPre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Insert, after the insert operation, before setting back row identifiers (ID and RowVersion) and Commit().
        /// </summary>
        partial void OnInsertPost(DataPortalHookArgs args);

        #endregion

    }
}
