//  This file was generated by CSLA Object Generator - CslaGenFork v4.3.0
//
// Filename:    HC_NhanVien_ChamCong_Info
// ObjectType:  HC_NhanVien_ChamCong_Info
// CSLAType:    EditableChild

using System;
using System.Data;
using System.Data.SqlClient;
using Csla;
using Csla.Data;
using NETLINK.LIB;

namespace ModuleHanhChinh.LIB
{

    /// <summary>
    /// HC_NhanVien_ChamCong_Info (editable child object).<br/>
    /// This is a generated base class of <see cref="HC_NhanVien_ChamCong_Info"/> business object.
    /// </summary>
    /// <remarks>
    /// This class is an item of <see cref="HC_NhanVien_ChamCong_Coll"/> collection.
    /// </remarks>
    [Serializable]
    public partial class HC_NhanVien_ChamCong_Info : BusinessBase<HC_NhanVien_ChamCong_Info>
    {

        #region Static Fields

        private static int _lastID;

        #endregion

        #region Business Properties

        /// <summary>
        /// Maintains metadata about <see cref="Id"/> property.
        /// </summary>
        public static readonly PropertyInfo<int> IdProperty = RegisterProperty<int>(p => p.Id, "Id");
        /// <summary>
        /// Gets the Id.
        /// </summary>
        /// <value>The Id.</value>
        public int Id
        {
            get { return GetProperty(IdProperty); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="Ngay"/> property.
        /// </summary>
        public static readonly PropertyInfo<SmartDate> NgayProperty = RegisterProperty<SmartDate>(p => p.Ngay, "Ngay");
        /// <summary>
        /// Gets or sets the Ngay.
        /// </summary>
        /// <value>The Ngay.</value>
        public SmartDate Ngay
        {
            get { return GetProperty(NgayProperty); }
            set { SetProperty(NgayProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="Thu"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> ThuProperty = RegisterProperty<string>(p => p.Thu, "Thu");
        /// <summary>
        /// Gets or sets the Thu.
        /// </summary>
        /// <value>The Thu.</value>
        public string Thu
        {
            get { return GetProperty(ThuProperty); }
            set { SetProperty(ThuProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="Vao1"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> Vao1Property = RegisterProperty<string>(p => p.Vao1, "Vao1");
        /// <summary>
        /// Gets or sets the Vao1.
        /// </summary>
        /// <value>The Vao1.</value>
        public string Vao1
        {
            get { return GetProperty(Vao1Property); }
            set { SetProperty(Vao1Property, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="Ra1"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> Ra1Property = RegisterProperty<string>(p => p.Ra1, "Ra1");
        /// <summary>
        /// Gets or sets the Ra1.
        /// </summary>
        /// <value>The Ra1.</value>
        public string Ra1
        {
            get { return GetProperty(Ra1Property); }
            set { SetProperty(Ra1Property, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="Vao2"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> Vao2Property = RegisterProperty<string>(p => p.Vao2, "Vao2");
        /// <summary>
        /// Gets or sets the Vao2.
        /// </summary>
        /// <value>The Vao2.</value>
        public string Vao2
        {
            get { return GetProperty(Vao2Property); }
            set { SetProperty(Vao2Property, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="Ra2"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> Ra2Property = RegisterProperty<string>(p => p.Ra2, "Ra2");
        /// <summary>
        /// Gets or sets the Ra2.
        /// </summary>
        /// <value>The Ra2.</value>
        public string Ra2
        {
            get { return GetProperty(Ra2Property); }
            set { SetProperty(Ra2Property, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="Vao3"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> Vao3Property = RegisterProperty<string>(p => p.Vao3, "Vao3");
        /// <summary>
        /// Gets or sets the Vao3.
        /// </summary>
        /// <value>The Vao3.</value>
        public string Vao3
        {
            get { return GetProperty(Vao3Property); }
            set { SetProperty(Vao3Property, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="Ra3"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> Ra3Property = RegisterProperty<string>(p => p.Ra3, "Ra3");
        /// <summary>
        /// Gets or sets the Ra3.
        /// </summary>
        /// <value>The Ra3.</value>
        public string Ra3
        {
            get { return GetProperty(Ra3Property); }
            set { SetProperty(Ra3Property, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="Tre"/> property.
        /// </summary>
        public static readonly PropertyInfo<int?> TreProperty = RegisterProperty<int?>(p => p.Tre, "Tre");
        /// <summary>
        /// Gets or sets the Tre.
        /// </summary>
        /// <value>The Tre.</value>
        public int? Tre
        {
            get { return GetProperty(TreProperty); }
            set { SetProperty(TreProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="Som"/> property.
        /// </summary>
        public static readonly PropertyInfo<int?> SomProperty = RegisterProperty<int?>(p => p.Som, "Som");
        /// <summary>
        /// Gets or sets the Som.
        /// </summary>
        /// <value>The Som.</value>
        public int? Som
        {
            get { return GetProperty(SomProperty); }
            set { SetProperty(SomProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="VeTre"/> property.
        /// </summary>
        public static readonly PropertyInfo<int?> VeTreProperty = RegisterProperty<int?>(p => p.VeTre, "Ve Tre");
        /// <summary>
        /// Gets or sets the Ve Tre.
        /// </summary>
        /// <value>The Ve Tre.</value>
        public int? VeTre
        {
            get { return GetProperty(VeTreProperty); }
            set { SetProperty(VeTreProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="TongGio"/> property.
        /// </summary>
        public static readonly PropertyInfo<Double?> TongGioProperty = RegisterProperty<Double?>(p => p.TongGio, "Tong Gio");
        /// <summary>
        /// Gets or sets the Tong Gio.
        /// </summary>
        /// <value>The Tong Gio.</value>
        public Double? TongGio
        {
            get { return GetProperty(TongGioProperty); }
            set { SetProperty(TongGioProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="Cong"/> property.
        /// </summary>
        public static readonly PropertyInfo<Double?> CongProperty = RegisterProperty<Double?>(p => p.Cong, "Cong");
        /// <summary>
        /// Gets or sets the Cong.
        /// </summary>
        /// <value>The Cong.</value>
        public Double? Cong
        {
            get { return GetProperty(CongProperty); }
            set { SetProperty(CongProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="TCA1"/> property.
        /// </summary>
        public static readonly PropertyInfo<Double?> TCA1Property = RegisterProperty<Double?>(p => p.TCA1, "TCA1");
        /// <summary>
        /// Gets or sets the TCA1.
        /// </summary>
        /// <value>The TCA1.</value>
        public Double? TCA1
        {
            get { return GetProperty(TCA1Property); }
            set { SetProperty(TCA1Property, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="TCA2"/> property.
        /// </summary>
        public static readonly PropertyInfo<Double?> TCA2Property = RegisterProperty<Double?>(p => p.TCA2, "TCA2");
        /// <summary>
        /// Gets or sets the TCA2.
        /// </summary>
        /// <value>The TCA2.</value>
        public Double? TCA2
        {
            get { return GetProperty(TCA2Property); }
            set { SetProperty(TCA2Property, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="KyHieu"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> KyHieuProperty = RegisterProperty<string>(p => p.KyHieu, "Ky Hieu");
        /// <summary>
        /// Gets or sets the Ky Hieu.
        /// </summary>
        /// <value>The Ky Hieu.</value>
        public string KyHieu
        {
            get { return GetProperty(KyHieuProperty); }
            set { SetProperty(KyHieuProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="Thu"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> MaNhanVienProperty = RegisterProperty<string>(p => p.MaNhanVien, "MaNhanVien");
        /// <summary>
        /// Gets or sets the Thu.
        /// </summary>
        /// <value>The Thu.</value>
        public string MaNhanVien
        {
            get { return GetProperty(MaNhanVienProperty); }
            set { SetProperty(MaNhanVienProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="Thu"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> TenNhanVienProperty = RegisterProperty<string>(p => p.TenNhanVien, "TenNhanVien");
        /// <summary>
        /// Gets or sets the Thu.
        /// </summary>
        /// <value>The Thu.</value>
        public string TenNhanVien
        {
            get { return GetProperty(TenNhanVienProperty); }
            set { SetProperty(TenNhanVienProperty, value); }
        }

        #endregion

        #region Factory Methods

        /// <summary>
        /// Factory method. Creates a new <see cref="HC_NhanVien_ChamCong_Info"/> object.
        /// </summary>
        /// <returns>A reference to the created <see cref="HC_NhanVien_ChamCong_Info"/> object.</returns>
        internal static HC_NhanVien_ChamCong_Info NewHC_NhanVien_ChamCong_Info()
        {
            return DataPortal.CreateChild<HC_NhanVien_ChamCong_Info>();
        }

        /// <summary>
        /// Factory method. Asynchronously creates a new <see cref="HC_NhanVien_ChamCong_Info"/> object.
        /// </summary>
        /// <param name="callback">The completion callback method.</param>
        internal static void NewHC_NhanVien_ChamCong_Info(EventHandler<DataPortalResult<HC_NhanVien_ChamCong_Info>> callback)
        {
            DataPortal.BeginCreate<HC_NhanVien_ChamCong_Info>(callback);
        }

        /// <summary>
        /// Factory method. Loads a <see cref="HC_NhanVien_ChamCong_Info"/> object from the given SafeDataReader.
        /// </summary>
        /// <param name="dr">The SafeDataReader to use.</param>
        /// <returns>A reference to the fetched <see cref="HC_NhanVien_ChamCong_Info"/> object.</returns>
        internal static HC_NhanVien_ChamCong_Info GetHC_NhanVien_ChamCong_Info(SafeDataReader dr)
        {
            HC_NhanVien_ChamCong_Info obj = new HC_NhanVien_ChamCong_Info();
            // show the framework that this is a child object
            obj.MarkAsChild();
            obj.Fetch(dr);
            obj.MarkOld();
            // check all object rules and property rules
            obj.BusinessRules.CheckRules();
            return obj;
        }

        #endregion

        #region Constructor

        /// <summary>
        /// Initializes a new instance of the <see cref="HC_NhanVien_ChamCong_Info"/> class.
        /// </summary>
        /// <remarks> Do not use to create a Csla object. Use factory methods instead.</remarks>
        private HC_NhanVien_ChamCong_Info()
        {
            // Prevent direct creation

            // show the framework that this is a child object
            MarkAsChild();
        }

        #endregion

        #region Data Access

        /// <summary>
        /// Loads default values for the <see cref="HC_NhanVien_ChamCong_Info"/> object properties.
        /// </summary>
        [Csla.RunLocal]
        protected override void Child_Create()
        {
            LoadProperty(IdProperty, System.Threading.Interlocked.Decrement(ref _lastID));
            LoadProperty(Vao1Property, null);
            LoadProperty(Ra1Property, null);
            LoadProperty(Vao2Property, null);
            LoadProperty(Ra2Property, null);
            LoadProperty(Vao3Property, null);
            LoadProperty(Ra3Property, null);
            LoadProperty(KyHieuProperty, null);
            LoadProperty(MaNhanVienProperty, null);
            LoadProperty(TenNhanVienProperty, null);
            var args = new DataPortalHookArgs();
            OnCreate(args);
            base.Child_Create();
        }

        /// <summary>
        /// Loads a <see cref="HC_NhanVien_ChamCong_Info"/> object from the given SafeDataReader.
        /// </summary>
        /// <param name="dr">The SafeDataReader to use.</param>
        private void Fetch(SafeDataReader dr)
        {
            // Value properties
            LoadProperty(IdProperty, dr.GetInt32("Id"));
            LoadProperty(NgayProperty, dr.GetDateTime("Ngay"));
            LoadProperty(ThuProperty, dr.GetString("Thu"));
            LoadProperty(Vao1Property, dr.GetString("Vao1"));
            LoadProperty(Ra1Property, dr.GetString("Ra1"));
            LoadProperty(Vao2Property, dr.GetString("Vao2"));
            LoadProperty(Ra2Property, dr.GetString("Ra2"));
            LoadProperty(Vao3Property, dr.GetString("Vao3"));
            LoadProperty(Ra3Property, dr.GetString("Ra3"));
            LoadProperty(TreProperty, dr.GetInt32("Tre"));
            LoadProperty(SomProperty, dr.GetInt32("Som"));
            LoadProperty(VeTreProperty, dr.GetInt32("VeTre"));
            LoadProperty(TongGioProperty, dr.GetDouble("TongGio"));
            LoadProperty(CongProperty, dr.GetDouble("Cong"));
            LoadProperty(TCA1Property, dr.GetDouble("TCA1"));
            LoadProperty(TCA2Property, dr.GetDouble("TCA2"));
            LoadProperty(KyHieuProperty, dr.GetString("KyHieu"));
            LoadProperty(MaNhanVienProperty, dr.GetString("MaNhanVien"));
            var args = new DataPortalHookArgs(dr);
            OnFetchRead(args);
        }

        /// <summary>
        /// Inserts a new <see cref="HC_NhanVien_ChamCong_Info"/> object in the database.
        /// </summary>
        private void Child_Insert()
        {
            using (var ctx = TransactionManager<SqlConnection, SqlTransaction>.GetManager("Connection"))
            {
                using (var cmd = new SqlCommand("dbo.HC_NhanVien_ChamCong_Info_add", ctx.Connection))
                {
                    cmd.Transaction = ctx.Transaction;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@Id", ReadProperty(IdProperty)).Direction = ParameterDirection.Output;
                    cmd.Parameters.AddWithValue("@Ngay", ReadProperty(NgayProperty).DBValue).DbType = DbType.DateTime;
                    cmd.Parameters.AddWithValue("@Thu", ReadProperty(ThuProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@Vao1", ReadProperty(Vao1Property) == null ? (object)DBNull.Value : ReadProperty(Vao1Property)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@Ra1", ReadProperty(Ra1Property) == null ? (object)DBNull.Value : ReadProperty(Ra1Property)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@Vao2", ReadProperty(Vao2Property) == null ? (object)DBNull.Value : ReadProperty(Vao2Property)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@Ra2", ReadProperty(Ra2Property) == null ? (object)DBNull.Value : ReadProperty(Ra2Property)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@Vao3", ReadProperty(Vao3Property) == null ? (object)DBNull.Value : ReadProperty(Vao3Property)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@Ra3", ReadProperty(Ra3Property) == null ? (object)DBNull.Value : ReadProperty(Ra3Property)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@Tre", ReadProperty(TreProperty) == null ? (object)DBNull.Value : ReadProperty(TreProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@Som", ReadProperty(SomProperty) == null ? (object)DBNull.Value : ReadProperty(SomProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@VeTre", ReadProperty(VeTreProperty) == null ? (object)DBNull.Value : ReadProperty(VeTreProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@TongGio", ReadProperty(TongGioProperty) == null ? (object)DBNull.Value : ReadProperty(TongGioProperty).Value).DbType = DbType.Double;
                    cmd.Parameters.AddWithValue("@Cong", ReadProperty(CongProperty) == null ? (object)DBNull.Value : ReadProperty(CongProperty).Value).DbType = DbType.Double;
                    cmd.Parameters.AddWithValue("@TCA1", ReadProperty(TCA1Property) == null ? (object)DBNull.Value : ReadProperty(TCA1Property).Value).DbType = DbType.Double;
                    cmd.Parameters.AddWithValue("@TCA2", ReadProperty(TCA2Property) == null ? (object)DBNull.Value : ReadProperty(TCA2Property).Value).DbType = DbType.Double;
                    cmd.Parameters.AddWithValue("@KyHieu", ReadProperty(KyHieuProperty) == null ? (object)DBNull.Value : ReadProperty(KyHieuProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@MaNhanVien", ReadProperty(MaNhanVienProperty) == null ? (object)DBNull.Value : ReadProperty(MaNhanVienProperty)).DbType = DbType.String;
                    var args = new DataPortalHookArgs(cmd);
                    OnInsertPre(args);
                    cmd.ExecuteNonQuery();
                    OnInsertPost(args);
                    LoadProperty(IdProperty, (int) cmd.Parameters["@Id"].Value);
                }
            }
        }

        /// <summary>
        /// Updates in the database all changes made to the <see cref="HC_NhanVien_ChamCong_Info"/> object.
        /// </summary>
        private void Child_Update()
        {
            if (!IsDirty)
                return;

            using (var ctx = TransactionManager<SqlConnection, SqlTransaction>.GetManager("Connection"))
            {
                using (var cmd = new SqlCommand("dbo.HC_NhanVien_ChamCong_Info_update", ctx.Connection))
                {
                    cmd.Transaction = ctx.Transaction;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@Id", ReadProperty(IdProperty)).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@Ngay", ReadProperty(NgayProperty).DBValue).DbType = DbType.DateTime;
                    cmd.Parameters.AddWithValue("@Thu", ReadProperty(ThuProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@Vao1", ReadProperty(Vao1Property) == null ? (object)DBNull.Value : ReadProperty(Vao1Property)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@Ra1", ReadProperty(Ra1Property) == null ? (object)DBNull.Value : ReadProperty(Ra1Property)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@Vao2", ReadProperty(Vao2Property) == null ? (object)DBNull.Value : ReadProperty(Vao2Property)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@Ra2", ReadProperty(Ra2Property) == null ? (object)DBNull.Value : ReadProperty(Ra2Property)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@Vao3", ReadProperty(Vao3Property) == null ? (object)DBNull.Value : ReadProperty(Vao3Property)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@Ra3", ReadProperty(Ra3Property) == null ? (object)DBNull.Value : ReadProperty(Ra3Property)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@Tre", ReadProperty(TreProperty) == null ? (object)DBNull.Value : ReadProperty(TreProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@Som", ReadProperty(SomProperty) == null ? (object)DBNull.Value : ReadProperty(SomProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@VeTre", ReadProperty(VeTreProperty) == null ? (object)DBNull.Value : ReadProperty(VeTreProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@TongGio", ReadProperty(TongGioProperty) == null ? (object)DBNull.Value : ReadProperty(TongGioProperty).Value).DbType = DbType.Double;
                    cmd.Parameters.AddWithValue("@Cong", ReadProperty(CongProperty) == null ? (object)DBNull.Value : ReadProperty(CongProperty).Value).DbType = DbType.Double;
                    cmd.Parameters.AddWithValue("@TCA1", ReadProperty(TCA1Property) == null ? (object)DBNull.Value : ReadProperty(TCA1Property).Value).DbType = DbType.Double;
                    cmd.Parameters.AddWithValue("@TCA2", ReadProperty(TCA2Property) == null ? (object)DBNull.Value : ReadProperty(TCA2Property).Value).DbType = DbType.Double;
                    cmd.Parameters.AddWithValue("@KyHieu", ReadProperty(KyHieuProperty) == null ? (object)DBNull.Value : ReadProperty(KyHieuProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@MaNhanVien", ReadProperty(MaNhanVienProperty) == null ? (object)DBNull.Value : ReadProperty(MaNhanVienProperty)).DbType = DbType.String;
                    var args = new DataPortalHookArgs(cmd);
                    OnUpdatePre(args);
                    cmd.ExecuteNonQuery();
                    OnUpdatePost(args);
                }
            }
        }

        /// <summary>
        /// Self deletes the <see cref="HC_NhanVien_ChamCong_Info"/> object from database.
        /// </summary>
        private void Child_DeleteSelf()
        {
            using (var ctx = TransactionManager<SqlConnection, SqlTransaction>.GetManager("Connection"))
            {
                using (var cmd = new SqlCommand("dbo.HC_NhanVien_ChamCong_Info_delete", ctx.Connection))
                {
                    cmd.Transaction = ctx.Transaction;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@Id", ReadProperty(IdProperty)).DbType = DbType.Int32;
                    var args = new DataPortalHookArgs(cmd);
                    OnDeletePre(args);
                    cmd.ExecuteNonQuery();
                    OnDeletePost(args);
                }
            }
        }

        #endregion

        #region Pseudo Events

        /// <summary>
        /// Occurs after setting all defaults for object creation.
        /// </summary>
        partial void OnCreate(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Delete, after setting query parameters and before the delete operation.
        /// </summary>
        partial void OnDeletePre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Delete, after the delete operation, before Commit().
        /// </summary>
        partial void OnDeletePost(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after setting query parameters and before the fetch operation.
        /// </summary>
        partial void OnFetchPre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after the fetch operation (object or collection is fully loaded and set up).
        /// </summary>
        partial void OnFetchPost(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after the low level fetch operation, before the data reader is destroyed.
        /// </summary>
        partial void OnFetchRead(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after setting query parameters and before the update operation.
        /// </summary>
        partial void OnUpdatePre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Insert, after the update operation, before setting back row identifiers (RowVersion) and Commit().
        /// </summary>
        partial void OnUpdatePost(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Insert, after setting query parameters and before the insert operation.
        /// </summary>
        partial void OnInsertPre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Insert, after the insert operation, before setting back row identifiers (ID and RowVersion) and Commit().
        /// </summary>
        partial void OnInsertPost(DataPortalHookArgs args);

        #endregion

    }
}
