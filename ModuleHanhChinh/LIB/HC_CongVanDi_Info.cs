//  This file was generated by CSLA Object Generator - CslaGenFork v4.3.0
//
// Filename:    HC_CongVanDi_Info
// ObjectType:  HC_CongVanDi_Info
// CSLAType:    EditableChild

using System;
using System.Data;
using System.Data.SqlClient;
using Csla;
using Csla.Data;
using NETLINK.LIB;
namespace ModuleHanhChinh.LIB
{

    /// <summary>
    /// HC_CongVanDi_Info (editable child object).<br/>
    /// This is a generated base class of <see cref="HC_CongVanDi_Info"/> business object.
    /// </summary>
    /// <remarks>
    /// This class is an item of <see cref="HC_CongVanDi_Coll"/> collection.
    /// </remarks>
    [Serializable]
    public partial class HC_CongVanDi_Info : BusinessBase<HC_CongVanDi_Info>
    {

        #region Static Fields

        private static int _lastID;

        #endregion

        #region Business Properties

        /// <summary>
        /// Maintains metadata about <see cref="ID"/> property.
        /// </summary>
        public static readonly PropertyInfo<int> IDProperty = RegisterProperty<int>(p => p.ID, "ID");
        /// <summary>
        /// Gets the ID.
        /// </summary>
        /// <value>The ID.</value>
        public int ID
        {
            get { return GetProperty(IDProperty); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="SoCongVan"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> SoCongVanProperty = RegisterProperty<string>(p => p.SoCongVan, "So Cong Van");
        /// <summary>
        /// Gets or sets the So Cong Van.
        /// </summary>
        /// <value>The So Cong Van.</value>
        public string SoCongVan
        {
            get { return GetProperty(SoCongVanProperty); }
            set { SetProperty(SoCongVanProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="NgayKi"/> property.
        /// </summary>
        public static readonly PropertyInfo<SmartDate> NgayKiProperty = RegisterProperty<SmartDate>(p => p.NgayKi, "Ngay Ki");
        /// <summary>
        /// Gets or sets the Ngay Ki.
        /// </summary>
        /// <value>The Ngay Ki.</value>
        public string NgayKi
        {
            get { return GetPropertyConvert<SmartDate, String>(NgayKiProperty); }
            set { SetPropertyConvert<SmartDate, String>(NgayKiProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="TieuDe"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> TieuDeProperty = RegisterProperty<string>(p => p.TieuDe, "Tieu De");
        /// <summary>
        /// Gets or sets the Tieu De.
        /// </summary>
        /// <value>The Tieu De.</value>
        public string TieuDe
        {
            get { return GetProperty(TieuDeProperty); }
            set { SetProperty(TieuDeProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="VeVanDe"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> VeVanDeProperty = RegisterProperty<string>(p => p.VeVanDe, "Ve Van De");
        /// <summary>
        /// Gets or sets the Ve Van De.
        /// </summary>
        /// <value>The Ve Van De.</value>
        public string VeVanDe
        {
            get { return GetProperty(VeVanDeProperty); }
            set { SetProperty(VeVanDeProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="LoaiCongVan"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> LoaiCongVanProperty = RegisterProperty<string>(p => p.LoaiCongVan, "Loai Cong Van");
        /// <summary>
        /// Gets or sets the Loai Cong Van.
        /// </summary>
        /// <value>The Loai Cong Van.</value>
        public string LoaiCongVan
        {
            get { return GetProperty(LoaiCongVanProperty); }
            set { SetProperty(LoaiCongVanProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="CapQuanLy"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> CapQuanLyProperty = RegisterProperty<string>(p => p.CapQuanLy, "Cap Quan Ly");
        /// <summary>
        /// Gets or sets the Cap Quan Ly.
        /// </summary>
        /// <value>The Cap Quan Ly.</value>
        public string CapQuanLy
        {
            get { return GetProperty(CapQuanLyProperty); }
            set { SetProperty(CapQuanLyProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="NoiDung"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> NoiDungProperty = RegisterProperty<string>(p => p.NoiDung, "Noi Dung");
        /// <summary>
        /// Gets or sets the Noi Dung.
        /// </summary>
        /// <value>The Noi Dung.</value>
        public string NoiDung
        {
            get { return GetProperty(NoiDungProperty); }
            set { SetProperty(NoiDungProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="NoiGui"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> NoiGuiProperty = RegisterProperty<string>(p => p.NoiGui, "Noi Gui");
        /// <summary>
        /// Gets or sets the Noi Gui.
        /// </summary>
        /// <value>The Noi Gui.</value>
        public string NoiGui
        {
            get { return GetProperty(NoiGuiProperty); }
            set { SetProperty(NoiGuiProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="NguoiGui"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> NguoiGuiProperty = RegisterProperty<string>(p => p.NguoiGui, "Nguoi Gui");
        /// <summary>
        /// Gets or sets the Nguoi Gui.
        /// </summary>
        /// <value>The Nguoi Gui.</value>
        public string NguoiGui
        {
            get { return GetProperty(NguoiGuiProperty); }
            set { SetProperty(NguoiGuiProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="NgayGui"/> property.
        /// </summary>
        public static readonly PropertyInfo<SmartDate> NgayGuiProperty = RegisterProperty<SmartDate>(p => p.NgayGui, "Ngay Gui");
        /// <summary>
        /// Gets or sets the Ngay Gui.
        /// </summary>
        /// <value>The Ngay Gui.</value>
        public string NgayGui
        {
            get { return GetPropertyConvert<SmartDate, String>(NgayGuiProperty); }
            set { SetPropertyConvert<SmartDate, String>(NgayGuiProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="LuuTruTai"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> LuuTruTaiProperty = RegisterProperty<string>(p => p.LuuTruTai, "Luu Tru Tai");
        /// <summary>
        /// Gets or sets the Luu Tru Tai.
        /// </summary>
        /// <value>The Luu Tru Tai.</value>
        public string LuuTruTai
        {
            get { return GetProperty(LuuTruTaiProperty); }
            set { SetProperty(LuuTruTaiProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="LinkFile"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> LinkFileProperty = RegisterProperty<string>(p => p.LinkFile, "Link File");
        /// <summary>
        /// Gets or sets the Link File.
        /// </summary>
        /// <value>The Link File.</value>
        public string LinkFile
        {
            get { return GetProperty(LinkFileProperty); }
            set { SetProperty(LinkFileProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="HuongGiaiQuyet"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> HuongGiaiQuyetProperty = RegisterProperty<string>(p => p.HuongGiaiQuyet, "Huong Giai Quyet");
        /// <summary>
        /// Gets or sets the Huong Giai Quyet.
        /// </summary>
        /// <value>The Huong Giai Quyet.</value>
        public string HuongGiaiQuyet
        {
            get { return GetProperty(HuongGiaiQuyetProperty); }
            set { SetProperty(HuongGiaiQuyetProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="idCanBoGui"/> property.
        /// </summary>
        public static readonly PropertyInfo<Int64?> IdCanBoGuiProperty = RegisterProperty<Int64?>(p => p.IdCanBoGui, "id Can Bo Gui");
        /// <summary>
        /// Gets or sets the id Can Bo Gui.
        /// </summary>
        /// <value>The id Can Bo Gui.</value>
        public Int64? IdCanBoGui
        {
            get { return GetProperty(IdCanBoGuiProperty); }
            set { SetProperty(IdCanBoGuiProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="idUserGui"/> property.
        /// </summary>
        public static readonly PropertyInfo<Int64?> IdUserGuiProperty = RegisterProperty<Int64?>(p => p.IdUserGui, "id User Gui");
        /// <summary>
        /// Gets or sets the id User Gui.
        /// </summary>
        /// <value>The id User Gui.</value>
        public Int64? IdUserGui
        {
            get { return GetProperty(IdUserGuiProperty); }
            set { SetProperty(IdUserGuiProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="NgayMo"/> property.
        /// </summary>
        public static readonly PropertyInfo<SmartDate> NgayMoProperty = RegisterProperty<SmartDate>(p => p.NgayMo, "Ngay Mo");
        /// <summary>
        /// Gets or sets the Ngay Mo.
        /// </summary>
        /// <value>The Ngay Mo.</value>
        public string NgayMo
        {
            get { return GetPropertyConvert<SmartDate, String>(NgayMoProperty); }
            set { SetPropertyConvert<SmartDate, String>(NgayMoProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="DaXem"/> property.
        /// </summary>
        public static readonly PropertyInfo<bool?> DaXemProperty = RegisterProperty<bool?>(p => p.DaXem, "Da Xem");
        /// <summary>
        /// Gets or sets the Da Xem.
        /// </summary>
        /// <value><c>true</c> if Da Xem; <c>false</c> if not Da Xem; otherwise, <c>null</c>.</value>
        public bool? DaXem
        {
            get { return GetProperty(DaXemProperty); }
            set { SetProperty(DaXemProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="LastEdited_UserID"/> property.
        /// </summary>
        public static readonly PropertyInfo<Int64?> LastEdited_UserIDProperty = RegisterProperty<Int64?>(p => p.LastEdited_UserID, "Last Edited User ID");
        /// <summary>
        /// Gets or sets the Last Edited User ID.
        /// </summary>
        /// <value>The Last Edited User ID.</value>
        public Int64? LastEdited_UserID
        {
            get { return GetProperty(LastEdited_UserIDProperty); }
            set { SetProperty(LastEdited_UserIDProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="LastEdited_Date"/> property.
        /// </summary>
        public static readonly PropertyInfo<SmartDate> LastEdited_DateProperty = RegisterProperty<SmartDate>(p => p.LastEdited_Date, "Last Edited Date");
        /// <summary>
        /// Gets or sets the Last Edited Date.
        /// </summary>
        /// <value>The Last Edited Date.</value>
        public string LastEdited_Date
        {
            get { return GetPropertyConvert<SmartDate, String>(LastEdited_DateProperty); }
            set { SetPropertyConvert<SmartDate, String>(LastEdited_DateProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="ListIDCanBoDuocGiao"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> ListIDCanBoDuocGiaoProperty = RegisterProperty<string>(p => p.ListIDCanBoDuocGiao, "List IDCan Bo Duoc Giao");
        /// <summary>
        /// Gets or sets the List IDCan Bo Duoc Giao.
        /// </summary>
        /// <value>The List IDCan Bo Duoc Giao.</value>
        public string ListIDCanBoDuocGiao
        {
            get { return GetProperty(ListIDCanBoDuocGiaoProperty); }
            set { SetProperty(ListIDCanBoDuocGiaoProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="ListHoTenCanBoDuocGiao"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> ListHoTenCanBoDuocGiaoProperty = RegisterProperty<string>(p => p.ListHoTenCanBoDuocGiao, "List Ho Ten Can Bo Duoc Giao");
        /// <summary>
        /// Gets or sets the List Ho Ten Can Bo Duoc Giao.
        /// </summary>
        /// <value>The List Ho Ten Can Bo Duoc Giao.</value>
        public string ListHoTenCanBoDuocGiao
        {
            get { return GetProperty(ListHoTenCanBoDuocGiaoProperty); }
            set { SetProperty(ListHoTenCanBoDuocGiaoProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="backup01"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> Backup01Property = RegisterProperty<string>(p => p.Backup01, "backup01");
        /// <summary>
        /// Gets or sets the backup01.
        /// </summary>
        /// <value>The backup01.</value>
        public string Backup01
        {
            get { return GetProperty(Backup01Property); }
            set { SetProperty(Backup01Property, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="backup02"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> Backup02Property = RegisterProperty<string>(p => p.Backup02, "backup02");
        /// <summary>
        /// Gets or sets the backup02.
        /// </summary>
        /// <value>The backup02.</value>
        public string Backup02
        {
            get { return GetProperty(Backup02Property); }
            set { SetProperty(Backup02Property, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="backup03"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> Backup03Property = RegisterProperty<string>(p => p.Backup03, "backup03");
        /// <summary>
        /// Gets or sets the backup03.
        /// </summary>
        /// <value>The backup03.</value>
        public string Backup03
        {
            get { return GetProperty(Backup03Property); }
            set { SetProperty(Backup03Property, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="ListIDUserDuocGiao"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> ListIDUserDuocGiaoProperty = RegisterProperty<string>(p => p.ListIDUserDuocGiao, "List IDUser Duoc Giao");
        /// <summary>
        /// Gets or sets the List IDUser Duoc Giao.
        /// </summary>
        /// <value>The List IDUser Duoc Giao.</value>
        public string ListIDUserDuocGiao
        {
            get { return GetProperty(ListIDUserDuocGiaoProperty); }
            set { SetProperty(ListIDUserDuocGiaoProperty, value); }
        }
        public DateTime DateNgayKi
        {
            get { return GetProperty(NgayKiProperty); }
        }
        public DateTime DateNgayGui
        {
            get { return GetProperty(NgayGuiProperty); }
        }
        #endregion

        #region Factory Methods

        /// <summary>
        /// Factory method. Creates a new <see cref="HC_CongVanDi_Info"/> object.
        /// </summary>
        /// <returns>A reference to the created <see cref="HC_CongVanDi_Info"/> object.</returns>
        internal static HC_CongVanDi_Info NewHC_CongVanDi_Info()
        {
            return DataPortal.CreateChild<HC_CongVanDi_Info>();
        }

        /// <summary>
        /// Factory method. Asynchronously creates a new <see cref="HC_CongVanDi_Info"/> object.
        /// </summary>
        /// <param name="callback">The completion callback method.</param>
        internal static void NewHC_CongVanDi_Info(EventHandler<DataPortalResult<HC_CongVanDi_Info>> callback)
        {
            DataPortal.BeginCreate<HC_CongVanDi_Info>(callback);
        }

        /// <summary>
        /// Factory method. Loads a <see cref="HC_CongVanDi_Info"/> object from the given SafeDataReader.
        /// </summary>
        /// <param name="dr">The SafeDataReader to use.</param>
        /// <returns>A reference to the fetched <see cref="HC_CongVanDi_Info"/> object.</returns>
        internal static HC_CongVanDi_Info GetHC_CongVanDi_Info(SafeDataReader dr,BusinessFunction function)
        {
            HC_CongVanDi_Info obj = new HC_CongVanDi_Info();
            // show the framework that this is a child object
            obj.MarkAsChild();
            obj.Fetch(dr,function);
            obj.MarkOld();
            // check all object rules and property rules
            obj.BusinessRules.CheckRules();
            return obj;
        }

        #endregion

        #region Constructor

        /// <summary>
        /// Initializes a new instance of the <see cref="HC_CongVanDi_Info"/> class.
        /// </summary>
        /// <remarks> Do not use to create a Csla object. Use factory methods instead.</remarks>
        private HC_CongVanDi_Info()
        {
            // Prevent direct creation

            // show the framework that this is a child object
            MarkAsChild();
        }

        #endregion

        #region Data Access

        /// <summary>
        /// Loads default values for the <see cref="HC_CongVanDi_Info"/> object properties.
        /// </summary>
        [Csla.RunLocal]
        protected override void Child_Create()
        {
            LoadProperty(IDProperty, System.Threading.Interlocked.Decrement(ref _lastID));
            LoadProperty(SoCongVanProperty, null);
            LoadProperty(NgayKiProperty, null);
            LoadProperty(TieuDeProperty, null);
            LoadProperty(VeVanDeProperty, null);
            LoadProperty(LoaiCongVanProperty, null);
            LoadProperty(CapQuanLyProperty, null);
            LoadProperty(NoiDungProperty, null);
            LoadProperty(NoiGuiProperty, null);
            LoadProperty(NguoiGuiProperty, null);
            LoadProperty(NgayGuiProperty, null);
            LoadProperty(LuuTruTaiProperty, null);
            LoadProperty(LinkFileProperty, null);
            LoadProperty(HuongGiaiQuyetProperty, null);
            LoadProperty(NgayMoProperty, null);
            LoadProperty(LastEdited_DateProperty, null);
            LoadProperty(ListIDCanBoDuocGiaoProperty, null);
            LoadProperty(ListHoTenCanBoDuocGiaoProperty, null);
            LoadProperty(Backup01Property, null);
            LoadProperty(Backup02Property, null);
            LoadProperty(Backup03Property, null);
            LoadProperty(ListIDUserDuocGiaoProperty, null);
            var args = new DataPortalHookArgs();
            OnCreate(args);
            base.Child_Create();
        }

        /// <summary>
        /// Loads a <see cref="HC_CongVanDi_Info"/> object from the given SafeDataReader.
        /// </summary>
        /// <param name="dr">The SafeDataReader to use.</param>
        private void Fetch(SafeDataReader dr,BusinessFunction function)
        {

            // Value properties
            LoadProperty(IDProperty, dr.GetInt32("ID"));
            LoadProperty(SoCongVanProperty, dr.GetString("SoCongVan"));
            LoadProperty(NgayKiProperty, dr.GetDateTime("NgayKi"));
            LoadProperty(TieuDeProperty, dr.GetString("TieuDe"));
            LoadProperty(VeVanDeProperty, dr.GetString("VeVanDe"));
            LoadProperty(LoaiCongVanProperty, dr.GetString("LoaiCongVan"));
            LoadProperty(CapQuanLyProperty, dr.GetString("CapQuanLy"));
            //LoadProperty(NoiDungProperty, dr.GetString("NoiDung"));
            LoadProperty(NoiGuiProperty, dr.GetString("NoiGui"));
            LoadProperty(NguoiGuiProperty, dr.GetString("NguoiGui"));
            LoadProperty(NgayGuiProperty, dr.GetDateTime("NgayGui"));
            LoadProperty(LuuTruTaiProperty, dr.GetString("LuuTruTai"));
            //LoadProperty(LinkFileProperty, dr.GetString("LinkFile"));
            //LoadProperty(HuongGiaiQuyetProperty, dr.GetString("HuongGiaiQuyet"));
            //LoadProperty(IdCanBoGuiProperty, dr.GetInt64("IdCanBoGui"));
            //LoadProperty(IdUserGuiProperty, dr.GetInt64("IdUserGui"));
            //LoadProperty(NgayMoProperty, dr.GetDateTime("NgayMo"));
            //LoadProperty(DaXemProperty, dr.GetBoolean("DaXem"));
 
            var args = new DataPortalHookArgs(dr);
            OnFetchRead(args);
        }

        /// <summary>
        /// Inserts a new <see cref="HC_CongVanDi_Info"/> object in the database.
        /// </summary>
        private void Child_Insert()
        {
            using (var ctx = TransactionManager<SqlConnection, SqlTransaction>.GetManager("Connection"))
            {
                using (var cmd = new SqlCommand("dbo.HC_CongVanDi_Info_add", ctx.Connection))
                {
                    cmd.Transaction = ctx.Transaction;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@ID", ReadProperty(IDProperty)).Direction = ParameterDirection.Output;
                    cmd.Parameters.AddWithValue("@SoCongVan", ReadProperty(SoCongVanProperty) == null ? (object)DBNull.Value : ReadProperty(SoCongVanProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@NgayKi", ReadProperty(NgayKiProperty).DBValue).DbType = DbType.DateTime;
                    cmd.Parameters.AddWithValue("@TieuDe", ReadProperty(TieuDeProperty) == null ? (object)DBNull.Value : ReadProperty(TieuDeProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@VeVanDe", ReadProperty(VeVanDeProperty) == null ? (object)DBNull.Value : ReadProperty(VeVanDeProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@LoaiCongVan", ReadProperty(LoaiCongVanProperty) == null ? (object)DBNull.Value : ReadProperty(LoaiCongVanProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@CapQuanLy", ReadProperty(CapQuanLyProperty) == null ? (object)DBNull.Value : ReadProperty(CapQuanLyProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@NoiDung", ReadProperty(NoiDungProperty) == null ? (object)DBNull.Value : ReadProperty(NoiDungProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@NoiGui", ReadProperty(NoiGuiProperty) == null ? (object)DBNull.Value : ReadProperty(NoiGuiProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@NguoiGui", ReadProperty(NguoiGuiProperty) == null ? (object)DBNull.Value : ReadProperty(NguoiGuiProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@NgayGui", ReadProperty(NgayGuiProperty).DBValue).DbType = DbType.DateTime;
                    cmd.Parameters.AddWithValue("@LuuTruTai", ReadProperty(LuuTruTaiProperty) == null ? (object)DBNull.Value : ReadProperty(LuuTruTaiProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@LinkFile", ReadProperty(LinkFileProperty) == null ? (object)DBNull.Value : ReadProperty(LinkFileProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@HuongGiaiQuyet", ReadProperty(HuongGiaiQuyetProperty) == null ? (object)DBNull.Value : ReadProperty(HuongGiaiQuyetProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@idCanBoGui", ReadProperty(IdCanBoGuiProperty) == null ? (object)DBNull.Value : ReadProperty(IdCanBoGuiProperty).Value).DbType = DbType.Int64;
                    cmd.Parameters.AddWithValue("@idUserGui", ReadProperty(IdUserGuiProperty) == null ? (object)DBNull.Value : ReadProperty(IdUserGuiProperty).Value).DbType = DbType.Int64;
                    cmd.Parameters.AddWithValue("@NgayMo", ReadProperty(NgayMoProperty).DBValue).DbType = DbType.DateTime;
                    cmd.Parameters.AddWithValue("@DaXem", ReadProperty(DaXemProperty) == null ? (object)DBNull.Value : ReadProperty(DaXemProperty).Value).DbType = DbType.Boolean;
                    cmd.Parameters.AddWithValue("@LastEdited_UserID", ReadProperty(LastEdited_UserIDProperty) == null ? (object)DBNull.Value : ReadProperty(LastEdited_UserIDProperty).Value).DbType = DbType.Int64;
                    cmd.Parameters.AddWithValue("@LastEdited_Date", ReadProperty(LastEdited_DateProperty).DBValue).DbType = DbType.DateTime;
                    cmd.Parameters.AddWithValue("@ListIDCanBoDuocGiao", ReadProperty(ListIDCanBoDuocGiaoProperty) == null ? (object)DBNull.Value : ReadProperty(ListIDCanBoDuocGiaoProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@ListHoTenCanBoDuocGiao", ReadProperty(ListHoTenCanBoDuocGiaoProperty) == null ? (object)DBNull.Value : ReadProperty(ListHoTenCanBoDuocGiaoProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@backup01", ReadProperty(Backup01Property) == null ? (object)DBNull.Value : ReadProperty(Backup01Property)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@backup02", ReadProperty(Backup02Property) == null ? (object)DBNull.Value : ReadProperty(Backup02Property)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@backup03", ReadProperty(Backup03Property) == null ? (object)DBNull.Value : ReadProperty(Backup03Property)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@ListIDUserDuocGiao", ReadProperty(ListIDUserDuocGiaoProperty) == null ? (object)DBNull.Value : ReadProperty(ListIDUserDuocGiaoProperty)).DbType = DbType.String;
                    var args = new DataPortalHookArgs(cmd);
                    OnInsertPre(args);
                    cmd.ExecuteNonQuery();
                    OnInsertPost(args);
                    LoadProperty(IDProperty, (int) cmd.Parameters["@ID"].Value);
                }
            }
        }

        /// <summary>
        /// Updates in the database all changes made to the <see cref="HC_CongVanDi_Info"/> object.
        /// </summary>
        private void Child_Update()
        {
            if (!IsDirty)
                return;

            using (var ctx = TransactionManager<SqlConnection, SqlTransaction>.GetManager("Connection"))
            {
                using (var cmd = new SqlCommand("dbo.HC_CongVanDi_Info_update", ctx.Connection))
                {
                    cmd.Transaction = ctx.Transaction;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@ID", ReadProperty(IDProperty)).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@SoCongVan", ReadProperty(SoCongVanProperty) == null ? (object)DBNull.Value : ReadProperty(SoCongVanProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@NgayKi", ReadProperty(NgayKiProperty).DBValue).DbType = DbType.DateTime;
                    cmd.Parameters.AddWithValue("@TieuDe", ReadProperty(TieuDeProperty) == null ? (object)DBNull.Value : ReadProperty(TieuDeProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@VeVanDe", ReadProperty(VeVanDeProperty) == null ? (object)DBNull.Value : ReadProperty(VeVanDeProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@LoaiCongVan", ReadProperty(LoaiCongVanProperty) == null ? (object)DBNull.Value : ReadProperty(LoaiCongVanProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@CapQuanLy", ReadProperty(CapQuanLyProperty) == null ? (object)DBNull.Value : ReadProperty(CapQuanLyProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@NoiDung", ReadProperty(NoiDungProperty) == null ? (object)DBNull.Value : ReadProperty(NoiDungProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@NoiGui", ReadProperty(NoiGuiProperty) == null ? (object)DBNull.Value : ReadProperty(NoiGuiProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@NguoiGui", ReadProperty(NguoiGuiProperty) == null ? (object)DBNull.Value : ReadProperty(NguoiGuiProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@NgayGui", ReadProperty(NgayGuiProperty).DBValue).DbType = DbType.DateTime;
                    cmd.Parameters.AddWithValue("@LuuTruTai", ReadProperty(LuuTruTaiProperty) == null ? (object)DBNull.Value : ReadProperty(LuuTruTaiProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@LinkFile", ReadProperty(LinkFileProperty) == null ? (object)DBNull.Value : ReadProperty(LinkFileProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@HuongGiaiQuyet", ReadProperty(HuongGiaiQuyetProperty) == null ? (object)DBNull.Value : ReadProperty(HuongGiaiQuyetProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@idCanBoGui", ReadProperty(IdCanBoGuiProperty) == null ? (object)DBNull.Value : ReadProperty(IdCanBoGuiProperty).Value).DbType = DbType.Int64;
                    cmd.Parameters.AddWithValue("@idUserGui", ReadProperty(IdUserGuiProperty) == null ? (object)DBNull.Value : ReadProperty(IdUserGuiProperty).Value).DbType = DbType.Int64;
                    cmd.Parameters.AddWithValue("@NgayMo", ReadProperty(NgayMoProperty).DBValue).DbType = DbType.DateTime;
                    cmd.Parameters.AddWithValue("@DaXem", ReadProperty(DaXemProperty) == null ? (object)DBNull.Value : ReadProperty(DaXemProperty).Value).DbType = DbType.Boolean;
                    cmd.Parameters.AddWithValue("@LastEdited_UserID", ReadProperty(LastEdited_UserIDProperty) == null ? (object)DBNull.Value : ReadProperty(LastEdited_UserIDProperty).Value).DbType = DbType.Int64;
                    cmd.Parameters.AddWithValue("@LastEdited_Date", ReadProperty(LastEdited_DateProperty).DBValue).DbType = DbType.DateTime;
                    cmd.Parameters.AddWithValue("@ListIDCanBoDuocGiao", ReadProperty(ListIDCanBoDuocGiaoProperty) == null ? (object)DBNull.Value : ReadProperty(ListIDCanBoDuocGiaoProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@ListHoTenCanBoDuocGiao", ReadProperty(ListHoTenCanBoDuocGiaoProperty) == null ? (object)DBNull.Value : ReadProperty(ListHoTenCanBoDuocGiaoProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@backup01", ReadProperty(Backup01Property) == null ? (object)DBNull.Value : ReadProperty(Backup01Property)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@backup02", ReadProperty(Backup02Property) == null ? (object)DBNull.Value : ReadProperty(Backup02Property)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@backup03", ReadProperty(Backup03Property) == null ? (object)DBNull.Value : ReadProperty(Backup03Property)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@ListIDUserDuocGiao", ReadProperty(ListIDUserDuocGiaoProperty) == null ? (object)DBNull.Value : ReadProperty(ListIDUserDuocGiaoProperty)).DbType = DbType.String;
                    var args = new DataPortalHookArgs(cmd);
                    OnUpdatePre(args);
                    cmd.ExecuteNonQuery();
                    OnUpdatePost(args);
                }
            }
        }

        /// <summary>
        /// Self deletes the <see cref="HC_CongVanDi_Info"/> object from database.
        /// </summary>
        private void Child_DeleteSelf()
        {
            using (var ctx = TransactionManager<SqlConnection, SqlTransaction>.GetManager("Connection"))
            {
                using (var cmd = new SqlCommand("dbo.HC_CongVanDi_Info_delete", ctx.Connection))
                {
                    cmd.Transaction = ctx.Transaction;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@ID", ReadProperty(IDProperty)).DbType = DbType.Int32;
                    var args = new DataPortalHookArgs(cmd);
                    OnDeletePre(args);
                    cmd.ExecuteNonQuery();
                    OnDeletePost(args);
                }
            }
        }

        #endregion

        #region Pseudo Events

        /// <summary>
        /// Occurs after setting all defaults for object creation.
        /// </summary>
        partial void OnCreate(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Delete, after setting query parameters and before the delete operation.
        /// </summary>
        partial void OnDeletePre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Delete, after the delete operation, before Commit().
        /// </summary>
        partial void OnDeletePost(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after setting query parameters and before the fetch operation.
        /// </summary>
        partial void OnFetchPre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after the fetch operation (object or collection is fully loaded and set up).
        /// </summary>
        partial void OnFetchPost(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after the low level fetch operation, before the data reader is destroyed.
        /// </summary>
        partial void OnFetchRead(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after setting query parameters and before the update operation.
        /// </summary>
        partial void OnUpdatePre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Insert, after the update operation, before setting back row identifiers (RowVersion) and Commit().
        /// </summary>
        partial void OnUpdatePost(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Insert, after setting query parameters and before the insert operation.
        /// </summary>
        partial void OnInsertPre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Insert, after the insert operation, before setting back row identifiers (ID and RowVersion) and Commit().
        /// </summary>
        partial void OnInsertPost(DataPortalHookArgs args);

        #endregion

    }
}
