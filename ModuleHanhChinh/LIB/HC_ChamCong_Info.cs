//  This file was generated by CSLA Object Generator - CslaGenFork v4.3.0
//
// Filename:    HC_ChamCong_Info
// ObjectType:  HC_ChamCong_Info
// CSLAType:    EditableChild

using System;
using System.Data;
using System.Data.SqlClient;
using Csla;
using Csla.Data;
using NETLINK.LIB;

namespace ModuleHanhChinh.LIB
{

    /// <summary>
    /// HC_ChamCong_Info (editable child object).<br/>
    /// This is a generated base class of <see cref="HC_ChamCong_Info"/> business object.
    /// </summary>
    /// <remarks>
    /// This class is an item of <see cref="HC_ChamCong_Coll"/> collection.
    /// </remarks>
    [Serializable]
    public partial class HC_ChamCong_Info : BusinessBase<HC_ChamCong_Info>
    {

        #region Static Fields

        private static int _lastID;

        #endregion

        #region Business Properties

        /// <summary>
        /// Maintains metadata about <see cref="ID"/> property.
        /// </summary>
        public static readonly PropertyInfo<int> IDProperty = RegisterProperty<int>(p => p.ID, "ID");
        /// <summary>
        /// Gets the ID.
        /// </summary>
        /// <value>The ID.</value>
        public int ID
        {
            get { return GetProperty(IDProperty); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="IDCanBo"/> property.
        /// </summary>
        public static readonly PropertyInfo<Int64?> IDCanBoProperty = RegisterProperty<Int64?>(p => p.IDCanBo, "IDCan Bo");
        /// <summary>
        /// Gets or sets the IDCan Bo.
        /// </summary>
        /// <value>The IDCan Bo.</value>
        public Int64? IDCanBo
        {
            get { return GetProperty(IDCanBoProperty); }
            set { SetProperty(IDCanBoProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="Ngay"/> property.
        /// </summary>
        public static readonly PropertyInfo<SmartDate> NgayProperty = RegisterProperty<SmartDate>(p => p.Ngay, "Ngay");
        /// <summary>
        /// Gets or sets the Ngay.
        /// </summary>
        /// <value>The Ngay.</value>
        public string Ngay
        {
            get { return GetPropertyConvert<SmartDate, String>(NgayProperty); }
            set { SetPropertyConvert<SmartDate, String>(NgayProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="Thu"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> ThuProperty = RegisterProperty<string>(p => p.Thu, "Thu");
        /// <summary>
        /// Gets or sets the Thu.
        /// </summary>
        /// <value>The Thu.</value>
        public string Thu
        {
            get { return GetProperty(ThuProperty); }
            set { SetProperty(ThuProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="GioVao"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> GioVaoProperty = RegisterProperty<string>(p => p.GioVao, "Gio Vao");
        /// <summary>
        /// Gets or sets the Gio Vao.
        /// </summary>
        /// <value>The Gio Vao.</value>
        public string GioVao
        {
            get { return GetProperty(GioVaoProperty); }
            set { SetProperty(GioVaoProperty, value); }
        }
        public DateTime DateNgay
        {
            get { return GetProperty(NgayProperty); }
        }
        /// <summary>
        /// Maintains metadata about <see cref="GioRa"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> GioRaProperty = RegisterProperty<string>(p => p.GioRa, "Gio Ra");
        /// <summary>
        /// Gets or sets the Gio Ra.
        /// </summary>
        /// <value>The Gio Ra.</value>
        public string GioRa
        {
            get { return GetProperty(GioRaProperty); }
            set { SetProperty(GioRaProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="Muon"/> property.
        /// </summary>
        public static readonly PropertyInfo<bool?> MuonProperty = RegisterProperty<bool?>(p => p.Muon, "Muon");
        /// <summary>
        /// Gets or sets the Muon.
        /// </summary>
        /// <value><c>true</c> if Muon; <c>false</c> if not Muon; otherwise, <c>null</c>.</value>
        public bool? Muon
        {
            get { return GetProperty(MuonProperty); }
            set { SetProperty(MuonProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="NgayPhep"/> property.
        /// </summary>
        public static readonly PropertyInfo<bool?> NgayPhepProperty = RegisterProperty<bool?>(p => p.NgayPhep, "Ngay Phep");
        /// <summary>
        /// Gets or sets the Ngay Phep.
        /// </summary>
        /// <value><c>true</c> if Ngay Phep; <c>false</c> if not Ngay Phep; otherwise, <c>null</c>.</value>
        public bool? NgayPhep
        {
            get { return GetProperty(NgayPhepProperty); }
            set { SetProperty(NgayPhepProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="NghiKhongLyDo"/> property.
        /// </summary>
        public static readonly PropertyInfo<bool?> NghiKhongLyDoProperty = RegisterProperty<bool?>(p => p.NghiKhongLyDo, "Nghi Khong Ly Do");
        /// <summary>
        /// Gets or sets the Nghi Khong Ly Do.
        /// </summary>
        /// <value><c>true</c> if Nghi Khong Ly Do; <c>false</c> if not Nghi Khong Ly Do; otherwise, <c>null</c>.</value>
        public bool? NghiKhongLyDo
        {
            get { return GetProperty(NghiKhongLyDoProperty); }
            set { SetProperty(NghiKhongLyDoProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="DiCongTac"/> property.
        /// </summary>
        public static readonly PropertyInfo<bool?> DiCongTacProperty = RegisterProperty<bool?>(p => p.DiCongTac, "Di Cong Tac");
        /// <summary>
        /// Gets or sets the Di Cong Tac.
        /// </summary>
        /// <value><c>true</c> if Di Cong Tac; <c>false</c> if not Di Cong Tac; otherwise, <c>null</c>.</value>
        public bool? DiCongTac
        {
            get { return GetProperty(DiCongTacProperty); }
            set { SetProperty(DiCongTacProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="Type"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> TypeProperty = RegisterProperty<string>(p => p.Type, "Type");
        /// <summary>
        /// Gets or sets the Type.
        /// </summary>
        /// <value>The Type.</value>
        public string Type
        {
            get { return GetProperty(TypeProperty); }
            set { SetProperty(TypeProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="LyDo"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> LyDoProperty = RegisterProperty<string>(p => p.LyDo, "Ly Do");
        /// <summary>
        /// Gets or sets the Ly Do.
        /// </summary>
        /// <value>The Ly Do.</value>
        public string LyDo
        {
            get { return GetProperty(LyDoProperty); }
            set { SetProperty(LyDoProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="LastEdited_UserID"/> property.
        /// </summary>
        public static readonly PropertyInfo<Int64?> LastEdited_UserIDProperty = RegisterProperty<Int64?>(p => p.LastEdited_UserID, "Last Edited User ID");
        /// <summary>
        /// Gets or sets the Last Edited User ID.
        /// </summary>
        /// <value>The Last Edited User ID.</value>
        public Int64? LastEdited_UserID
        {
            get { return GetProperty(LastEdited_UserIDProperty); }
            set { SetProperty(LastEdited_UserIDProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="LastEdited_Date"/> property.
        /// </summary>
        public static readonly PropertyInfo<SmartDate> LastEdited_DateProperty = RegisterProperty<SmartDate>(p => p.LastEdited_Date, "Last Edited Date");
        /// <summary>
        /// Gets or sets the Last Edited Date.
        /// </summary>
        /// <value>The Last Edited Date.</value>
        public SmartDate LastEdited_Date
        {
            get { return GetProperty(LastEdited_DateProperty); }
            set { SetProperty(LastEdited_DateProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="GhiChu"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> GhiChuProperty = RegisterProperty<string>(p => p.GhiChu, "Ghi Chu");
        /// <summary>
        /// Gets or sets the Ghi Chu.
        /// </summary>
        /// <value>The Ghi Chu.</value>
        public string GhiChu
        {
            get { return GetProperty(GhiChuProperty); }
            set { SetProperty(GhiChuProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="GioVao2"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> GioVao2Property = RegisterProperty<string>(p => p.GioVao2, "Gio Vao2");
        /// <summary>
        /// Gets or sets the Gio Vao2.
        /// </summary>
        /// <value>The Gio Vao2.</value>
        public string GioVao2
        {
            get { return GetProperty(GioVao2Property); }
            set { SetProperty(GioVao2Property, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="GioRa2"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> GioRa2Property = RegisterProperty<string>(p => p.GioRa2, "Gio Ra2");
        /// <summary>
        /// Gets or sets the Gio Ra2.
        /// </summary>
        /// <value>The Gio Ra2.</value>
        public string GioRa2
        {
            get { return GetProperty(GioRa2Property); }
            set { SetProperty(GioRa2Property, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="GioVao3"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> GioVao3Property = RegisterProperty<string>(p => p.GioVao3, "Gio Vao3");
        /// <summary>
        /// Gets or sets the Gio Vao3.
        /// </summary>
        /// <value>The Gio Vao3.</value>
        public string GioVao3
        {
            get { return GetProperty(GioVao3Property); }
            set { SetProperty(GioVao3Property, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="GioRa3"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> GioRa3Property = RegisterProperty<string>(p => p.GioRa3, "Gio Ra3");
        /// <summary>
        /// Gets or sets the Gio Ra3.
        /// </summary>
        /// <value>The Gio Ra3.</value>
        public string GioRa3
        {
            get { return GetProperty(GioRa3Property); }
            set { SetProperty(GioRa3Property, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="SoCong"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> SoCongProperty = RegisterProperty<string>(p => p.SoCong, "So Cong");
        /// <summary>
        /// Gets or sets the So Cong.
        /// </summary>
        /// <value>The So Cong.</value>
        public string SoCong
        {
            get { return GetProperty(SoCongProperty); }
            set { SetProperty(SoCongProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="TongGio"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> TongGioProperty = RegisterProperty<string>(p => p.TongGio, "Tong Gio");
        /// <summary>
        /// Gets or sets the Tong Gio.
        /// </summary>
        /// <value>The Tong Gio.</value>
        public string TongGio
        {
            get { return GetProperty(TongGioProperty); }
            set { SetProperty(TongGioProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="Thang"/> property.
        /// </summary>
        public static readonly PropertyInfo<int?> ThangProperty = RegisterProperty<int?>(p => p.Thang, "Thang");
        /// <summary>
        /// Gets or sets the Thang.
        /// </summary>
        /// <value>The Thang.</value>
        public int? Thang
        {
            get { return GetProperty(ThangProperty); }
            set { SetProperty(ThangProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="Nam"/> property.
        /// </summary>
        public static readonly PropertyInfo<int?> NamProperty = RegisterProperty<int?>(p => p.Nam, "Nam");
        /// <summary>
        /// Gets or sets the Nam.
        /// </summary>
        /// <value>The Nam.</value>
        public int? Nam
        {
            get { return GetProperty(NamProperty); }
            set { SetProperty(NamProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="NgayTrongThang"/> property.
        /// </summary>
        public static readonly PropertyInfo<int?> NgayTrongThangProperty = RegisterProperty<int?>(p => p.NgayTrongThang, "Ngay Trong Thang");
        /// <summary>
        /// Gets or sets the Ngay Trong Thang.
        /// </summary>
        /// <value>The Ngay Trong Thang.</value>
        public int? NgayTrongThang
        {
            get { return GetProperty(NgayTrongThangProperty); }
            set { SetProperty(NgayTrongThangProperty, value); }
        }

        #endregion

        #region Factory Methods

        /// <summary>
        /// Factory method. Creates a new <see cref="HC_ChamCong_Info"/> object.
        /// </summary>
        /// <returns>A reference to the created <see cref="HC_ChamCong_Info"/> object.</returns>
        internal static HC_ChamCong_Info NewHC_ChamCong_Info()
        {
            return DataPortal.CreateChild<HC_ChamCong_Info>();
        }

        /// <summary>
        /// Factory method. Asynchronously creates a new <see cref="HC_ChamCong_Info"/> object.
        /// </summary>
        /// <param name="callback">The completion callback method.</param>
        internal static void NewHC_ChamCong_Info(EventHandler<DataPortalResult<HC_ChamCong_Info>> callback)
        {
            DataPortal.BeginCreate<HC_ChamCong_Info>(callback);
        }

        /// <summary>
        /// Factory method. Loads a <see cref="HC_ChamCong_Info"/> object from the given SafeDataReader.
        /// </summary>
        /// <param name="dr">The SafeDataReader to use.</param>
        /// <returns>A reference to the fetched <see cref="HC_ChamCong_Info"/> object.</returns>
        internal static HC_ChamCong_Info GetHC_ChamCong_Info(SafeDataReader dr)
        {
            HC_ChamCong_Info obj = new HC_ChamCong_Info();
            // show the framework that this is a child object
            obj.MarkAsChild();
            obj.Fetch(dr);
            obj.MarkOld();
            // check all object rules and property rules
            obj.BusinessRules.CheckRules();
            return obj;
        }

        #endregion

        #region Constructor

        /// <summary>
        /// Initializes a new instance of the <see cref="HC_ChamCong_Info"/> class.
        /// </summary>
        /// <remarks> Do not use to create a Csla object. Use factory methods instead.</remarks>
        private HC_ChamCong_Info()
        {
            // Prevent direct creation

            // show the framework that this is a child object
            MarkAsChild();
        }

        #endregion

        #region Data Access

        /// <summary>
        /// Loads default values for the <see cref="HC_ChamCong_Info"/> object properties.
        /// </summary>
        [Csla.RunLocal]
        protected override void Child_Create()
        {
            LoadProperty(IDProperty, System.Threading.Interlocked.Decrement(ref _lastID));
            LoadProperty(NgayProperty, null);
            LoadProperty(ThuProperty, null);
            LoadProperty(GioVaoProperty, null);
            LoadProperty(GioRaProperty, null);
            LoadProperty(TypeProperty, null);
            LoadProperty(LyDoProperty, null);
            LoadProperty(LastEdited_DateProperty, null);
            LoadProperty(GhiChuProperty, null);
            LoadProperty(GioVao2Property, null);
            LoadProperty(GioRa2Property, null);
            LoadProperty(GioVao3Property, null);
            LoadProperty(GioRa3Property, null);
            LoadProperty(SoCongProperty, null);
            LoadProperty(TongGioProperty, null);
            var args = new DataPortalHookArgs();
            OnCreate(args);
            base.Child_Create();
        }

        /// <summary>
        /// Loads a <see cref="HC_ChamCong_Info"/> object from the given SafeDataReader.
        /// </summary>
        /// <param name="dr">The SafeDataReader to use.</param>
        private void Fetch(SafeDataReader dr)
        {
            // Value properties
            LoadProperty(IDProperty, dr.GetInt32("ID"));
            LoadProperty(IDCanBoProperty, dr.GetInt64("IDCanBo"));
            LoadProperty(NgayProperty, dr.GetSmartDate("Ngay"));
            LoadProperty(ThuProperty, dr.GetString("Thu"));
            LoadProperty(GioVaoProperty, dr.GetString("GioVao"));
            LoadProperty(GioRaProperty, dr.GetString("GioRa"));
            LoadProperty(MuonProperty, dr.GetBoolean("Muon"));
            LoadProperty(NgayPhepProperty, dr.GetBoolean("NgayPhep"));
            LoadProperty(NghiKhongLyDoProperty, dr.GetBoolean("NghiKhongLyDo"));
            LoadProperty(DiCongTacProperty, dr.GetBoolean("DiCongTac"));
            LoadProperty(TypeProperty, dr.GetString("Type"));
            LoadProperty(LyDoProperty, dr.GetString("LyDo"));
            LoadProperty(LastEdited_UserIDProperty, dr.GetInt64("LastEdited_UserID"));
            LoadProperty(LastEdited_DateProperty, dr.GetSmartDate("LastEdited_Date"));
            LoadProperty(GhiChuProperty, dr.GetString("GhiChu"));
            LoadProperty(GioVao2Property, dr.GetString("GioVao2"));
            LoadProperty(GioRa2Property, dr.GetString("GioRa2"));
            LoadProperty(GioVao3Property, dr.GetString("GioVao3"));
            LoadProperty(GioRa3Property, dr.GetString("GioRa3"));
            LoadProperty(SoCongProperty, dr.GetString("SoCong"));
            LoadProperty(TongGioProperty, dr.GetString("TongGio"));
            LoadProperty(ThangProperty, dr.GetInt32("Thang"));
            LoadProperty(NamProperty, dr.GetInt32("Nam"));
            LoadProperty(NgayTrongThangProperty, dr.GetInt32("NgayTrongThang"));
            var args = new DataPortalHookArgs(dr);
            OnFetchRead(args);
        }

        /// <summary>
        /// Inserts a new <see cref="HC_ChamCong_Info"/> object in the database.
        /// </summary>
        private void Child_Insert()
        {
            using (var ctx = TransactionManager<SqlConnection, SqlTransaction>.GetManager("Connection"))
            {
                using (var cmd = new SqlCommand("dbo.HC_ChamCong_Info_add", ctx.Connection))
                {
                    cmd.Transaction = ctx.Transaction;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@ID", ReadProperty(IDProperty)).Direction = ParameterDirection.Output;
                    cmd.Parameters.AddWithValue("@IDCanBo", ReadProperty(IDCanBoProperty) == null ? (object)DBNull.Value : ReadProperty(IDCanBoProperty).Value).DbType = DbType.Int64;
                    cmd.Parameters.AddWithValue("@Ngay", ReadProperty(NgayProperty).DBValue).DbType = DbType.DateTime;
                    cmd.Parameters.AddWithValue("@Thu", ReadProperty(ThuProperty) == null ? (object)DBNull.Value : ReadProperty(ThuProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@GioVao", ReadProperty(GioVaoProperty) == null ? (object)DBNull.Value : ReadProperty(GioVaoProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@GioRa", ReadProperty(GioRaProperty) == null ? (object)DBNull.Value : ReadProperty(GioRaProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@Muon", ReadProperty(MuonProperty) == null ? (object)DBNull.Value : ReadProperty(MuonProperty).Value).DbType = DbType.Boolean;
                    cmd.Parameters.AddWithValue("@NgayPhep", ReadProperty(NgayPhepProperty) == null ? (object)DBNull.Value : ReadProperty(NgayPhepProperty).Value).DbType = DbType.Boolean;
                    cmd.Parameters.AddWithValue("@NghiKhongLyDo", ReadProperty(NghiKhongLyDoProperty) == null ? (object)DBNull.Value : ReadProperty(NghiKhongLyDoProperty).Value).DbType = DbType.Boolean;
                    cmd.Parameters.AddWithValue("@DiCongTac", ReadProperty(DiCongTacProperty) == null ? (object)DBNull.Value : ReadProperty(DiCongTacProperty).Value).DbType = DbType.Boolean;
                    cmd.Parameters.AddWithValue("@Type", ReadProperty(TypeProperty) == null ? (object)DBNull.Value : ReadProperty(TypeProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@LyDo", ReadProperty(LyDoProperty) == null ? (object)DBNull.Value : ReadProperty(LyDoProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@LastEdited_UserID", ReadProperty(LastEdited_UserIDProperty) == null ? (object)DBNull.Value : ReadProperty(LastEdited_UserIDProperty).Value).DbType = DbType.Int64;
                    cmd.Parameters.AddWithValue("@LastEdited_Date", ReadProperty(LastEdited_DateProperty).DBValue).DbType = DbType.DateTime;
                    cmd.Parameters.AddWithValue("@GhiChu", ReadProperty(GhiChuProperty) == null ? (object)DBNull.Value : ReadProperty(GhiChuProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@GioVao2", ReadProperty(GioVao2Property) == null ? (object)DBNull.Value : ReadProperty(GioVao2Property)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@GioRa2", ReadProperty(GioRa2Property) == null ? (object)DBNull.Value : ReadProperty(GioRa2Property)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@GioVao3", ReadProperty(GioVao3Property) == null ? (object)DBNull.Value : ReadProperty(GioVao3Property)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@GioRa3", ReadProperty(GioRa3Property) == null ? (object)DBNull.Value : ReadProperty(GioRa3Property)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@SoCong", ReadProperty(SoCongProperty) == null ? (object)DBNull.Value : ReadProperty(SoCongProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@TongGio", ReadProperty(TongGioProperty) == null ? (object)DBNull.Value : ReadProperty(TongGioProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@Thang", ReadProperty(ThangProperty) == null ? (object)DBNull.Value : ReadProperty(ThangProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@Nam", ReadProperty(NamProperty) == null ? (object)DBNull.Value : ReadProperty(NamProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@NgayTrongThang", ReadProperty(NgayTrongThangProperty) == null ? (object)DBNull.Value : ReadProperty(NgayTrongThangProperty).Value).DbType = DbType.Int32;
                    var args = new DataPortalHookArgs(cmd);
                    OnInsertPre(args);
                    cmd.ExecuteNonQuery();
                    OnInsertPost(args);
                    LoadProperty(IDProperty, (int) cmd.Parameters["@ID"].Value);
                }
            }
        }

        /// <summary>
        /// Updates in the database all changes made to the <see cref="HC_ChamCong_Info"/> object.
        /// </summary>
        private void Child_Update()
        {
            if (!IsDirty)
                return;

            using (var ctx = TransactionManager<SqlConnection, SqlTransaction>.GetManager("Connection"))
            {
                using (var cmd = new SqlCommand("dbo.HC_ChamCong_Info_update", ctx.Connection))
                {
                    cmd.Transaction = ctx.Transaction;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@ID", ReadProperty(IDProperty)).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@IDCanBo", ReadProperty(IDCanBoProperty) == null ? (object)DBNull.Value : ReadProperty(IDCanBoProperty).Value).DbType = DbType.Int64;
                    cmd.Parameters.AddWithValue("@Ngay", ReadProperty(NgayProperty).DBValue).DbType = DbType.DateTime;
                    cmd.Parameters.AddWithValue("@Thu", ReadProperty(ThuProperty) == null ? (object)DBNull.Value : ReadProperty(ThuProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@GioVao", ReadProperty(GioVaoProperty) == null ? (object)DBNull.Value : ReadProperty(GioVaoProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@GioRa", ReadProperty(GioRaProperty) == null ? (object)DBNull.Value : ReadProperty(GioRaProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@Muon", ReadProperty(MuonProperty) == null ? (object)DBNull.Value : ReadProperty(MuonProperty).Value).DbType = DbType.Boolean;
                    cmd.Parameters.AddWithValue("@NgayPhep", ReadProperty(NgayPhepProperty) == null ? (object)DBNull.Value : ReadProperty(NgayPhepProperty).Value).DbType = DbType.Boolean;
                    cmd.Parameters.AddWithValue("@NghiKhongLyDo", ReadProperty(NghiKhongLyDoProperty) == null ? (object)DBNull.Value : ReadProperty(NghiKhongLyDoProperty).Value).DbType = DbType.Boolean;
                    cmd.Parameters.AddWithValue("@DiCongTac", ReadProperty(DiCongTacProperty) == null ? (object)DBNull.Value : ReadProperty(DiCongTacProperty).Value).DbType = DbType.Boolean;
                    cmd.Parameters.AddWithValue("@Type", ReadProperty(TypeProperty) == null ? (object)DBNull.Value : ReadProperty(TypeProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@LyDo", ReadProperty(LyDoProperty) == null ? (object)DBNull.Value : ReadProperty(LyDoProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@LastEdited_UserID", ReadProperty(LastEdited_UserIDProperty) == null ? (object)DBNull.Value : ReadProperty(LastEdited_UserIDProperty).Value).DbType = DbType.Int64;
                    cmd.Parameters.AddWithValue("@LastEdited_Date", ReadProperty(LastEdited_DateProperty).DBValue).DbType = DbType.DateTime;
                    cmd.Parameters.AddWithValue("@GhiChu", ReadProperty(GhiChuProperty) == null ? (object)DBNull.Value : ReadProperty(GhiChuProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@GioVao2", ReadProperty(GioVao2Property) == null ? (object)DBNull.Value : ReadProperty(GioVao2Property)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@GioRa2", ReadProperty(GioRa2Property) == null ? (object)DBNull.Value : ReadProperty(GioRa2Property)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@GioVao3", ReadProperty(GioVao3Property) == null ? (object)DBNull.Value : ReadProperty(GioVao3Property)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@GioRa3", ReadProperty(GioRa3Property) == null ? (object)DBNull.Value : ReadProperty(GioRa3Property)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@SoCong", ReadProperty(SoCongProperty) == null ? (object)DBNull.Value : ReadProperty(SoCongProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@TongGio", ReadProperty(TongGioProperty) == null ? (object)DBNull.Value : ReadProperty(TongGioProperty)).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@Thang", ReadProperty(ThangProperty) == null ? (object)DBNull.Value : ReadProperty(ThangProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@Nam", ReadProperty(NamProperty) == null ? (object)DBNull.Value : ReadProperty(NamProperty).Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@NgayTrongThang", ReadProperty(NgayTrongThangProperty) == null ? (object)DBNull.Value : ReadProperty(NgayTrongThangProperty).Value).DbType = DbType.Int32;
                    var args = new DataPortalHookArgs(cmd);
                    OnUpdatePre(args);
                    cmd.ExecuteNonQuery();
                    OnUpdatePost(args);
                }
            }
        }

        /// <summary>
        /// Self deletes the <see cref="HC_ChamCong_Info"/> object from database.
        /// </summary>
        private void Child_DeleteSelf()
        {
            using (var ctx = TransactionManager<SqlConnection, SqlTransaction>.GetManager("Connection"))
            {
                using (var cmd = new SqlCommand("dbo.HC_ChamCong_Info_delete", ctx.Connection))
                {
                    cmd.Transaction = ctx.Transaction;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@ID", ReadProperty(IDProperty)).DbType = DbType.Int32;
                    var args = new DataPortalHookArgs(cmd);
                    OnDeletePre(args);
                    cmd.ExecuteNonQuery();
                    OnDeletePost(args);
                }
            }
        }

        #endregion

        #region Pseudo Events

        /// <summary>
        /// Occurs after setting all defaults for object creation.
        /// </summary>
        partial void OnCreate(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Delete, after setting query parameters and before the delete operation.
        /// </summary>
        partial void OnDeletePre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Delete, after the delete operation, before Commit().
        /// </summary>
        partial void OnDeletePost(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after setting query parameters and before the fetch operation.
        /// </summary>
        partial void OnFetchPre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after the fetch operation (object or collection is fully loaded and set up).
        /// </summary>
        partial void OnFetchPost(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after the low level fetch operation, before the data reader is destroyed.
        /// </summary>
        partial void OnFetchRead(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after setting query parameters and before the update operation.
        /// </summary>
        partial void OnUpdatePre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Insert, after the update operation, before setting back row identifiers (RowVersion) and Commit().
        /// </summary>
        partial void OnUpdatePost(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Insert, after setting query parameters and before the insert operation.
        /// </summary>
        partial void OnInsertPre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs in DataPortal_Insert, after the insert operation, before setting back row identifiers (ID and RowVersion) and Commit().
        /// </summary>
        partial void OnInsertPost(DataPortalHookArgs args);

        #endregion

    }
}
